/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/attributes/users/get': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Get users by attribute from server
     * @description Gets a list of users by an attribute. Returns a list of the users’ IDs, their emails, and the attributes that were specified in the ‘key’ object of the request.
     */
    post: operations['get-users-by-attribute-from-server']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/attributes/users/me/get': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Get user’s attributes from client
     * @description Gets a list of particular user’s attributes. Returns only attributes with the `client` value of `attr_type` parameter.
     */
    post: operations['get-users-attributes-from-client']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/attributes/users/me/get_read_only': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Get user’s read-only attributes from client
     * @description Gets a list of particular user’s read-only attributes. Returns only attributes with the `server` value of the `attr_type` parameter, which was set only for reading.
     */
    post: operations['get-users-read-only-attributes-from-client']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/attributes/users/me/update': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Update user’s attributes from client
     * @description Updates and creates particular user’s attributes.
     */
    post: operations['update-users-attributes-from-client']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/attributes/users/{user_id}/get': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Get user’s attributes from server
     * @description Gets user’s attributes.
     */
    post: operations['get-users-attributes-from-server']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/attributes/users/{user_id}/get_read_only': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Get user’s read-only attributes from server
     * @description Gets a list of user’s read-only attributes.
     */
    post: operations['get-users-read-only-attributes-from-server']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/attributes/users/{user_id}/update': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Update user’s attributes from server
     * @description Updates and creates user’s attributes.
     */
    post: operations['update-users-attributes-from-server']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/attributes/users/{user_id}/update_read_only': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Update user’s read-only attributes from server
     * @description Updates and creates user’s read-only attributes.
     */
    post: operations['update-users-read-only-attributes-from-server']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/checklist': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get generic checklist items
     * @description Returns list of all checklist items
     *
     */
    get: operations['get-items-checklist']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/login': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Auth by username and password
     * @description Authenticates the user by the username/email and password specified.
     */
    post: operations['auth-by-username-and-password']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/login/device/{device_type}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Auth via device ID
     * @description Authenticates a user via a particular device ID. To enable silent authentication, use the [instruction](/doc/login/authentication-options/device-id/#login_features_device_id_presettings).
     */
    post: operations['jwt-auth-via-device-id']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/login/email/confirm': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Complete auth by email
     * @description Completes authentication by the user email address and a confirmation code. The code lifetime is 3 minutes.
     *
     *     This call is used only with the [Start auth by email](https://developers.xsolla.com/api/login/operation/jwt-start-auth-by-email) call.
     *
     *     The workflow of using this call:
     *     1. The application opens an authentication form so the user can enter their email address.
     *     2. The user enters their email address.
     *     3. The application sends the [Start auth by email](https://developers.xsolla.com/api/login/operation/jwt-start-auth-by-email) request to the Xsolla Login server:
     *       a. If the parameter `send_link` is `true`, after this request, you should send the [Get confirmation code](https://developers.xsolla.com/api/login/operation/get-confirmation-code) request to make email contain the confirmation code and link.
     *       b. If the parameter `send_link` is `false` or not passed, the email will contain the confirmation code only.
     *     4. The Xsolla Login server sends the email and returns the ID of the confirmation code.
     *     5. The application shows a field so the user can fill in the confirmation code.
     *     6. The user enters the received confirmation code or follows the link.
     *     7. The application sends this request to the Xsolla Login server with the received ID.
     *     8. The user is considered as authorized.
     *
     */
    post: operations['jwt-complete-auth-by-email']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/login/email/request': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Start auth by email
     * @description Starts authentication by the user email address and sends a confirmation code to their email address. The code lifetime is 3 minutes.
     *
     *     This call is used only with the [Complete auth by email](https://developers.xsolla.com/api/login/operation/jwt-complete-auth-by-email) call.
     *
     *     The workflow of using this call:
     *     1. The application opens an authentication form so the user can enter their email address.
     *     2. The user enters their email address.
     *     3. The application sends this request to the Xsolla Login server:
     *       a. If the parameter `send_link` is `true`, after this request, you should send the [Get confirmation code](https://developers.xsolla.com/api/login/operation/get-confirmation-code) request to make email contain the confirmation code and link.
     *       b. If the parameter `send_link` is `false` or not passed, the email will contain the confirmation code only.
     *     4. The Xsolla Login server sends the email and returns the ID of the confirmation code.
     *     5. The application shows a field so the user can fill in the confirmation code.
     *     6. The user enters the received confirmation code or follows the linke.
     *     7. The application sends the [Complete auth by email](https://developers.xsolla.com/api/login/operation/jwt-complete-auth-by-email) request with the received ID to the Xsolla Login server.
     *     8. The user is considered as authorized.
     *
     */
    post: operations['jwt-start-auth-by-email']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/login/phone/confirm': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Complete auth by phone number
     * @description Completes authentication by the user phone number and a confirmation code. The code lifetime is 3 minutes.
     *
     *     This call is used only with the [Start auth by phone number](https://developers.xsolla.com/api/login/operation/jwt-start-auth-by-phone-number) call.
     *
     *     The workflow of using this call:
     *     1. The application opens an authentication form so the user can enter their phone number.
     *     2. The user enters their phone number.
     *     3. The application sends the [Start auth by phone number](https://developers.xsolla.com/api/login/operation/jwt-start-auth-by-phone-number) request to the Xsolla Login server:
     *       a. If the parameter `send_link` is `true`, after this request, you should send the [Get confirmation code](https://developers.xsolla.com/api/login/operation/get-confirmation-code) request to make SMS contain the confirmation code and link.
     *       b. If the parameter `send_link` is `false` or not passed, the SMS will contain the confirmation code only.
     *     4. The Xsolla Login server sends the SMS and returns the ID of the confirmation code.
     *     5. The application shows a field so the user can fill in the confirmation code.
     *     6. The user enters the received confirmation code or follows the link.
     *     7. The application sends this request to the Xsolla Login server.
     *     8. The user is considered as authorized.
     *
     */
    post: operations['jwt-complete-auth-by-phone-number']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/login/phone/request': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Start auth by phone number
     * @description Starts authentication by the user phone number and sends a confirmation code to their phone number. The code lifetime is 3 minutes.
     *
     *     This call is used only with the [Complete auth by phone number](https://developers.xsolla.com/api/login/operation/jwt-complete-auth-by-phone-number) call.
     *
     *     The workflow of using this call:
     *     1. The application opens an authentication form so the user can enter their phone number.
     *     2. The user enters their phone number.
     *     3. The application sends this request to the Xsolla Login server:
     *       a. If the parameter `send_link` is `true`, after this request, you should send the [Get confirmation code](https://developers.xsolla.com/api/login/operation/get-confirmation-code) request to make SMS contain the confirmation code and link.
     *       b. If the parameter `send_link` is `false` or not passed, the SMS will contain the confirmation code only.
     *     4. The Xsolla Login server sends the SMS and returns the ID of the confirmation code.
     *     5. The application shows a field so the user can fill in the confirmation code.
     *     6. The user enters the received confirmation code or follows the link.
     *     7. The application sends the [Complete auth by phone number](https://developers.xsolla.com/api/login/operation/jwt-complete-auth-by-phone-number) request with the received ID to the Xsolla Login server.
     *     8. The user is considered as authorized.
     *
     */
    post: operations['jwt-start-auth-by-phone-number']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/oauth2/auth': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * OAuth 2.0 Authorize
     * @description Checks the presence of a valid SSO session. Redirects to the URL passed in the `redirect_url` parameter with an authorization code.
     */
    get: operations['oauth2-authorize']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/oauth2/clear_sso': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Clear SSO
     * @description Deletes user's SSO cookie for given project.
     */
    get: operations['clear-sso-cookie']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/oauth2/consent': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Save consent for OAuth 2.0
     * @description Saves the user's consent to the application of certain scopes for a specific OAuth 2.0 client.
     */
    post: operations['oauth2-save-consent']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/oauth2/consent/validate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Check consent for OAuth 2.0
     * @description Checks if the user gave consent to the application of the user data collection scope for a specific OAuth 2.0 client.
     */
    post: operations['oauth2-check-consent']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/oauth2/login': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Auth by username and password
     * @description Authenticates the user by the username/email and password specified. To finish user authentication, get the user JWT by sending the [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) request.
     */
    post: operations['oauth-20-auth-by-username-and-password']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/oauth2/login/device/{device_type}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Auth via device ID
     * @description Authenticates a user via a particular device ID.
     */
    post: operations['oauth-20-auth-via-device-id']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/oauth2/login/email/confirm': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Complete auth by email
     * @description Completes authentication by the user email address and a confirmation code. The code lifetime is 3 minutes.
     *
     *     This call is used only with the [Start auth by email](https://developers.xsolla.com/api/login/operation/oauth-20-start-auth-by-email) call.
     *
     *     The workflow of using this call:
     *     1. The application opens an authentication form so the user can enter their email address.
     *     2. The user enters their email address.
     *     3. The application sends the [Start auth by email](https://developers.xsolla.com/api/login/operation/oauth-20-start-auth-by-email) request to the Xsolla Login server:
     *       a. If the parameter `send_link` is `true`, after this request, you should send the [Get confirmation code](https://developers.xsolla.com/api/login/operation/get-confirmation-code) request to make email contain the confirmation code and link.
     *       b. If the parameter `send_link` is `false` or not passed, the email will contain the confirmation code only.
     *     4. The Xsolla Login server sends the email and returns the ID of the confirmation code.
     *     5. The application shows a field so the user can fill in the confirmation code.
     *     6. The user enters the received confirmation code or follows the link.
     *     7. The application sends this request to the Xsolla Login server with the received ID.
     *     8. The user is considered as authorized.
     *
     */
    post: operations['oauth-20-complete-auth-by-email']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/oauth2/login/email/request': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Start auth by email
     * @description Starts authentication by the user email address and sends a confirmation code to their email address. The code lifetime is 3 minutes.
     *
     *     This call is used only with the [Complete auth by email](https://developers.xsolla.com/api/login/operation/oauth-20-complete-auth-by-email) call.
     *
     *     The workflow of using this call:
     *     1. The application opens an authentication form so the user can enter their email address.
     *     2. The user enters their email address.
     *     3. The application sends this request to the Xsolla Login server:
     *        a. If the parameter `send_link` is `true`, after this request, you should send the [Get confirmation code](https://developers.xsolla.com/api/login/operation/get-confirmation-code) request to make email contain the confirmation code and link.
     *        b. If the parameter `send_link` is `false` or not passed, the email will contain the confirmation code only.
     *     4. The Xsolla Login server sends the email and returns the ID of the confirmation code.
     *     5. The application shows a field so the user can fill in the confirmation code.
     *     6. The user enters the received confirmation code or follows the link.
     *     7. The application sends the [Complete auth by email](https://developers.xsolla.com/api/login/operation/oauth-20-complete-auth-by-email) request with the received ID to the Xsolla Login server.
     *     8. The user is considered as authorized.
     *
     */
    post: operations['oauth-20-start-auth-by-email']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/oauth2/login/phone/confirm': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Complete auth by phone number
     * @description Completes authentication by the user phone number and a confirmation code. The code lifetime is 3 minutes.
     *
     *     This call is used only with the [Start auth by phone number](https://developers.xsolla.com/api/login/operation/oauth-20-start-auth-by-phone-number) call.
     *
     *     The workflow of using this call:
     *     1. The application opens an authentication form so the user can enter their phone number.
     *     2. The user enters their phone number.
     *     3. The application sends the [Start auth by phone number](https://developers.xsolla.com/api/login/operation/oauth-20-start-auth-by-phone-number) request to the Xsolla Login server:
     *       a. If the parameter `send_link` is `true`, after this request, you should send the [Get confirmation code](https://developers.xsolla.com/api/login/operation/get-confirmation-code) request to make SMS contain the confirmation code and link.
     *       b. If the parameter `send_link` is `false` or not passed, the SMS will contain the confirmation code only.
     *     4. The Xsolla Login server sends the SMS and returns the ID of the confirmation code.
     *     5. The application shows a field so the user can fill in the confirmation code.
     *     6. The user enters the received confirmation code or follows the link.
     *     7. The application sends this request to the Xsolla Login server.
     *     8. The user is considered as authorized.
     *
     */
    post: operations['oauth-20-complete-auth-by-phone-number']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/oauth2/login/phone/request': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Start auth by phone number
     * @description Starts authentication by the user phone number and sends a confirmation code to their phone number. The code lifetime is 3 minutes.
     *
     *     This call is used only with the [Complete auth by phone number](https://developers.xsolla.com/api/login/operation/oauth-20-complete-auth-by-phone-number) call.
     *
     *     The workflow of using this call:
     *     1. The application opens an authentication form so the user can enter their phone number.
     *     2. The user enters their phone number.
     *     3. The application sends this request to the Xsolla Login server:
     *       a. If the parameter `send_link` is `true`, after this request, you should send the [Get confirmation code](https://developers.xsolla.com/api/login/operation/get-confirmation-code) request to make SMS contain the confirmation code and link.
     *       b. If the parameter `send_link` is `false` or not passed, the SMS will contain the confirmation code only.
     *     4. The Xsolla Login server sends the SMS and returns the ID of the confirmation code.
     *     5. The application shows a field so the user can fill in the confirmation code.
     *     6. The user enters the received confirmation code or follows the link.
     *     7. The application sends the [Complete auth by phone number](https://developers.xsolla.com/api/login/operation/oauth-20-complete-auth-by-phone-number) request with the received ID to the Xsolla Login server.
     *     8. The user is considered as authorized.
     *
     */
    post: operations['oauth-20-start-auth-by-phone-number']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/oauth2/login/token': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * JWT auth by username and password
     * @description Authenticates the user by the username/email and password and returns a JWT. Exchanging the code to a JWT via the [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call is not needed.
     */
    post: operations['jwt-auth-by-username-and-password']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/oauth2/logout': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Log user out
     * @description Logs the user out and deletes the user session according to the value of the `sessions` parameter. Call the [Check user authentication](https://developers.xsolla.com/api/login/operation/check-user-authentication) call to see if the user is logged in.
     */
    get: operations['log-user-out']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/oauth2/social/{oauth2_cross_social_provider_name}/cross_auth': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Silent authentication
     * @description Exchanges the user JWT from Steam, Xbox, or Epic Games to the JWT in your project (`projectId`).
     *     To enable silent authentication, use the [instruction](https://developers.xsolla.com/doc/login/features/silent-authentication).
     *
     */
    get: operations['oauth-20-silent-authentication']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/oauth2/social/{provider_name}/login_redirect': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Auth via social network
     * @description Redirects the user to the page for authentication via the specified social network.
     *
     */
    get: operations['oauth-20-auth-via-social-network']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/oauth2/social/{provider_name}/login_url': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get link for social auth
     * @description Gets the link for authentication via the social network. The link is valid for 10 minutes.
     *
     *     You can get the link by this call and add it to your button for authentication via a social network.
     *
     */
    get: operations['oauth-20-get-link-for-social-auth']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/oauth2/social/{provider_name}/login_with_token': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Auth via access token of social network
     * @description Authenticates the user with the access token using social network credentials.
     */
    post: operations['oauth-20-auth-via-access-token-of-social-network']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/oauth2/sso': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Check user authentication
     * @description Checks if a user has already logged in via a service. If they have, you will receive an OAuth 2.0 authorization code without user participation. Used in [Single Sign-on](https://developers.xsolla.com/doc/login/features/single-sign-on).
     */
    get: operations['check-user-authentication']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/oauth2/token': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Generate JWT
     * @description Use this call:
     *     * To get a [user JWT](/api/login/overview/#section/Authentication/Getting-a-user-token).
     *     * To refresh the JWT when it expires. Works only if `scope=offline` is passed in the registration or authentication call.
     *     * To get a [server JWT](/api/login/overview/#section/Authentication/Getting-a-server-token). The user participation isn’t needed.
     *
     *     Usage of this call depends on the value of the `grant_type` parameter.
     *
     */
    post: operations['generate-jwt']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/oauth2/user': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Register new user
     * @description Creates a new user.
     *
     *     * If you store user data at Xsolla or in custom storage, the user will receive an account confirmation [email](https://developers.xsolla.com/doc/login/how-to/email-customization/).
     *     * If you store user data at PlayFab, you can set up sending the account confirmation email to the user. Use the [PlayFab instruction](https://developers.xsolla.com/doc/login/references/playfab-storage/#recipes_users_storage_playfab_how_it_works_registration_confirmation) for this.
     *     * If you store user data at Firebase, the user will receive an account confirmation message from Firebase side.
     *
     *     See the [Comparison of user data storages](https://developers.xsolla.com/doc/login/references/users-storages-comparison/) page for more information about user data storages.
     *
     */
    post: operations['oauth-20-register-new-user']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/oauth2/user/resend_confirmation_link': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Resend account confirmation email
     * @description Resends an account confirmation email to a user. To complete account confirmation, the user should follow the link in the email.
     */
    post: operations['oauth-20-resend-account-confirmation-email']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/otc/code': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get confirmation code
     * @description Waits until the user follows the link provided via email or SMS and returns the confirmation code for authentication. If you sent this call and after 20 seconds you didn't get the code, there was an error. In this case, resend the call immediately. The code lifetime is 3 minutes.
     *
     *     The workflow of using this call:
     *     1. The application opens an authentication form so the user can enter their email address.
     *     2. The user enters their email address.
     *     3. The application sends the **Start auth by email or phone number** (JWT or OAuth 2.0) request to the Xsolla Login server:
     *       a. If the parameter `send_link` is `true`, after this request, you should send this same request to make email or SMS contain the confirmation code and link.
     *       b. If the parameter `send_link` is `false` or not passed, the email will contain the confirmation code only.
     *     4. The Xsolla Login server sends an email or SMS to the user and returns the ID of the confirmation code.
     *     5. The application shows a field so the user can fill in the confirmation code.
     *     6. The user enters the received confirmation code or follows the link.
     *     7. The application sends the **Complete auth by email or phone number** (JWT or OAuth 2.0) request with the received ID to the Xsolla Login server.
     *     8. The user is considered as authorized.
     *
     */
    get: operations['get-confirmation-code']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/password/reset/confirm': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Confirm password reset
     * @description Confirms the user password reset.
     *
     *     You can reset user password if you use Login widget forms or your own password reset forms. If you use your own forms, contact your Customer Success Manager and specify the URL of your password reset form.
     *
     *     The workflow of using this call with your own forms:
     *     1. The application opens a form so the user can enter their email or username.
     *     2. The user enters their email or username.
     *     3. The application sends the [Reset password](https://developers.xsolla.com/api/login/operation/reset-password) request to the Xsolla Login server.
     *     4. The Xsolla Login server sends a confirmation email to the user.
     *     5. The user follows the link in the email and proceeds to the form for setting a new password.
     *     6. The user enters a new password and clicks **Set new password**.
     *     7. The application or Login widget sends this request to the Xsolla Login server.
     *
     */
    post: operations['confirm-password-reset']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/password/reset/request': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Reset password
     * @description Resets the user password with user confirmation. If the user data is kept in the Xsolla data storage or on your side, users receive a [password change confirmation email](https://developers.xsolla.com/doc/login/how-to/email-customization). If the user data is kept in the PlayFab storage, password reset is done on PlayFab’s side. To get more information, see the [Comparison of user data storages](https://developers.xsolla.com/doc/login/references/users-storages-comparison/) page.
     *
     *     The workflow of using this call:
     *     1. The application opens a form so the user can enter their email or username.
     *     2. The user enters their email or username.
     *     3. The application sends this request to the Xsolla Login server.
     *     4. The Xsolla Login server sends a confirmation email to the user.
     *     5. The user follows the link in the email and proceeds to the form for setting a new password.
     *     6. The user enters a new password and clicks **Set new password**.
     *     7. The application sends the [Confirm password reset](https://developers.xsolla.com/api/login/operation/confirm-password-reset) request to the Xsolla Login server.
     *
     *     If you use your own password reset form, use the [Confirm password reset](https://developers.xsolla.com/api/login/operation/confirm-password-reset) call to reset the user password.
     *
     */
    post: operations['reset-password']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/project/{project_id}/attribute_schema': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get Schema
     * @description Gets [JSON Schema](https://json-schema.org/) of user attributes.
     */
    get: operations['get-attributes-schema']
    /**
     * Update Schema
     * @description Updates [JSON Schema](https://json-schema.org/) of user attributes.
     */
    put: operations['put-attributes-schema']
    post?: never
    /**
     * Delete Schema
     * @description Deletes [JSON Schema](https://json-schema.org/) of user attributes from the Login project.
     */
    delete: operations['delete-attributes-schema']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/projects': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get project list
     * @description Get project list.
     */
    get: operations['get-project-list']
    put?: never
    /**
     * Create project
     * @description Create project.
     */
    post: operations['create-project']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/projects/{project_id}/age_rating': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List age restrictions for project
     * @description Returns a list of countries with age restrictions in a project.
     */
    get: operations['list-age-restrictions']
    put?: never
    /**
     * Create age restriction for country
     * @description Creates or updates existing age restriction for a selected country in a project.
     */
    post: operations['create-age-restriction']
    /**
     * Delete age restriction for country
     * @description Deletes age restriction for a selected country in a project.
     */
    delete: operations['delete-age-restriction']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/projects/{project_id}/age_rating/batch': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Manage age restrictions for countries
     * @description Updates, deletes, or creates age restrictions for all countries in a project. You may set default restrictions for all countries and set country-specific restrictions, if any. <div class="notice"><strong>Notice</strong><br>Each new call overrides previous settings.</div>
     *
     */
    post: operations['batch-age-restrictions']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/projects/{project_id}/checklist': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get project configuration checklist
     * @description Returns a list of Login project configuration steps and statuses of their completion.
     *
     */
    get: operations['get-project-checklist']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/projects/{project_id}/checklist/{item}/check': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Mark step of checklist as done
     * @description Returns list of steps with mark of done steps
     *
     */
    put: operations['check-project-checklist']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/projects/{project_id}/events/{event_type}/webhooks': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get webhooks for event
     * @description Gets the list of webhooks information for the specified type of events.
     */
    get: operations['get-webhooks-for-event']
    put?: never
    /**
     * Add webhook for event
     * @description Creates a webhook for the specified event. The webhook has the following format:
     *     <pre>
     *     {
     *         "event_type": "Event type",
     *         "event_time": "Date and time when the event occurred in the <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO 8601</a> format",
     *         "project_id": "Login project ID",
     *         "data": {
     *              // Some other data, can be different for different events and include nested objects
     *          }
     *     }
     *     </pre>
     *
     */
    post: operations['add-webhook-for-event']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/projects/{project_id}/events/{event_type}/webhooks/{webhook_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Delete webhook for event
     * @description Deletes a webhook with the specified ID.
     */
    delete: operations['delete-webhook-for-event']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/projects/{project_id}/export_users': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Export user data
     * @description Exports user data (personal information and attributes) from the Login project to a CSV format file. You will receive an archive of user data to the specified email address.
     *
     *     The call can be requested 1 time per hour.
     *
     */
    post: operations['export-users']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/projects/{project_id}/fine_configuration': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /**
     * Update project configuration
     * @description Updates project configuration. The method accepts JSON in body. The request may contain all configuration parameters or a separate one as well.
     */
    patch: operations['project-configuration-edit']
    trace?: never
  }
  '/projects/{project_id}/jwks.json': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * JSON Web Key Set
     * @description A JSON object that represents a set of JWKs. The JSON object MUST have a keys member, which is an array of JWKs.
     *
     */
    get: operations['json-web-key-set']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/projects/{project_id}/keys': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get project keys
     * @description Gets a list of the public RSA project keys.
     *
     *     To validate user JWT, choose the library and pass an appropriate public key from the response to this call to the validation function.
     *
     */
    get: operations['get-projects-keys']
    put?: never
    /**
     * Generate RSA key
     * @description Generates new RSA key and returns public key.
     *     To validate user JWT, choose the library and pass an appropriate public key from the response to this call to the validation function.
     */
    post: operations['post-projects-key']
    /**
     * Delete all project keys
     * @description Deletes all project RSA keys. After that all tokens are signed by HS256 algorithm.
     *
     */
    delete: operations['delete-projects-keys']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/projects/{project_id}/mfa': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get project two-factor authentication settings
     * @description Gets project two-factor authentication settings.
     */
    get: operations['get-project-two-factor-authentication-settings']
    /**
     * Update project two-factor authentication settings
     * @description Updates project two-factor authentication settings. The user must confirm the changes by entering a one-time code.
     *
     */
    put: operations['update-project-two-factor-authentication-settings']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/projects/{project_id}/sms_limit': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Delete SMS limit by project and country
     * @description Deletes an SMS limit by project and country.
     */
    delete: operations['delete-sms-limit']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/projects/{project_id}/social/provider_token': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Change settigns for connected social provider
     * @description Configure social provider token in Login JWT.
     */
    put: operations['put-social-provider-token']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/projects/{project_id}/social/{provider_name}/custom_scope': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Change scope settigns for connected social provider
     * @description Manage custom Oauth2 scopes for provider.
     */
    put: operations['put-social-provider-custom-scope']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/projects/{project_id}/user_groups': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get project groups
     * @description Getting a list of all active project groups with a default sign.
     */
    get: operations['get-project-user-groups']
    put?: never
    /**
     * Add new project group
     * @description Adding a new group to the list of groups
     */
    post: operations['post-project-user-group']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/projects/{project_id}/user_groups/{group_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update group name
     * @description Changing the group name
     */
    put: operations['put-project-user-group']
    post?: never
    /**
     * Delete group
     * @description Deleting a group
     */
    delete: operations['del-project-user-group']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/projects/{project_id}/user_import': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Import user data
     * @description Imports user data from a CSV format file to the Login project.
     */
    post: operations['upload-import-file']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/projects/{project_id}/users/batch/search/by_ids': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Search users by user_id list
     * @description Searches users by the `user_id` parameter and gets a list of thier names, ids and avatars.
     *
     */
    post: operations['search-users-by-user-id-list']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/projects/{project_id}/users/search': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Search users
     * @description Search users by criteria, with pagination and ordering
     */
    get: operations['search-users-by-filter']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/projects/{project_id}/users/{user_id}/attributes': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get attributes by user ID
     * @description Gets a list of user’s attributes. Returns only attributes values for user by his ID.
     */
    get: operations['get-attributes-by-user-id']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/projects/{project_id}/users/{user_id}/ban': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Ban user
     * @description Add ban to the user on period or permanent
     */
    post: operations['post-projects-users-ban']
    /**
     * Unban user
     * @description Remove ban from user
     */
    delete: operations['del-projects-users-ban']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/projects/{project_id}/users_count': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get user count
     * @description Get the number of users on project.
     */
    get: operations['get-users-count']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/social/{cross_social_provider_name}/cross_auth': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Silent authentication
     * @description Exchanges the user JWT from Steam, Xbox, or Epic Games for the JWT in your project (`projectId`).
     *
     *     You will get the link to redirect the user to your project.
     *
     *     To enable silent authentication, use the [instruction](https://developers.xsolla.com/doc/login/features/silent-authentication).
     *
     */
    get: operations['jwt-silent-authentication']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/social/{provider_name}/login_redirect': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Auth via social network
     * @description Redirects the user to the page for authentication via the specified social network.
     */
    get: operations['jwt-auth-via-social-network']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/social/{provider_name}/login_url': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get link for social auth
     * @description Gets the link for authentication via the social network. The link is valid for 10 minutes.
     *
     *     You can get the link by this call and add it to your button for authentication via the social network.
     *
     */
    get: operations['jwt-get-link-for-social-auth']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/social/{provider_name}/login_with_token': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Auth via access token of social network
     * @description Authenticates the user with the access token using social network credentials.
     */
    post: operations['jwt-auth-via-access-token-of-social-network']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/social/{provider_name}/refresh_token': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Refresh social tokens in JWT
     * @description Refreshes social token by social refresh token from JWT.
     *
     */
    post: operations['jwt-refresh-social-token']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/user': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Register new user
     * @description Creates a new user.
     *
     *     * If you store user data at Xsolla or custom storage, the user will receive an account confirmation [message](https://developers.xsolla.com/doc/login/customization/email-customization/).
     *     * If you store user data at PlayFab, the user will *not* receive an account confirmation [message](https://developers.xsolla.com/doc/login/customization/email-customization/).
     *     * If you store user data at Firebase, the user will receive an account confirmation message from Firebase side.
     *
     *     See the [Comparison of user data storages](https://developers.xsolla.com/doc/login/references/users-storages-comparison/) page for more information about user data storages.
     *
     */
    post: operations['jwt-register-new-user']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/user/resend_confirmation_link': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Resend account confirmation email
     * @description Resends an account confirmation email to a user. To complete account confirmation, the user should follow the link in the email.
     */
    post: operations['jwt-resend-account-confirmation-email']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Register new user from server
     * @description Creates a new user with requested body parameters. These parameters are set as confirmed. Combination of parameters passed to the body must include at least `email` or `phone_number` parameter. The call is used only if you set up [Xsolla storage](https://developers.xsolla.com/doc/login/integration-guide/connect-users-storage/#login_guide_connect_users_storage_xsolla).
     *
     */
    post: operations['register-new-user-from-server']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/account/code': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create code for linking accounts
     * @description Creates the code for linking the [platform account](/api/login/overview/#section/Glossary/Platform-account) to the existing [main account](/api/login/overview/#section/Glossary/Main-account) when the user logs in to the game via a gaming console.
     *
     *     The call is used with [Link accounts by code request](https://developers.xsolla.com/api/login/operation/link-accounts-by-code).
     *
     */
    post: operations['create-code-for-linking-accounts']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/account/link': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Link accounts by code
     * @description Links the [platform account](/api/login/overview/#section/Glossary/Platform-account) to the existing [main account](/api/login/overview/#section/Glossary/Main-account) by the code.
     *
     *     To link accounts, the game server uses this call with the response from the [Create code for linking accounts](https://developers.xsolla.com/api/login/operation/create-code-for-linking-accounts) request.
     *
     */
    post: operations['link-accounts-by-code']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/account/link_external_id': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Link user IDs via external ID
     * @description Links a user from your game to a user from your Login project via an external ID. You will not be able to link the same external ID to different users and update the external ID of a user if they already have it.
     *
     *     You can find an external ID in:
     *     * a user JWT after successful authentication as a value of the `external_account_id` claim,
     *     * a response of the [Get user details](https://developers.xsolla.com/api/login/operation/get-user-details) call as a value of the `external_id` parameter.
     *
     */
    post: operations['link-user-ids-via-external-id']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/age/check': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Check user’s age
     * @description Checks user’s age for a particular region. The age requirements depend on the region. Service determines the user’s location by the IP address.
     */
    post: operations['check-users-age']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/linking_info': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Get user’s IDs by social ID and platform
     * @description The call will return:
     *     * user ID if the user has linked the [main account](/api/login/overview/#section/Glossary/Main-account).
     *     * user ID if the user has linked the [platform account](/api/login/overview/#section/Glossary/Platform-account).
     *     * `xl_uid=null` if the user does not have a linked account.
     *
     */
    post: operations['get-users-ids-by-social-id-and-platform']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/login/server_custom_id': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Auth by custom ID
     * @description Authenticates a user by a particular custom ID. If the user does not exist, they are created.
     */
    post: operations['auth-by-custom-id']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/me': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get user details
     * @description Gets details of the user authenticated by the JWT.
     */
    get: operations['get-user-details']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /**
     * Update user details
     * @description Updates the details of the authenticated user by JWT.
     */
    patch: operations['update-user-details']
    trace?: never
  }
  '/users/me/devices': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get user’s devices
     * @description Gets a list of user’s devices.
     */
    get: operations['get-users-devices']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/me/devices/{device_type}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Link device to account
     * @description Links the specified device to the user account. To enable authentication via device ID and linking, contact your Customer Success Manager.
     */
    post: operations['link-device-to-account']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/me/devices/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Unlink device from account
     * @description Unlinks the specified device from the user account. To enable authentication via device ID and unlinking, contact your Customer Success Manager.
     */
    delete: operations['unlink-device-from-account']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/me/email': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get user email
     * @description Gets the email of the authenticated user by JWT.
     */
    get: operations['get-user-email']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/me/link_email_password': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Add username/email auth to account
     * @description Adds the username/email and password authentication to the existing user account. This call is used if the account is created via device ID or phone number.
     */
    post: operations['add-username-email-auth-to-account']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/me/login_urls': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get links for social auth
     * @description Gets links for authentication via the social networks enabled in **your Login project > General settings > Social Networks** section of [Publisher Account](https://publisher.xsolla.com/). The links are valid for 10 minutes.
     *
     *     You can get the link by this call and add it to your button for authentication via the social network.
     *
     */
    get: operations['get-links-for-social-auth']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/me/mfa': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get user’s two-factor authentication settings
     * @description Gets user’s two-factor authentication settings. You must enable two-factor authentication for the Login project. Contact your Customer Success Manager to enable it.
     */
    get: operations['get-users-two-factor-authentication-settings']
    put?: never
    /**
     * Update user’s two-factor authentication settings
     * @description Updates user’s two-factor authentication settings. The user must confirm the changes by entering a one-time code.
     *
     *     The workflow of using this call:
     *     1. The user enables or disables two-factor authentication.
     *     2. The application sends the request to the Xsolla Login server.
     *     3. The Xsolla Login server sends the one-time confirmation code to the user and returns the URL of the two-factor authentication page.
     *     4. The application redirects the user to the URL.
     *     5. The user enters the one-time code.
     *     6. New two-factor authentication settings are applied.
     *
     *     You must enable two-factor authentication for the Login project. Contact your Customer Success Manager to enable it.
     *
     */
    post: operations['update-users-two-factor-authentication-settings']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/me/phone': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get user phone number
     * @description Gets the phone number of the authenticated user by JWT.
     *
     *     The phone number in this call is used only for passing the two-factor authentication.
     *
     */
    get: operations['get-user-phone-number']
    put?: never
    /**
     * Update user phone number
     * @description Updates the phone number of the authenticated user by JWT.
     *
     *     The phone number in this call is used only for passing the two-factor authentication.
     *
     */
    post: operations['update-user-phone-number']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/me/phone/{phoneNumber}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Delete user phone number
     * @description Deletes the phone number of the authenticated user by JWT.
     *
     *     The phone number in this call is used only for passing the two-factor authentication.
     *
     */
    delete: operations['delete-user-phone-number']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/me/picture': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Upload user picture
     * @description Uploads the profile picture of the authenticated user by JWT.
     */
    post: operations['upload-user-picture']
    /**
     * Delete user picture
     * @description Deletes the profile picture of the authenticated user by JWT.
     */
    delete: operations['delete-user-picture']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/me/relationships': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get user’s friends
     * @description Gets a list of users added as friends of the authenticated user.
     */
    get: operations['get-users-friends']
    put?: never
    /**
     * Update user’s friends
     * @description Updates the friend list of the authenticated user.
     */
    post: operations['update-users-friends']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/me/social_friends': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get social account friends
     * @description Gets a list of user’s friends from a social provider.
     */
    get: operations['get-social-account-friends']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/me/social_friends/update': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Update social account friends
     * @description Begins data processing to update a list of user’s friends from a social provider. Note that there may be a delay in data processing because of the Xsolla Login server or provider server high loads.
     */
    post: operations['update-social-account-friends']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/me/social_providers': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get linked networks
     * @description Gets a list of the social networks linked to the user account.
     */
    get: operations['get-linked-networks']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/me/social_providers/{providerName}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Deletes Linked Network
     *
     * @description Deletes social network linked to the user account.
     */
    delete: operations['delete-linked-networks']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/me/social_providers/{providerName}/login_redirect': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Link social network to account
     * @description Links the social network, which is used by the player for authentication, to the user account.
     *
     *     The linking flow:
     *     1. The user authenticates on the game website.
     *     2. The UI offers to link the social network to the user account.
     *     3. The Xsolla Login server redirects the user to the social network.
     *     4. The user authenticates in the social network.
     *     5. The Xsolla Login server links the social network to the user account.
     *     6. The Xsolla Login server redirects the user to the game website.
     *
     */
    get: operations['link-social-network-to-account']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/me/social_providers/{providerName}/login_url': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get URL to link social network to account
     * @description Gets the URL to link the social network to the user’s account. The social network should be used for authentication.
     *
     *     The linking flow:
     *     1. The user authenticates on the game website.
     *     2. The UI offers to link the social network to the user account.
     *     3. The Xsolla Login server returns social network URL.
     *     4. The game website redirects the user to the social network.
     *     5. The user authenticates in the social network.
     *     6. The Xsolla Login server links the social network to the user account.
     *     7. The Xsolla Login server redirects the user to the game website.
     *
     */
    get: operations['get-url-to-link-social-network-to-account']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/search': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Shared search users by all projects
     * @description Searches users by the `id`, `email` ans `phone` parameters. Search can be performed instantly when the user starts entering the search parameter.
     *
     *     Notice: user who request call should has permissions at LDAP
     *
     */
    get: operations['search-users-by-admin']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/search/by_nickname': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Search users by nickname
     * @description Searches users by the `nickname` parameter and gets a list of them. Search can be performed instantly when the user starts entering the search parameter.
     *
     *     The workflow of using this call:
     *     1. The user enters a nickname or tag, or nickname and tag.
     *     2. The Xsolla Login server searches for users in the Login project data of the user who initiated a search.
     *
     *     The current user can execute this call only one time per second.
     *
     */
    get: operations['search-users-by-nickname']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/{user_id}/public': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get user public profile
     * @description Gets the user information from their public profile by the user ID.
     */
    get: operations['get-user-public-profile']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    attribute: {
      /** @description Name of attribute that is used to identify user’s attribute. Must be unique per user. */
      key: string
      /**
       * @description Definition of user’s access level to other users’ attributes.
       * @enum {string|null}
       */
      permission?: 'public' | 'private'
      /** @description Value of user’s attribute. */
      value: string
    }
    createInternalOauth20ProjectsClientParamsBodyAccessItems: {
      /** @description Value for the specified `resource_name` parameter. */
      resource: string
      /**
       * @description Resource name which client grants access for.
       * @enum {string}
       */
      resource_name: 'product'
    }
    deviceInfo: {
      /** @description Manufacturer and model name of the device. */
      device: string
      /** @description Device ID generated by the Xsolla Login server. It **is not** the same as the `device_id` parameter from the Auth via device ID ([JWT](https://developers.xsolla.com/api/login/operation/jwt-auth-via-device-id) and [OAuth 2.0](https://developers.xsolla.com/api/login/operation/oauth-20-auth-via-device-id)) call. */
      id: number
      /** @description Date and time of the last user login via the device in the [RFC3339 format](https://www.ietf.org/rfc/rfc3339.txt). */
      last_used_at: string
      /**
       * @description Type of the device.
       * @enum {string}
       */
      type: 'android' | 'ios'
    }
    error: {
      /** @description Error code. */
      error_code?: string
      /** @description Error description. */
      error_description?: string
    }
    /** @description Error. */
    errorResult: {
      error: {
        /**
         * @description Error code.
         * @example 003-061
         */
        code: string
        /**
         * @description Error description.
         * @example Object not found.
         */
        description: string
        /** @description Additional information. */
        details?: Record<string, never>
      }
    }
    getAttribute: {
      /**
       * @description Data type of attribute
       * @enum {string|null}
       */
      data_type?: 'string' | 'number' | 'integer' | 'boolean'
      /** @description Description of attribute from JSON Schema. */
      description?: string | null
      /** @description Format of attribute from JSON Schema. Can be `date-time`, `date`, `time`, `duration`, `email`, `uri`, `uuid` or other from JSON Schema [specification](https://json-schema.org/draft/2020-12/json-schema-validation.html#rfc.section.7.3) */
      format?: string | null
      /** @description Name of attribute that is used to identify user’s attribute. */
      key: string
      /**
       * @description Definition of user’s access level to other users’ attributes.
       * @enum {string|null}
       */
      permission?: 'public' | 'private'
      /** @description Value of user’s attribute. */
      value: string
    }
    getServerAttribute: {
      /**
       * @description Definition of user’s access level to service attributes.
       * @default client
       * @enum {string}
       */
      attr_type: 'client' | 'server'
      /**
       * @description Data type of attribute
       * @enum {string|null}
       */
      data_type?: 'string' | 'number' | 'integer' | 'boolean'
      /** @description Description of attribute from JSON Schema. */
      description?: string | null
      /** @description Format of attribute from JSON Schema. Can be `date-time`, `date`, `time`, `duration`, `email`, `uri`, `uuid` or other from JSON Schema [specification](https://json-schema.org/draft/2020-12/json-schema-validation.html#rfc.section.7.3) */
      format?: string | null
      /** @description Name of attribute that is used to identify user’s attribute. */
      key: string
      /**
       * @description Definition of user’s access level to other users’ attributes.
       * @enum {string|null}
       */
      permission?: 'public' | 'private'
      /** @description The attribute is read-only */
      readonly?: boolean
      /** @description Value of user’s attribute. */
      value: string
    }
    /** @description Error. */
    httpProblem: {
      /** @description A JSON object of custom data returned to the client. This will only be shown for errors that require custom data to be passed back. */
      customData?: string
      /**
       * @description Expanded human-readable details. This string should not be shown to players.
       * @example The given resource (123) does not exist
       */
      detail: string
      /**
       * @description Machine-readable error token string. This field should be used by the game to look up a localized and game-appropriate error to players.
       * @example RESOURCE_NOT_FOUND
       */
      errorCode: string
      /**
       * @description HTTP status code returned
       * @example 404
       */
      httpStatus: number
      /**
       * @description Method that was called
       * @example RestGet
       */
      method: string
      /**
       * @description A relative link to the endpoint documentation.
       * @example doc/rest/get.md
       */
      problemType: string
      /**
       * @description Simple human-readable title. This error should not be shown to players.
       * @example No such resource
       */
      title: string
    }
    /** @example {
     *       "id": "00000000-0000-0000-0000-00000000",
     *       "name": "email_customization_complete"
     *     } */
    item: {
      /** @description Generated UUID identificator */
      id: string
      /** @description Given into request name of a new item */
      name: string
    }
    jwk: {
      /**
       * @description The specific cryptographic algorithm used with the key.
       * @example RS256
       */
      alg: string
      /**
       * @description The exponent for the RSA public key. The value is encoded encoded according to the Base64 standard.
       * @example AQAB
       */
      e?: string
      /**
       * @description The unique identifier for the key.
       * @example e600c72b-125a-4b30-86a5-9697af62f2a1
       */
      kid: string
      /**
       * @description The family of cryptographic algorithms used with the key.
       * @example RSA
       */
      kty: string
      /**
       * @description The modulus for the RSA public key. The value is encoded encoded according to the Base64 standard.
       * @example eWVObHpsdWI5NFlnZXJUMDMwY29kcUV6dGpmVV9TNlg0RGJEQV9pVktrakFXdFlmUEhEenpfc1BDVDFBeHo2aXNaZGYzbEhwcV9nWVg0U3o=
       */
      n?: string
      /**
       * @description How the key was meant to be used; `sig` represents the signature, `enc` represents the encryption.
       * @example sig
       */
      use: string
      /** @description The x.509 certificate chain. The first entry in the array is the certificate to use for token verification; the other certificates can be used to verify this first certificate. */
      x5c?: string[]
      /**
       * @description The thumbprint of the x.509 cert (SHA-1 thumbprint).
       * @example NjU3NDI5ZTZhODU0YjQzMGFiYzkwNGNkZDkwNmZkMzZmOWEzNWVmMQ
       */
      x5t?: string
    }
    /** @example {
     *       "keys": [
     *         {
     *           "alg": "RS256",
     *           "e": "10001",
     *           "kid": "NjVBRjY5MDlCMUIwNzU4RTA2QzZFMDQ4QzQ2MDAyQjVDNjk1RTM2Qg",
     *           "kty": "RSA",
     *           "n": "yeNlzlub94YgerT030codqEztjfU_S6X4DbDA_iVKkjAWtYfPHDzz_sPCT1Axz6isZdf3lHpq_gYX4Sz-cbe4rjmigxUxr-FgKHQy3HeCdK6hNq9ASQvMK9LBOpXDNn7mei6RZWom4wo3CMvvsY1w8tjtfLb-yQwJPltHxShZq5-ihC9irpLI9xEBTgG12q5lGIFPhTl_7inA1PFK97LuSLnTJzW0bj096v_TMDg7pOWm_zHtF53qbVsI0e3v5nmdKXdFf9BjIARRfVrbxVxiZHjU6zL6jY5QJdh1QCmENoejj_ytspMmGW7yMRxzUqgxcAqOBpVm0b-_mW3HoBdjQ",
     *           "use": "sig"
     *         }
     *       ]
     *     } */
    jwks: {
      /** @description The value of the 'keys' parameter is an array of JWK values.  By default, the order of the JWK values within the array does not imply an order of preference among them, although applications of JWK Sets can choose to assign a meaning to the order for their purposes, if desired. */
      keys?: {
        /**
         * @description The specific cryptographic algorithm used with the key.
         * @example RS256
         */
        alg: string
        /**
         * @description The exponent for the RSA public key. The value is encoded encoded according to the Base64 standard.
         * @example AQAB
         */
        e?: string
        /**
         * @description The unique identifier for the key.
         * @example e600c72b-125a-4b30-86a5-9697af62f2a1
         */
        kid: string
        /**
         * @description The family of cryptographic algorithms used with the key.
         * @example RSA
         */
        kty: string
        /**
         * @description The modulus for the RSA public key. The value is encoded encoded according to the Base64 standard.
         * @example eWVObHpsdWI5NFlnZXJUMDMwY29kcUV6dGpmVV9TNlg0RGJEQV9pVktrakFXdFlmUEhEenpfc1BDVDFBeHo2aXNaZGYzbEhwcV9nWVg0U3o=
         */
        n?: string
        /**
         * @description How the key was meant to be used; `sig` represents the signature, `enc` represents the encryption.
         * @example sig
         */
        use: string
        /** @description The x.509 certificate chain. The first entry in the array is the certificate to use for token verification; the other certificates can be used to verify this first certificate. */
        x5c?: string[]
        /**
         * @description The thumbprint of the x.509 cert (SHA-1 thumbprint).
         * @example NjU3NDI5ZTZhODU0YjQzMGFiYzkwNGNkZDkwNmZkMzZmOWEzNWVmMQ
         */
        x5t?: string
      }[]
    }
    /** @description Cryptographic key. The parameters of the object represent key properties and its value. */
    key: {
      /** @description Specific cryptographic algorithm used with the key. */
      alg: string
      /** @description Exponent for the RSA public key. */
      e: string
      /** @description Unique key identifier. */
      kid: string
      /** @description Family of cryptographic algorithms used with the key. */
      kty: string
      /** @description Modulus for the RSA public key. */
      n: string
      /** @description How the key was meant to be used. The `sig` value represents the signature. */
      use: string
    }
    /**
     * @description Number of users that is returned when searching by attribute.
     * @default 20
     */
    limit: number
    mfa: {
      /** @description Shows whether the user can change the settings or not. */
      change_restricted: boolean
      /** @description Status of two-factor authentication settings. */
      enabled: boolean
      /**
       * @description Type of the second factor. Can be: `email` or `sms`. You must enable the specified type for the Login project. Contact your Customer Success Manager to set it up.
       *
       * @enum {string}
       */
      mfa_type: 'email' | 'sms'
    }
    oauth2Access: {
      /** @description Value for the specified `resource_name` parameter. */
      resource: string
      /**
       * @description Resource name which client grants access for.
       * @enum {string}
       */
      resource_name: 'publisher_id' | 'publisher_project_id'
    }
    oauth2Client: {
      /** @description List of client resources which access is granted to. */
      access:
        | {
            /** @description Value for the specified `resource_name` parameter. */
            resource: string
            /**
             * @description Resource name which client grants access for.
             * @enum {string}
             */
            resource_name: 'publisher_id' | 'publisher_project_id'
          }[]
        | null
      /** @description List of domains for which token can be applied */
      audience?: string[]
      /** @description The type of getting the JWT. Can be:
       *     * `authorization_code` to exchange the code received in the authentication call to the JWT. The value of the `code` parameter must be specified.
       *     * `refresh_token` to get the refreshed JWT when the previous value is expired. The value of the `refresh_token` parameter must be specified.
       *     * `client_credentials` to get the server JWT. The values of the `client_id` and `client_secret` parameters must be specified.
       *     * `password` to get the JWT by authentication via login and password directly, `is_public` must have the `true` value.
       *      */
      grant_types: ('authorization_code' | 'refresh_token' | 'client_credentials' | 'password')[] | null
      /** @description URL for icon which will be display on auth/consent screen */
      icon_url?: string
      /** @description Client ID. */
      id: number
      /**
       * @description Defines whether the client is public (`true` value) or private (`false` value). If the client is public, you do not need to pass the client’s secret key to the [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call.
       * @default false
       */
      is_public: boolean
      /** @description Lifetime of OAuth2 token in seconds. */
      lifetime?: number
      /** @description Client name. */
      name?: string | null
      /**
       * Format: uuid
       * @description Login ID which the list of clients will be found for.
       */
      project_id: string
      /** @description Merchant ID. */
      publisher_id?: number | null
      /** @description List of URIs which the Xsolla Login server can use to redirect the user after successful authentication. */
      redirect_uris: string[] | null
      /** @description Defines the response type of the Xsolla Login server. Must have the `code` value. */
      response_types?: 'code'[]
      /** @description Scope is a mechanism in OAuth 2.0 to limit an application’s access to a user’s account.
       *
       *     Can be:
       *     * `email` for [Auth via social network](https://developers.xsolla.com/api/login/operation/oauth-20-auth-via-social-network) or [Get link for social auth](https://developers.xsolla.com/api/login/operation/oauth-20-get-link-for-social-auth) calls to request an email from the user additionally.
       *     * `offline` to use `refresh_token` from [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call to refresh the JWT when it is expired.
       *     * `playfab` to write **SessionTicket** to the `session_ticket` claim of the JWT if you store user data at PlayFab.
       *
       *     If you process your own values of the `scope` parameter, that are not mentioned above, you can set them when using this call. The Xsolla Login server does not process these values, but returns them in the received JWT.
       *      */
      scopes: string[] | null
      /** @description Client secret key. */
      secret?: string | null
    }
    publicUserInfo: {
      /** @description URL of the user avatar. */
      avatar?: string
      /** @description Date of the last user login in the [RFC3339 format](https://www.ietf.org/rfc/rfc3339.txt). */
      last_login: string
      /** @description User nickname. */
      nickname?: string | null
      /** @description Date of user registration in the [RFC3339 format](https://www.ietf.org/rfc/rfc3339.txt). */
      registered: string
      /** @description User tag without "#" at the beginning. Can have no unique value and can be used in the [Search users by nickname](https://developers.xsolla.com/api/login/operation/search-users-by-nickname) call. */
      tag?: string
      /** @description The Xsolla Login user ID. You can find it in [Publisher Account](https://publisher.xsolla.com/) > your Login project > **Users** > **Username/ID**. */
      user_id: string
    }
    /** @example {
     *       "next_after": "bmFtZS0ydXNlci0y",
     *       "next_url": "https://login.xsolla.com/api/users/by_access_key/access-key-1/relationships?type=friend_requests&sort_by=by_name&limit=2&after=bmFtZS0ydXNlci0y",
     *       "relationships": [
     *         {
     *           "status_incoming": "none",
     *           "status_outgoing": "friend_requested",
     *           "updated": 1494499214.3501,
     *           "user": {
     *             "id": "user-3",
     *             "name": "name-3",
     *             "nickname": "nick-2",
     *             "picture": "",
     *             "presence": "offline",
     *             "tag": "423432"
     *           }
     *         },
     *         {
     *           "status_incoming": "none",
     *           "status_outgoing": "friend_requested",
     *           "updated": 1494499213.4718,
     *           "user": {
     *             "id": "user-2",
     *             "name": "name-2",
     *             "nickname": "nick-2",
     *             "picture": "",
     *             "presence": "offline",
     *             "tag": "3100"
     *           }
     *         }
     *       ]
     *     } */
    relationship: {
      /** @description Type of the user. Can be:
       *       * `none` if there is no action initiated for the user
       *       * `friend` if the user is in the friend list of the requested one
       *       * `friend_requested` if the friend request is sent to the user by the requested one
       *       * `blocked` if the user is blocked by the requested one
       *      */
      status_incoming: string
      /** @description Type of the requested user. Can be:
       *       * `none` if there is no action initiated for the user
       *       * `friend` if the user is in the friend list of the one with the specified JWT
       *       * `friend_requested` if the friend request is sent to the user by the one with the specified JWT
       *       * `blocked` if the user is blocked by the one with the specified JWT
       *      */
      status_outgoing: string
      /** @description Time passed since the latest action of adding a friend to the friend list or banning them in seconds. */
      updated?: number
      /** @description User details. */
      user: {
        /** @description User ID. */
        id: string
        /** @description User name in a social network. */
        name: string | null
        /** @description User nickname. */
        nickname: string | null
        /** @description Link to the user profile picture. */
        picture: string | null
        /** @description User status. Can be `online` and `offline`.
         *      */
        presence?: string
        /** @description User tag without "#" at the beginning. Can have no unique value and can be used in the [Search users by nickname](https://developers.xsolla.com/api/login/operation/search-users-by-nickname) call. */
        tag: string | null
      }
    }
    /**
     * @description Webhook information.
     * @example {
     *       "id": 2342423,
     *       "url": "https://example.com/hook/second"
     *     }
     */
    respWebhookSettings: {
      /** @description Webhook ID. */
      id: number
      /**
       * Format: uri
       * @description Valid URL to which the Xsolla Login server sends the webhook.
       */
      url: string
    }
    /** @description Request body for create restriction */
    restriction: {
      age: number
      /** @description Country code in the [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. Use `XX` to update default restrictions for all countries. */
      country_code: string
      rating_name?: string
    }
    searchUserInfo: {
      /** @description Number of the elements from which the list is generated. */
      offset: number
      /** @description Total number of users that you can get. */
      total_count: number
      /** @description List of users’ data. */
      users: {
        /** @description URL of the user avatar. */
        avatar?: string
        /** @description Whether the user initiated a search. */
        is_me: boolean
        /** @description Date of the last user login in the [RFC3339 format](https://www.ietf.org/rfc/rfc3339.txt). */
        last_login: string
        /** @description User nickname. */
        nickname: string
        /** @description Date of user registration in the [RFC3339 format](https://www.ietf.org/rfc/rfc3339.txt). */
        registered: string
        /** @description User tag without "#" at the beginning. Can have no unique value. */
        tag?: string
        /** @description The Xsolla Login user ID. You can find it in [Publisher Account](https://publisher.xsolla.com/) > your Login project > **Users** > **Username/ID**. */
        user_id: string
      }[]
    }
    /** @description List of users’ basic data. */
    searchUserInfoLite: {
      /** @description URL of the user avatar. */
      avatar: string
      /** @description User name. */
      name: string | null
      /** @description The Xsolla Login user ID. You can find it in [Publisher Account](https://publisher.xsolla.com/) > your Login project > **Users** > **Username/ID**. */
      user_id: string
    }[]
    serverAttribute: {
      /**
       * @description Definition of user’s access level to service attributes:
       *       * `client` - A user-editable attribute. The values for this type of attributes are entered by a user or specified according to the in-game logics on the client side. For example:, the name and character stats, game difficulty level, etc.
       *       * `server` - A read-only attribute. The values for this type of attributes are entered and edited on the server side of your application. We recommend that you use them for configuration of game character stats or user parameters that shouldn’t change regularly. For example, chance to get a bonus, game character key parameters, user categories, etc.
       *
       * @default client
       * @enum {string}
       */
      attr_type: 'client' | 'server'
      /**
       * @description Data type of attribute
       * @enum {string|null}
       */
      data_type?: 'string' | 'number' | 'integer' | 'boolean'
      /** @description Description of attribute from JSON Schema. */
      description?: string | null
      /** @description Format of attribute from JSON Schema. Can be `date-time`, `date`, `time`, `duration`, `email`, `uri`, `uuid` or other from JSON Schema [specification](https://json-schema.org/draft/2020-12/json-schema-validation.html#rfc.section.7.3) */
      format?: string | null
      /** @description Name of attribute that is used to identify user’s attribute. Must be unique per user. */
      key: string
      /**
       * @description Definition of user’s access level to other users’ attributes.
       * @enum {string|null}
       */
      permission?: 'public' | 'private'
      /** @description Value of user’s attribute. */
      value: string
    }
    /** @description Shipping address. */
    shippingAddress: {
      /** @description Address line 1. */
      address_line1: string
      /** @description Address line 2. */
      address_line2?: string
      /** @description Administrative district. */
      administrative_area?: string
      carrier_facility?: string
      /** @description Delivery comment. */
      comment?: string
      /** @description Receiver company. */
      company?: string
      /** @description Country. */
      country: string
      /** @description ISO coutry code. */
      country_iso?: string
      /** @description Receiver email. */
      email?: string
      /** @description Receiver first name. */
      first_name: string
      /** @description Whether the address is main. Can be `1` or `0`.
       *      */
      is_primary?: number
      /** @description Receiver last name. */
      last_name?: string
      /** @description Locality. */
      locality: string
      /** @description Contact phone number in the [national convention](https://en.wikipedia.org/wiki/National_conventions_for_writing_telephone_numbers) format. */
      phone?: string
      /** @description Number of the room. */
      room?: string
      /** @description ZIP code. */
      zip: string
    }
    socialAuthUrl: {
      /** @description Link for authentication via the social network. */
      auth_url: string
      /** @description Name of the social network. */
      provider: string
    }
    socialFriendsResponse200: {
      /** @description List of data from social friends accounts. */
      data?: {
        /** @description Friend’s avatar from a social provider. */
        avatar?: string
        /** @description Friend’s name from a social provider. */
        name: string
        /** @description Name of a social provider. */
        platform: string
        /** @description User tag without "#" at the beginning. Can have no unique value and can be used in the [Search users by nickname](https://developers.xsolla.com/api/login/operation/search-users-by-nickname) call. */
        tag?: string
        /** @description User ID from a social provider. */
        user_id: string
        /** @description The Xsolla Login user ID. You can find it in [Publisher Account](https://publisher.xsolla.com/) > your Login project > **Users** > **Username/ID**. */
        xl_uid?: string
      }[]
      /** @description Maximum number of friends that are returned at a time. */
      limit: number
      /** @description Number of the elements from which the list is generated. */
      offset: number
      /** @description Name of a social provider. */
      platform?: string
      /** @description Total number of friends that you can get. */
      total_count: number
      /** @description Shows whether the social friends are from your game. */
      with_xl_uid?: boolean
    }
    socialProvider: {
      /** @description User name in a social network. */
      full_name: string | null
      /** @description User nickname in a social network. */
      nickname: string | null
      /** @description Link to the user profile picture in a social network. */
      picture: string | null
      /** @description Name of a social network connected to Login in Publisher Account. */
      provider: string
      /** @description User ID in a social network. */
      social_id: string
    }
    /** @description Details about friends from linked social networks. */
    socialRelationship: {
      /** @description CDN link with the user avatar. */
      avatar: number
      /** @description User name. */
      name: string
      /** @description Name of the social network where the user is added to friends. */
      provider: string
      /**
       * Format: uuid
       * @description User ID.
       */
      user_id: string
    }
    /** @description Attribute is used to get users’ list. */
    targetAttribute: {
      /** @description Name of attribute that is used to identify user’s attribute. Must be unique per user. */
      key: string
      /** @description Value of user’s attribute. Needed for getting users with the `key` parameter with this value. If you do not specify it, it returns all users with any value for this key. */
      value?: string | null
    }
    /** @description Defenition of user object */
    user: {
      /** @description User ban definition */
      ban: {
        date_from: string
        date_to: string
        reason: string
      }
      email?: string
      /** @description External user ID */
      external_id: string
      /** @description User first name */
      first_name?: string
      /** @description List of groups the user belongs to */
      groups: {
        /** @description User group ID */
        id?: number
        /** @description Flag whether the group is the default group */
        is_default?: boolean
        /** @description Flag whether the group can be deleted */
        is_deletable?: boolean
        /** @description User group name */
        name?: string
      }[]
      /**
       * Format: UUID
       * @description ID of user
       */
      id: string
      /** @description ??? */
      is_anonymous?: boolean
      /** @description Whether a user comfirmed their email address. If `true`, the email address is confirmed. */
      is_last_email_confirmed: boolean
      /** @description ??? */
      is_user_active: boolean
      last_login: string
      /** @description User last name */
      last_name?: string
      /** @description User name */
      name?: string
      /** @description User nickname */
      nickname?: string
      phone_auth: Record<string, never>
      picture: Record<string, never>
      /**
       * Format: UUID
       * @description ID of project assigned with user
       */
      project_id?: string
      /** @description Date of registration */
      registered: string
      /** @description User server_custom_id */
      server_custom_id?: string
      /** @description ??? */
      username: string
    }
    /** @description Defenition of user_email object */
    userEmail: {
      email: string
      is_last_used: boolean
      is_primary: boolean
    }
    /** @description User details. */
    userInfo: {
      /** @description Details of the user ban. The value is `null` for the users not from the ban list. */
      ban: {
        /** @description Date when the user was banned in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. */
        date_from: string
        /** @description Date until the user remains banned in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. */
        date_to: string
        /** @description Reason the user ban. */
        reason?: string
      } | null
      /** @description User birth date in the `YYYY-MM-DD` format. */
      birthday: string | null
      /** @description User birth date confirmed by [okname](https://www.ok-name.co.kr/). For Korean users only. */
      connection_information: string | null
      /** @description User country. */
      country: string | null
      devices: {
        /** @description Manufacturer and model name of the device. */
        device: string
        /** @description Device ID generated by the Xsolla Login server. It **is not** the same as the `device_id` parameter from the Auth via device ID ([JWT](https://developers.xsolla.com/api/login/operation/jwt-auth-via-device-id) and [OAuth 2.0](https://developers.xsolla.com/api/login/operation/oauth-20-auth-via-device-id)) call. */
        id: number
        /** @description Date and time of the last user login via the device in the [RFC3339 format](https://www.ietf.org/rfc/rfc3339.txt). */
        last_used_at: string
        /**
         * @description Type of the device.
         * @enum {string}
         */
        type: 'android' | 'ios'
      }[]
      /** @description User email address. */
      email: string | null
      /** @description ID of the user in your game. To use the ID from your game, link the IDs by the [Link user IDs via external ID](https://developers.xsolla.com/api/login/operation/link-user-ids-via-external-id) call. */
      external_id: string | null
      /** @description User first name. */
      first_name: string | null
      /**
       * @description User gender. Can be:
       *     * `f` for female
       *     * `m` for male
       *     * `other`
       *     * `prefer not to answer`
       *
       * @enum {string|null}
       */
      gender: 'f' | 'm' | 'other' | 'prefer not to answer'
      /** @description Details about the groups the user was added to. */
      groups: {
        /** @description Group ID. */
        id: number
        /** @description Shows whether the group is default or not. */
        is_default: boolean
        /** @description Shows whether the group can be deleted or not. Default groups can’t be deleted. */
        is_deletable: boolean
        /** @description Group name. */
        name: string
      }[]
      /** @description User ID. */
      id: string
      /** @description Shows whether the user is anonymous or not. The anonymous user is a user created via device ID or custom ID and doesn’t have an alternative authentication method added (e.g., username/email and password). */
      is_anonymous: boolean
      is_last_email_confirmed: boolean | null
      is_user_active: boolean
      /** @description Date of the last user login in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. */
      last_login: string
      /** @description User last name. */
      last_name: string | null
      /** @description User name in a social network. */
      name: string | null
      /** @description User nickname. */
      nickname: string | null
      /** @description User phone number according to [national conventions](https://en.wikipedia.org/wiki/National_conventions_for_writing_telephone_numbers). This phone number is used only for passing the two-factor authentication. */
      phone: string | null
      /** @description User phone number according to [national conventions](https://en.wikipedia.org/wiki/National_conventions_for_writing_telephone_numbers). This phone number is used to authenticate the user. */
      phone_auth: string | null
      /** @description Link to the user profile picture. */
      picture: string | null
      /** @description Date of user registration in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. */
      registered: string
      /** @description User tag without "#" at the beginning. Can have no unique value and can be used in the [Search users by nickname](https://developers.xsolla.com/api/login/operation/search-users-by-nickname) call. */
      tag: string | null
      /** @description Username. */
      username: string | null
    }
    /** @description User details. */
    userResponseItem: {
      /** @description User birth date in the `YYYY-MM-DD` format. */
      birthday: string | null
      /** @description User email address. */
      email: string | null
      /** @description ID of the user in your game. To use the ID from your game, link the IDs by the [Link user IDs via external ID](https://developers.xsolla.com/api/login/operation/link-user-ids-via-external-id) call. */
      external_id: string | null
      /** @description User first name. */
      first_name: string | null
      /**
       * @description User gender. Can be:
       *     * `f` for female
       *     * `m` for male
       *     * `other`
       *     * `prefer not to answer`
       *
       * @enum {string|null}
       */
      gender: 'f' | 'm' | 'other' | 'prefer not to answer'
      /** @description User ID. */
      id: string
      /** @description Shows whether the user is anonymous or not. The anonymous user is a user created via device ID or custom ID and doesn’t have an alternative authentication method added (e.g., username/email and password). */
      is_anonymous?: boolean
      /** @description Date of the last user login in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. */
      last_login: string
      /** @description User last name. */
      last_name: string | null
      /** @description User nickname. */
      nickname: string | null
      /** @description User phone number according to [national conventions](https://en.wikipedia.org/wiki/National_conventions_for_writing_telephone_numbers). This phone number is used only for passing the two-factor authentication. Returned only if the `phone` field is specified. */
      phone?: string | null
      /** @description User phone number according to [national conventions](https://en.wikipedia.org/wiki/National_conventions_for_writing_telephone_numbers). This phone number is used to authenticate the user. Returned only if the `phone_auth` field is specified. */
      phone_auth?: string | null
      /** @description Link to the user profile picture. */
      picture: string | null
      /** @description Date of user registration in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. */
      registered: string
      /** @description User tag without "#" at the beginning. Can have no unique value and can be used in the [Search users by nickname](https://developers.xsolla.com/api/login/operation/search-users-by-nickname) call. */
      tag: string | null
      /** @description User username. */
      username: string | null
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  'get-users-by-attribute-from-server': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description Update date of user’s attribute and ID of the latest attribute in the `keys` list. Do not set it at the first time.
           *     When you get users by attribute, they are sorted by their update date. If several attributes have the same update date, they are sorted by attribute ID.
           *     It is used for API pagination.
           *      */
          after?: string | null
          /**
           * @description Definition of user’s access level to service attributes.
           * @default client
           * @enum {string}
           */
          attr_type: 'client' | 'server'
          attribute: components['schemas']['targetAttribute']
          /** @description List of attributes’ keys which you want to get. If you do not specify them, the method returns all user’s attributes. */
          keys?: string[]
          limit?: components['schemas']['limit']
          /** @description Login ID from Publisher Account which you want to get user’s attributes for. If you do specify it, it is use instead your merchant ID and project ID from Publisher Account. */
          login_project_id?: string
          /** @description Your merchant ID the request is made for. Needed for request authorizing. */
          publisher_id?: number | null
          /** @description Project ID from Publisher Account which you want to get users for. If you do not specify it, it returns users without the value of this parameter. */
          publisher_project_id?: number
          /**
           * @description Сomparison condition that defines search criteria.
           * @default equal
           * @enum {string}
           */
          search_type: 'equal' | 'like'
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          /** @description Date and ID of the latest attribute in the `keys` list that are used for API pagination. You should set this value to the `after` parameter to get the next part of users. */
          'X-XL-AFTER'?: string
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description List of attributes of the specified user. */
            attributes?: components['schemas']['getServerAttribute'][]
            /** @description User's email. */
            email?: string
            /** @description User ID. You can find it in **Publisher Account** > Login settings > **Users** > **Username/ID**. */
            user_id?: string
          }[]
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Unprocessable Entity */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error']
          AccessDenied: unknown
          InvalidToken: unknown
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error']
        }
      }
    }
  }
  'get-users-attributes-from-client': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': {
          /** @description List of attributes’ keys which you want to get. If you do not specify them, the method returns all user’s attributes. */
          keys?: string[]
          /** @description Project ID you want to get attributes for from Publisher Account. If you do not specify it, the method returns attributes without the value of this parameter. */
          publisher_project_id?: number
          /**
           * Format: uuid
           * @description User ID which attributes you want to get. The request returns only attributes with the public value of the `permission` parameter. If you do not specify it or put the user ID of the current user there, the request returns only attributes with any value for the permission parameter.
           */
          user_id?: string | null
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['getAttribute'][]
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Unprocessable Entity */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error']
          AccessDenied: unknown
          InvalidToken: unknown
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error']
        }
      }
    }
  }
  'get-users-read-only-attributes-from-client': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': {
          /** @description List of attributes’ keys which you want to get. If you do not specify them, the method returns all user’s attributes. */
          keys?: string[]
          /** @description Project ID you want to get attributes for from Publisher Account. If you do not specify it, the method returns attributes without the value of this parameter. */
          publisher_project_id?: number
          /**
           * Format: uuid
           * @description User ID which attributes you want to get. The request returns only attributes with the public value of the `permission` parameter. If you do not specify it or put the user ID of the current user there, the request returns only attributes with any value for the permission parameter.
           */
          user_id?: string | null
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['getAttribute'][]
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Unprocessable Entity */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error']
          AccessDenied: unknown
          InvalidToken: unknown
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error']
        }
      }
    }
  }
  'update-users-attributes-from-client': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description List of attributes of the specified game.
           *     To add attribute which does not exist, set this attribute to the `key` parameter.
           *     To update `value` of the attribute, specify its `key` parameter and set the new `value`. You can change several attributes at a time.
           *      */
          attributes?: components['schemas']['attribute'][]
          /** @description Project ID from Publisher Account which you want to update the value of specified attributes for. If you do not specify it, the method updates attributes that are general to all games only. */
          publisher_project_id?: number
          /** @description List of attributes which you want to delete. If you specify the same attribute in `attributes` parameter, it will not be deleted. */
          removing_keys?: string[]
        }
      }
    }
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Unprocessable Entity */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error']
          AccessDenied: unknown
          InvalidToken: unknown
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error']
          AttributesAreDuplicated: unknown
          OperationUnavailableInReadOnlyMode: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error']
        }
      }
    }
  }
  'get-users-attributes-from-server': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description User ID. You can find it in **Publisher Account** > Login settings > **Users** > **Username/ID**. */
        user_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description List of attributes’ keys which you want to get. If you do not specify them, the method returns all user’s attributes. */
          keys?: string[]
          /** @description Your merchant ID the request is made for. Need for request authorizing. */
          publisher_id: number | null
          /** @description Project ID from Publisher Account which you want to get user’s attributes for. If you do not specify it, it returns attributes for all games with them. */
          publisher_project_id?: number
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['getServerAttribute'][]
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Unprocessable Entity */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error']
          AccessDenied: unknown
          InvalidToken: unknown
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error']
          AttributesAreDuplicated: unknown
          OperationUnavailableInReadOnlyMode: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error']
        }
      }
    }
  }
  'get-users-read-only-attributes-from-server': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description User ID. You can find it in **Publisher Account** > Login settings > **Users** > **Username/ID**. */
        user_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description List of attributes’ keys which you want to get. If you do not specify them, the method returns all user’s attributes. */
          keys?: string[]
          /** @description Your merchant ID the request is made for. Need for request authorizing. */
          publisher_id: number | null
          /** @description Project ID from Publisher Account which you want to get user’s attributes for. If you do not specify it, it returns attributes for all games with them. */
          publisher_project_id?: number
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['getAttribute'][]
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Unprocessable Entity */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error']
          AccessDenied: unknown
          InvalidToken: unknown
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error']
          AttributesAreDuplicated: unknown
          OperationUnavailableInReadOnlyMode: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error']
        }
      }
    }
  }
  'update-users-attributes-from-server': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description User ID. You can find it in **Publisher Account** > Login settings > **Users** > **Username/ID**. */
        user_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description List of attributes of the specified game.
           *     To add attribute which does not exist, set this attribute to the `key` parameter.
           *     To update `value` of the attribute, specify its `key` parameter and set new `value`. You can change several attributes at a time.
           *      */
          attributes?: components['schemas']['serverAttribute'][]
          /** @description Your merchant ID the request is made for. Needed for request authorizing. */
          publisher_id: number | null
          /** @description Project ID from Publisher Account which you want to update the value of specified attributes for. If you do not specify it, the method updates attributes that are general to all games only. */
          publisher_project_id?: number
          /** @description List of attributes which you want to delete. If you specify the same attribute in `attributes` parameter, it will not be deleted. */
          removing_keys?: string[]
        }
      }
    }
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Unprocessable Entity */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error']
          AccessDenied: unknown
          InvalidToken: unknown
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error']
          AttributesAreDuplicated: unknown
          OperationUnavailableInReadOnlyMode: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error']
        }
      }
    }
  }
  'update-users-read-only-attributes-from-server': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description User ID. You can find it in **Publisher Account** > Login settings > **Users** > **Username/ID**. */
        user_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description List of attributes of the specified game.
           *     To add attribute which does not exist, set this attribute to the `key` parameter.
           *     To update `value` of the attribute, specify its `key` parameter and set new `value`. You can change several attributes at a time.
           *      */
          attributes?: components['schemas']['attribute'][]
          /** @description Your merchant ID the request is made for. Need for request authorizing. */
          publisher_id: number | null
          /** @description Project ID from Publisher Account which you want to update the value of specified attributes for. If you do not specify it, the method updates attributes that are general to all games only. */
          publisher_project_id?: number
          /** @description List of attributes which you want to delete. If you specify the same attribute in `attributes` parameter, it will not be deleted. */
          removing_keys?: string[]
        }
      }
    }
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Unprocessable Entity */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error']
          AccessDenied: unknown
          InvalidToken: unknown
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error']
          AttributesAreDuplicated: unknown
          OperationUnavailableInReadOnlyMode: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error']
        }
      }
    }
  }
  'get-items-checklist': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['item'][]
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AccessDenied: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'auth-by-username-and-password': {
    parameters: {
      query: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        projectId: string
        /** @description URL to redirect the user to after account confirmation, successful authentication, two-factor authentication configuration, or password reset confirmation. Must be identical to the **Callback URL** specified in the **URL** block of [Publisher Account](https://publisher.xsolla.com/). To find it, go to **Login > your Login project** and select the **Callback URLs** section in the upper block of the navigation page. **Required** if there are several Callback URLs. */
        login_url?: string
        /** @description Your custom data. The value of the parameter will be returned in the `payload` claim of the **user JWT**. */
        payload?: string
        /** @description Shows whether to deactivate the existing user JWT values and activate the one generated by this call. Can have the following values:
         *     * `1` to deactivate the existing values and activate a new one,
         *     * `0` to keep the existing values activated.
         *      */
        with_logout?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description User password. */
          password: string
          /** @description Whether the user agrees to save the authentication data. Default is `false`. */
          remember_me?: boolean
          /** @description Username or email address. */
          username: string
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description URL with the `token` and `remember_me` parameters to redirect the user to after successful authentication. The `token` value is the user JWT. */
            login_url: string
          }
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          WrongUsernameOrPassword: unknown
        }
      }
      /** @description Unauthorized */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          OAuthSocialRequestFailed: unknown
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          UnavailableProjectMethod: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'jwt-auth-via-device-id': {
    parameters: {
      query: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        projectId: string
        /** @description Your custom data. The value of the parameter will be returned in the `payload` claim of the **user JWT**. */
        payload?: string
        /** @description Shows whether to deactivate the existing user JWT values and activate the one generated by this call. Can have the following values:
         *     * `1` to deactivate the existing values and activate a new one,
         *     * `0` to keep the existing values activated.
         *      */
        with_logout?: string
      }
      header?: never
      path: {
        /** @description Type of the device. */
        device_type: 'android' | 'ios'
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description Manufacturer and model name of the device. */
          device: string
          /** @description Device ID:
           *     * For Android, it is an [ANDROID_ID](https://developer.android.com/reference/android/provider/Settings.Secure#ANDROID_ID) constant.
           *     * For iOS, it is an [identifierForVendor](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor?language=objc) property.
           *      */
          device_id: string
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Xsolla Login user JWT. */
            token: string
          }
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          UnableToAuthorizeBannedUser: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          ProjectNotFound: unknown
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          DependencyService: unknown
          InvalidParam: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'jwt-complete-auth-by-email': {
    parameters: {
      query: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        projectId: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description Confirmation code. */
          code: string
          /** @description User email address. */
          email: string
          /** @description ID of the confirmation code. You can find its value in the response to a previous request. */
          operation_id: string
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description URL with the `token` and `remember_me` parameters to redirect the user to after successful authentication. The `token` parameter has the user JWT format. */
            login_url: string
          }
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          UnableToAuthorizeBannedUser: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AttemptsToSendAuthCodeHaveBeenSpent: unknown
          ExternalAccountIDIsNotReturnedForLoginWithCustomStorage: unknown
          WrongAuthorizationCode: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'jwt-start-auth-by-email': {
    parameters: {
      query: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        projectId: string
        /** @description URL to redirect the user to after account confirmation, successful authentication, two-factor authentication configuration, or password reset confirmation. Must be identical to the **Callback URL** specified in the **URL** block of [Publisher Account](https://publisher.xsolla.com/). To find it, go to **Login > your Login project** and select the **Callback URLs** section in the upper block of the navigation page. **Required** if there are several Callback URLs. */
        login_url?: string
        /** @description Your custom data. The value of the parameter will be returned in the `payload` claim of the **user JWT**. */
        payload?: string
        /** @description Shows whether to deactivate the existing user JWT values and activate the one generated by this call. Can have the following values:
         *     * `1` to deactivate the existing values and activate a new one,
         *     * `0` to keep the existing values activated.
         *      */
        with_logout?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description User email address. */
          email: string
          /**
           * Format: uri
           * @description URL to redirect the user to the status authentication page. **Required** if the parameter `send_link` is `true`.
           */
          link_url?: string
          /** @description Shows whether a link is sent with the confirmation code in the email or not.
           *
           *     The link can be used instead of the confirmation code to log in.
           *
           *     If the parameter has the `true` value, the link is sent in the email.
           *      */
          send_link?: boolean
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description ID of the confirmation code. */
            operation_id: string
          }
        }
      }
      /** @description bad request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          MisconfiguredProject: unknown
          PasswordlessEmailAuthenticationIsDisabledForLogin: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'jwt-complete-auth-by-phone-number': {
    parameters: {
      query: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        projectId: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description Confirmation code. */
          code: string
          /** @description ID of the confirmation code. */
          operation_id: string
          /** @description User phone number. */
          phone_number: string
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description URL with the `token` and `remember_me` parameters to redirect the user to after successful authentication. The `token` parameter has the user JWT format. */
            login_url: string
          }
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          UnableToAuthorizeBannedUser: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AttemptsToSendAuthCodeHaveBeenSpent: unknown
          ExternalAccountIDIsNotReturnedForLoginWithCustomStorage: unknown
          WrongAuthorizationCode: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'jwt-start-auth-by-phone-number': {
    parameters: {
      query: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        projectId: string
        /** @description URL to redirect the user to after account confirmation, successful authentication, two-factor authentication configuration, or password reset confirmation. Must be identical to the **Callback URL** specified in the **URL** block of [Publisher Account](https://publisher.xsolla.com/). To find it, go to **Login > your Login project** and select the **Callback URLs** section in the upper block of the navigation page. **Required** if there are several Callback URLs. */
        login_url?: string
        /** @description Your custom data. The value of the parameter will be returned in the `payload` claim of the **user JWT**. */
        payload?: string
        /** @description Shows whether to deactivate the existing user JWT values and activate the one generated by this call. Can have the following values:
         *     * `1` to deactivate the existing values and activate a new one,
         *     * `0` to keep the existing values activated.
         *      */
        with_logout?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /**
           * Format: uri
           * @description URL to redirect the user to the status authentication page. **Required** if the parameter `send_link` is `true`.
           */
          link_url?: string
          /** @description User phone number. */
          phone_number: string
          /** @description Shows whether a link is sent with the confirmation code in the SMS or not.
           *
           *     The link can be used instead of the confirmation code to log in.
           *
           *     If the parameter has the `true` value, the link is sent in the SMS.
           *      */
          send_link?: boolean
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description ID of the confirmation code. */
            operation_id: string
          }
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          MisconfiguredProject: unknown
          PasswordlessPhoneAuthenticationIsDisabledForLogin: unknown
          RateLimitPhoneAuthorization: unknown
          UserWithSpecifiedPhoneAlreadyExists: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'oauth2-authorize': {
    parameters: {
      query: {
        /** @description Will be set to code, indicating that the application expects to receive an authorization code if successful. */
        response_type: 'code'
        /** @description Your application ID. Get it after [creating an OAuth 2.0 client](https://developers.xsolla.com/doc/login/features/connecting-oauth2/). */
        client_id: number
        /** @description This URL must match one of the URLs the developer registered when creating the application, and the authorization server should reject the request if it does not match. To set up this parameter, contact your Customer Success Manager. */
        redirect_uri: string
        /** @description The request may have one or more scope values indicating additional access requested by the application. The authorization server will need to display the requested scopes to the user. */
        scope: string
        /** @description The state parameter is used by the application to store request-specific data and/or prevent CSRF attacks. The authorization server must return the unmodified state value back to the application. This is the recommended parameter. */
        state: string
        /** @description The audience parameter may contain multiple strings separated by a url-encoded space (+ or %20). The audience values themselves must also be url encoded. */
        audience: string
        /** @description If true is passed method will redirect to widget at first and then to partner's callback. If false, method will redirect straight to partner's callback. */
        popup?: boolean
        /** @description Generated challenge from the `code_verifier` (https://datatracker.ietf.org/doc/html/rfc7636#section-4-2). */
        code_challenge?: string
        /** @description Method used to generate the challenge. For now, you can only use the method `S256` to generate `code_challenge`. */
        code_challenge_method?: 'S256'
        /** @description Service parameter for pop up flow. Does not affect API behaviour. */
        widget_only?: boolean
        /** @description Service parameter for pop up flow. Does not affect API behaviour. */
        enable_post_message_login?: boolean
        /** @description Service parameter for pop up flow. Does not affect API behaviour. */
        disable_socials?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Redirection */
      302: {
        headers: {
          /** @description URL generated from the `redirect_uri` with `code` parameter. The `code` parameter is the user authentication code which must be exchanged to a JWT. If the request contained a `state` parameter, the URL will also include the exact value from the request. */
          Location?: string
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidClient: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description I’m a teapot */
      418: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          MisconfiguredProject: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'clear-sso-cookie': {
    parameters: {
      query: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        projectId: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'oauth2-save-consent': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          approval?: boolean
          /** @description Your application ID. */
          client_id: string
          /** @description This URL must match one of the URLs the developer registered when creating the application, and the authorization server should reject the request if it does not match. To set up this parameter, contact your Customer Success Manager. */
          redirect_uri: string
          /** @description The request may have one or more scope values indicating additional access requested by the application. The authorization server will need to display the requested scopes to the user. If there is more than one scope value, then they are separated by a space. */
          scope?: string
          /** @description The state parameter is used by the application to store request-specific data and/or prevent CSRF attacks. The authorization server must return the unmodified state value back to the application. This is the recommended parameter. */
          state: string
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Redirection */
      302: {
        headers: {
          /** @description URL generated from the `redirect_uri`. If the request contained a `state` parameter, the URL will also include the exact value from the request. */
          Location?: string
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          SocialNetworkIsDisabled: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'oauth2-check-consent': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': {
          /** @description Your application ID. */
          client_id: string
          /** @description The request may have one or more scope values indicating additional access requested by the application. The authorization server will need to display the requested scopes to the user. If there is more than one scope value, then they are separated by a space. */
          scope: string
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            approval: boolean
            refused_scopes?: string[] | null
          }
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          LoginURLIsNotConfiguredForThisProject: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'oauth-20-auth-by-username-and-password': {
    parameters: {
      query: {
        /** @description Grant type used in your project that has the enabled OAuth 2.0 protocol. Must be `code` to get the user authentication code in the response. The received code must be exchanged to a JWT via the [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call to finish user authentication. */
        response_type: string
        /** @description Your application ID. Get it after [creating an OAuth 2.0 client](https://developers.xsolla.com/doc/login/features/connecting-oauth2/). */
        client_id: number
        /** @description Identification parameter of the application the token was issued for. Parameter value will be passed in the `aud` JWT field.
         *      */
        audience?: string
        /** @description Scope is a mechanism in OAuth 2.0 to limit an application’s access to a user’s account.
         *
         *     Can be:
         *     * `email` for [Auth via social network](https://developers.xsolla.com/api/login/operation/oauth-20-auth-via-social-network) or [Get link for social auth](https://developers.xsolla.com/api/login/operation/oauth-20-get-link-for-social-auth) calls to request an email from the user additionally.
         *     * `offline` to use `refresh_token` from [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call to refresh the JWT when it is expired.
         *     * `playfab` to write **SessionTicket** to the `session_ticket` claim of the JWT if you store user data at PlayFab.
         *
         *     If you process your own values of the `scope` parameter, that are not mentioned above, you can set them when using this call. The Xsolla Login server does not process these values, but returns them in the received JWT.
         *      */
        scope?: string
        /** @description Value used for additional user verification. Often used to mitigate [CSRF Attacks](https://en.wikipedia.org/wiki/Cross-site_request_forgery). The value will be returned in the response. Must be longer than 8 symbols. */
        state: string
        /** @description URL to redirect the user to after account confirmation, successful authentication, or password reset confirmation. To set up this parameter, contact your Customer Success Manager or email to [csm@xsolla.com](mailto:csm@xsolla.com).
         *     <div class="notice"><strong>Notice</strong><br> The parameter is required if you have more than one redirect URI in your project settings.</div>
         *      */
        redirect_uri?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description User password. */
          password: string
          /** @description Username or email address. */
          username: string
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description URL generated from the `redirect_uri` with additional parameters. The `code` parameter is the user authentication code which must be exchanged to a JWT. */
            login_url: string
          }
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidClient: unknown
          InvalidOAuth20State: unknown
          InvalidRequest: unknown
          InvalidScope: unknown
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          WrongUsernameOrPassword: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          CaptchaRequired: unknown
          LoginAuthenticationNotAllowed: unknown
          UnavailableProjectMethod: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'oauth-20-auth-via-device-id': {
    parameters: {
      query: {
        /** @description Your application ID. Get it after [creating an OAuth 2.0 client](https://developers.xsolla.com/doc/login/features/connecting-oauth2/). */
        client_id: number
        /** @description Grant type used in your project that has the enabled OAuth 2.0 protocol. Must be `code` to get the user authentication code in the response. The received code must be exchanged to a JWT via the [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call to finish user authentication. */
        response_type: string
        /** @description URL to redirect the user to after account confirmation, successful authentication, or password reset confirmation. To set up this parameter, contact your Customer Success Manager or email to [csm@xsolla.com](mailto:csm@xsolla.com).
         *     <div class="notice"><strong>Notice</strong><br> The parameter is required if you have more than one redirect URI in your project settings.</div>
         *      */
        redirect_uri?: string
        /** @description Value used for additional user verification. Often used to mitigate [CSRF Attacks](https://en.wikipedia.org/wiki/Cross-site_request_forgery). The value will be returned in the response. Must be longer than 8 symbols. */
        state: string
        /** @description Scope is a mechanism in OAuth 2.0 to limit an application’s access to a user’s account.
         *
         *     Can be:
         *     * `email` for [Auth via social network](https://developers.xsolla.com/api/login/operation/oauth-20-auth-via-social-network) or [Get link for social auth](https://developers.xsolla.com/api/login/operation/oauth-20-get-link-for-social-auth) calls to request an email from the user additionally.
         *     * `offline` to use `refresh_token` from [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call to refresh the JWT when it is expired.
         *     * `playfab` to write **SessionTicket** to the `session_ticket` claim of the JWT if you store user data at PlayFab.
         *
         *     If you process your own values of the `scope` parameter, that are not mentioned above, you can set them when using this call. The Xsolla Login server does not process these values, but returns them in the received JWT.
         *      */
        scope?: string
      }
      header?: never
      path: {
        /** @description Type of the device. */
        device_type: 'android' | 'ios'
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description Manufacturer and model name of the device. */
          device: string
          /** @description Device ID:
           *     * For Android, it is an [ANDROID_ID](https://developer.android.com/reference/android/provider/Settings.Secure#ANDROID_ID) constant.
           *     * For iOS, it is an [identifierForVendor](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor?language=objc) property.
           *      */
          device_id: string
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description URL generated from the `redirect_uri` with additional parameters. The `code` parameter is the user authentication code which must be exchanged to a JWT. */
            login_url: string
          }
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidClient: unknown
          InvalidOAuth20State: unknown
          InvalidRequest: unknown
          InvalidScope: unknown
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          UnableToAuthorizeBannedUser: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          ProjectNotFound: unknown
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          DependencyService: unknown
          InvalidParam: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'oauth-20-complete-auth-by-email': {
    parameters: {
      query: {
        /** @description Your application ID. Get it after [creating an OAuth 2.0 client](https://developers.xsolla.com/doc/login/features/connecting-oauth2/). */
        client_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description Confirmation code. */
          code: string
          /** @description User email address. */
          email: string
          /** @description ID of the confirmation code. You can find its value in the response to a previous request. */
          operation_id: string
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description URL generated from the `redirect_uri` with additional parameters. The `code` parameter is the user authentication code which must be exchanged to a JWT. */
            login_url: string
          }
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          UnableToAuthorizeBannedUser: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AttemptsToSendAuthCodeHaveBeenSpent: unknown
          ExternalAccountIDIsNotReturnedForLoginWithCustomStorage: unknown
          WrongAuthorizationCode: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'oauth-20-start-auth-by-email': {
    parameters: {
      query: {
        /** @description Grant type used in your project that has the enabled OAuth 2.0 protocol. Must be `code` to get the user authentication code in the response. The received code must be exchanged to a JWT via the [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call to finish user authentication. */
        response_type: string
        /** @description Your application ID. Get it after [creating an OAuth 2.0 client](https://developers.xsolla.com/doc/login/features/connecting-oauth2/). */
        client_id: number
        /** @description Scope is a mechanism in OAuth 2.0 to limit an application’s access to a user’s account.
         *
         *     Can be:
         *     * `offline` to use `refresh_token` from the [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call to refresh the JWT when it is expired.
         *     * `playfab` to write **SessionTicket** to the `session_ticket` claim of the JWT if you store user data at PlayFab.
         *
         *     If you process your own values of the `scope` parameter, that are not mentioned above, you can set them when using this call. The Xsolla Login server does not process these values, but returns them in the received JWT.
         *      */
        scope?: string
        /** @description Value used for additional user verification. Often used to mitigate [CSRF Attacks](https://en.wikipedia.org/wiki/Cross-site_request_forgery). The value will be returned in the response. Must be longer than 8 symbols. */
        state: string
        /** @description URL to redirect the user to after account confirmation, successful authentication, or password reset confirmation. To set up this parameter, contact your Customer Success Manager or email to [csm@xsolla.com](mailto:csm@xsolla.com).
         *     <div class="notice"><strong>Notice</strong><br> The parameter is required if you have more than one redirect URI in your project settings.</div>
         *      */
        redirect_uri?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description User email address. */
          email: string
          /**
           * Format: uri
           * @description URL to redirect the user to the status authentication page. **Required** if the parameter `send_link` is `true`.
           */
          link_url?: string
          /** @description Shows whether a link is sent with the confirmation code in the email or not.
           *
           *     The link can be used instead of the confirmation code to log in.
           *
           *     If the parameter has the `true` value, the link is sent in the email.
           *      */
          send_link?: boolean
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description ID of the confirmation code. */
            operation_id: string
          }
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          MisconfiguredProject: unknown
          PasswordlessEmailAuthenticationIsDisabledForLogin: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'oauth-20-complete-auth-by-phone-number': {
    parameters: {
      query: {
        /** @description Your application ID. Get it after [creating an OAuth 2.0 client](https://developers.xsolla.com/doc/login/features/connecting-oauth2/). */
        client_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description Confirmation code. */
          code: string
          /** @description ID of the confirmation code. */
          operation_id: string
          /** @description User phone number. */
          phone_number: string
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description URL generated from the `redirect_uri` with additional parameters. The `code` parameter is the user authentication code which must be exchanged to a JWT. */
            login_url: string
          }
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          UnableToAuthorizeBannedUser: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AttemptsToSendAuthCodeHaveBeenSpent: unknown
          ExternalAccountIDIsNotReturnedForLoginWithCustomStorage: unknown
          WrongAuthorizationCode: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'oauth-20-start-auth-by-phone-number': {
    parameters: {
      query: {
        /** @description Grant type used in your project that has the enabled OAuth 2.0 protocol. Must be `code` to get the user authentication code in the response. The received code must be exchanged to a JWT via the [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call to finish user authentication. */
        response_type: string
        /** @description Your application ID. Get it after [creating an OAuth 2.0 client](https://developers.xsolla.com/doc/login/features/connecting-oauth2/). */
        client_id: number
        /** @description Scope is a mechanism in OAuth 2.0 to limit an application’s access to a user’s account.
         *
         *     Can be:
         *     * `offline` to use `refresh_token` from the [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call to refresh the JWT when it is expired.
         *     * `playfab` to write **SessionTicket** to the `session_ticket` claim of the JWT if you store user data at PlayFab.
         *
         *     If you process your own values of the `scope` parameter, that are not mentioned above, you can set them when using this call. The Xsolla Login server does not process these values, but returns them in the received JWT.
         *      */
        scope?: string
        /** @description Value used for additional user verification. Often used to mitigate [CSRF Attacks](https://en.wikipedia.org/wiki/Cross-site_request_forgery). The value will be returned in the response. Must be longer than 8 symbols. */
        state: string
        /** @description URL to redirect the user to after account confirmation, successful authentication, or password reset confirmation. To set up this parameter, contact your Customer Success Manager or email to [csm@xsolla.com](mailto:csm@xsolla.com).
         *     <div class="notice"><strong>Notice</strong><br> The parameter is required if you have more than one redirect URI in your project settings.</div>
         *      */
        redirect_uri?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /**
           * Format: uri
           * @description URL to redirect the user to the status authentication page. **Required** if the parameter `send_link` is `true`.
           */
          link_url?: string
          /** @description User phone number. */
          phone_number: string
          /** @description Shows whether a link is sent with the confirmation code in the SMS or not.
           *
           *     The link can be used instead of the confirmation code to log in.
           *
           *     If the parameter has the `true` value, the link is sent in the SMS.
           *      */
          send_link?: boolean
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description ID of the confirmation code. */
            operation_id: string
          }
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          MisconfiguredProject: unknown
          PasswordlessPhoneAuthenticationIsDisabledForLogin: unknown
          RateLimitPhoneAuthorization: unknown
          UserWithSpecifiedPhoneAlreadyExists: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'jwt-auth-by-username-and-password': {
    parameters: {
      query: {
        /** @description Your application ID. Get it after [creating an OAuth 2.0 client](https://developers.xsolla.com/doc/login/features/connecting-oauth2/). */
        client_id: number
        /** @description Scope is a mechanism in OAuth 2.0 to limit an application’s access to a user’s account.
         *
         *     Can be:
         *     * `email` for [Auth via social network](https://developers.xsolla.com/api/login/operation/oauth-20-auth-via-social-network) or [Get link for social auth](https://developers.xsolla.com/api/login/operation/oauth-20-get-link-for-social-auth) calls to request an email from the user additionally.
         *     * `offline` to use `refresh_token` from [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call to refresh the JWT when it is expired.
         *     * `playfab` to write **SessionTicket** to the `session_ticket` claim of the JWT if you store user data at PlayFab.
         *
         *     If you process your own values of the `scope` parameter, that are not mentioned above, you can set them when using this call. The Xsolla Login server does not process these values, but returns them in the received JWT.
         *      */
        scope?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description User password. */
          password: string
          /** @description Username or email address. */
          username: string
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description User JWT. */
            access_token: string
            /** @description JWT expiration period in seconds. Default value is 3600 seconds. */
            expire_in?: number
            /** @description Refresh token for updating the `access_token`. */
            refresh_token?: string
            /** @description JWT type with `bearer` value. */
            token_type: string
          }
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidGrant: unknown
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          WrongUsernameOrPassword: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          MisconfiguredProject: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'log-user-out': {
    parameters: {
      query: {
        /** @description Shows how the user is logged out and how the user session is deleted. The parameter has the following values:
         *     * `sso` is used for deleting only the SSO user session.
         *     * `all` is used for deleting the SSO user session and invalidating all access and refresh tokens.
         *      */
        sessions: 'sso' | 'all'
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidToken: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'oauth-20-silent-authentication': {
    parameters: {
      query: {
        /** @description Your application ID. Get it after [creating an OAuth 2.0 client](https://developers.xsolla.com/doc/login/features/connecting-oauth2/). */
        client_id: number
        /** @description Grant type used in your project that has the enabled OAuth 2.0 protocol. Must be `code` to get the user authentication code in the response. The received code must be exchanged to a JWT via the [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call to finish user authentication. */
        response_type: string
        /** @description URL to redirect the user to after account confirmation, successful authentication, or password reset confirmation. To set up this parameter, contact your Customer Success Manager or email to [csm@xsolla.com](mailto:csm@xsolla.com).
         *     <div class="notice"><strong>Notice</strong><br> The parameter is required if you have more than one redirect URI in your project settings.</div>
         *      */
        redirect_uri?: string
        /** @description Value used for additional user verification. Often used to mitigate [CSRF Attacks](https://en.wikipedia.org/wiki/Cross-site_request_forgery). The value will be returned in the response. Must be longer than 8 symbols. */
        state: string
        /** @description Your app ID in the platform. */
        app_id?: string
        /** @description Scope is a mechanism in OAuth 2.0 to limit an application’s access to a user’s account.
         *
         *     Can be:
         *     * `email` for [Auth via social network](https://developers.xsolla.com/api/login/operation/oauth-20-auth-via-social-network) or [Get link for social auth](https://developers.xsolla.com/api/login/operation/oauth-20-get-link-for-social-auth) calls to request an email from the user additionally.
         *     * `offline` to use `refresh_token` from [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call to refresh the JWT when it is expired.
         *     * `playfab` to write **SessionTicket** to the `session_ticket` claim of the JWT if you store user data at PlayFab.
         *
         *     If you process your own values of the `scope` parameter, that are not mentioned above, you can set them when using this call. The Xsolla Login server does not process these values, but returns them in the received JWT.
         *      */
        scope?: string
        /** @description Identification parameter of the application the token was issued for. Parameter value will be passed in the `aud` JWT field.
         *      */
        audience?: string
        /** @description Session ticket received from the platform. */
        session_ticket?: string
        /** @description Code received from the platform. */
        code?: string
        /** @description Shows how the Xsolla Login server should respond. If you set:
         *     * `true` value, the Xsolla Login server returns the 302 response code. URL for user redirection with user JWT will be in the `Location` header.
         *     * `false` value, the Xsolla Login server returns the 200 response code. URL for user redirection with user JWT will be in the response body.
         *      */
        is_redirect?: boolean
      }
      header?: never
      path: {
        /** @description Name of the platform the user authorized in. Can be `steam`, `xbox`, `epicgames`.
         *      */
        oauth2_cross_social_provider_name: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description URL with the `token` parameter to redirect the user to your project. */
            login_url: string
          }
        }
      }
      /** @description Redirection */
      302: {
        headers: {
          /** @description URL generated from the `redirect_uri` with additional parameters. The `code` parameter is the user authentication code which must be exchanged to a JWT. */
          Location?: string
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'oauth-20-auth-via-social-network': {
    parameters: {
      query: {
        /** @description URL to redirect the user to after account confirmation, successful authentication, or password reset confirmation. To set up this parameter, contact your Customer Success Manager or email to [csm@xsolla.com](mailto:csm@xsolla.com).
         *     <div class="notice"><strong>Notice</strong><br> The parameter is required if you have more than one redirect URI in your project settings.</div>
         *      */
        redirect_uri?: string
        /** @description Your application ID. Get it after [creating an OAuth 2.0 client](https://developers.xsolla.com/doc/login/features/connecting-oauth2/). */
        client_id: number
        /** @description Scope is a mechanism in OAuth 2.0 to limit an application’s access to a user’s account.
         *
         *     Can be:
         *     * `email` for [Auth via social network](https://developers.xsolla.com/api/login/operation/oauth-20-auth-via-social-network) or [Get link for social auth](https://developers.xsolla.com/api/login/operation/oauth-20-get-link-for-social-auth) calls to request an email from the user additionally.
         *     * `offline` to use `refresh_token` from [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call to refresh the JWT when it is expired.
         *     * `playfab` to write **SessionTicket** to the `session_ticket` claim of the JWT if you store user data at PlayFab.
         *
         *     If you process your own values of the `scope` parameter, that are not mentioned above, you can set them when using this call. The Xsolla Login server does not process these values, but returns them in the received JWT.
         *
         *     When the `email` is requested and the social network did not respond with the `email` value:
         *     * the user will be asked to input an email in the corresponding form if you integrated [Login Widget](https://developers.xsolla.com/doc/login/integration-guide/integrate-solution/#login_guide_integration_widget),
         *     * the user must be asked to input an email in the corresponding form of your own interface if you integrated [Login API](https://developers.xsolla.com/doc/login/integration-guide/integrate-solution/#login_guide_integration_api). Please send the URL of this form to your Customer Success Manager.
         *
         *     After the email is inputted, the user receives an email confirmation [message](https://developers.xsolla.com/doc/login/how-to/email-customization/). To disable email confirmation, please contact your Customer Success Manager.
         *      */
        scope?: string
        /** @description Value used for additional user verification. Often used to mitigate [CSRF Attacks](https://en.wikipedia.org/wiki/Cross-site_request_forgery). The value will be returned in the response. Must be longer than 8 symbols. */
        state: string
        /** @description Grant type used in your project that has the enabled OAuth 2.0 protocol. Must be `code` to get the user authentication code in the response. The received code must be exchanged to a JWT via the [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call to finish user authentication. */
        response_type: string
      }
      header?: never
      path: {
        /** @description Name of the social network connected to Login in Publisher Account. Can be: Can be: [`amazon`](https://developer.amazon.com/docs/), [`apple`](https://developer.apple.com/documentation/sign_in_with_apple/sign_in_with_apple_rest_api/authenticating_users_with_sign_in_with_apple), [`babka`](/doc/login/how-to/xsolla-account-login/#login_babka_button_integration_oauth_client_creation), [`baidu`](https://developer.baidu.com/wiki/index.php?title=docs/oauth/client), [`battlenet`](https://develop.battle.net/documentation/guides/using-oauth/client-credentials-flow), [`discord`](https://discord.com/developers/docs/topics/oauth2), [`epicgames`](https://dev.epicgames.com/docs/dev-portal/client-credentials), [`facebook`](https://developers.facebook.com/docs/facebook-login/guides/advanced/manual-flow/), [`github`](https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps), [`google`](https://developers.google.com/identity/protocols/oauth2),[`kakao`](https://developers.kakao.com/docs/latest/en/kakaologin/common), [`linkedin`](https://learn.microsoft.com/en-us/linkedin/shared/authentication/client-credentials-flow), [`mailru`](https://help.mail.ru/developers/oauth/settings), [`microsoft`](https://learn.microsoft.com/en-us/graph/permissions-reference), [`msn`](https://learn.microsoft.com/en-us/graph/permissions-reference), [`naver`](https://developers.naver.com/docs/common/openapiguide/appregister), [`ok`](https://apiok.ru/dev/app/create#section-2), [`paypal`](https://developer.paypal.com/home/#get-api-credentials), [`qq`](https://wiki.connect.qq.com/__trashed-2), [`reddit`](https://github.com/reddit-archive/reddit/wiki/OAuth2#getting-started), [`steam`](https://partner.steamgames.com/doc/webapi_overview/oauth), [`twitch`](https://dev.twitch.tv/docs/authentication/#registration), [`twitter`](https://developer.twitter.com/en/docs/authentication/oauth-1-0a/api-key-and-secret), [`vimeo`](https://developer.vimeo.com/api/guides/start#register-your-app),[`vk`](https://dev.vk.com/ru/api/getting-started), [`wechat`](https://developers.weixin.qq.com/doc/oplatform/en/Website_App/WeChat_Login/Wechat_Login.html), [`weibo`](https://open.weibo.com/wiki/%E6%8E%88%E6%9D%83%E6%9C%BA%E5%88%B6%E8%AF%B4%E6%98%8E), [`xbox`](https://learn.microsoft.com/en-us/graph/permissions-reference),[ `yahoo`](https://developer.yahoo.com/oauth2/guide), [`yandex`](https://yandex.ru/dev/id/doc/ru/register-client), [`youtube`](https://developers.google.com/youtube/registering_an_application).
         *
         *     If you store user data in [PlayFab](https://developers.xsolla.com/doc/login/integration-guide/connect-users-storage/#login_guide_connect_users_storage_playfab), only `twitch` is available.
         *      */
        provider_name: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Redirection */
      302: {
        headers: {
          /** @description URL to authenticate the user via the social network. */
          Location?: string
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidClient: unknown
          InvalidOAuth20State: unknown
          InvalidRequest: unknown
          InvalidScope: unknown
        }
      }
      /** @description Bad Request */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          GettingOAuth20TokenError: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          SocialNetworkIsDisabled: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'oauth-20-get-link-for-social-auth': {
    parameters: {
      query: {
        /** @description URL to redirect the user to after account confirmation, successful authentication, or password reset confirmation. To set up this parameter, contact your Customer Success Manager or email to [csm@xsolla.com](mailto:csm@xsolla.com).
         *     <div class="notice"><strong>Notice</strong><br> The parameter is required if you have more than one redirect URI in your project settings.</div>
         *      */
        redirect_uri?: string
        /** @description Your application ID. Get it after [creating an OAuth 2.0 client](https://developers.xsolla.com/doc/login/features/connecting-oauth2/). */
        client_id: number
        /** @description Scope is a mechanism in OAuth 2.0 to limit an application’s access to a user’s account.
         *
         *     Can be:
         *     * `email` for [Auth via social network](https://developers.xsolla.com/api/login/operation/oauth-20-auth-via-social-network) or [Get link for social auth](https://developers.xsolla.com/api/login/operation/oauth-20-get-link-for-social-auth) calls to request an email from the user additionally.
         *     * `offline` to use `refresh_token` from [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call to refresh the JWT when it is expired.
         *     * `playfab` to write **SessionTicket** to the `session_ticket` claim of the JWT if you store user data at PlayFab.
         *
         *     If you process your own values of the `scope` parameter, that are not mentioned above, you can set them when using this call. The Xsolla Login server does not process these values, but returns them in the received JWT.
         *
         *     When the `email` is requested and the social network did not respond with the `email` value:
         *     * the user will be asked to input an email in the corresponding form if you integrated [Login Widget](https://developers.xsolla.com/doc/login/integration-guide/integrate-solution/#login_guide_integration_widget),
         *     * the user must be asked to input an email in the corresponding form of your own interface if you integrated [Login API](https://developers.xsolla.com/doc/login/integration-guide/integrate-solution/#login_guide_integration_api). Please send the URL of this form to your Customer Success Manager.
         *
         *     After the email is inputted, the user receives an email confirmation [message](https://developers.xsolla.com/doc/login/how-to/email-customization/). To disable email confirmation, please contact your Customer Success Manager.
         *      */
        scope?: string
        /** @description Value used for additional user verification. Often used to mitigate [CSRF Attacks](https://en.wikipedia.org/wiki/Cross-site_request_forgery). The value will be returned in the response. Must be longer than 8 symbols. */
        state: string
        /** @description Grant type used in your project that has the enabled OAuth 2.0 protocol. Must be `code` to get the user authentication code in the response. The received code must be exchanged to a JWT via the [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call to finish user authentication. */
        response_type: string
      }
      header?: never
      path: {
        /** @description Name of the social network connected to Login in Publisher Account. Can be: Can be: [`amazon`](https://developer.amazon.com/docs/), [`apple`](https://developer.apple.com/documentation/sign_in_with_apple/sign_in_with_apple_rest_api/authenticating_users_with_sign_in_with_apple), [`babka`](/doc/login/how-to/xsolla-account-login/#login_babka_button_integration_oauth_client_creation), [`baidu`](https://developer.baidu.com/wiki/index.php?title=docs/oauth/client), [`battlenet`](https://develop.battle.net/documentation/guides/using-oauth/client-credentials-flow), [`discord`](https://discord.com/developers/docs/topics/oauth2), [`epicgames`](https://dev.epicgames.com/docs/dev-portal/client-credentials), [`facebook`](https://developers.facebook.com/docs/facebook-login/guides/advanced/manual-flow/), [`github`](https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps), [`google`](https://developers.google.com/identity/protocols/oauth2),[`kakao`](https://developers.kakao.com/docs/latest/en/kakaologin/common), [`linkedin`](https://learn.microsoft.com/en-us/linkedin/shared/authentication/client-credentials-flow), [`mailru`](https://help.mail.ru/developers/oauth/settings), [`microsoft`](https://learn.microsoft.com/en-us/graph/permissions-reference), [`msn`](https://learn.microsoft.com/en-us/graph/permissions-reference), [`naver`](https://developers.naver.com/docs/common/openapiguide/appregister), [`ok`](https://apiok.ru/dev/app/create#section-2), [`paypal`](https://developer.paypal.com/home/#get-api-credentials), [`qq`](https://wiki.connect.qq.com/__trashed-2), [`reddit`](https://github.com/reddit-archive/reddit/wiki/OAuth2#getting-started), [`steam`](https://partner.steamgames.com/doc/webapi_overview/oauth), [`twitch`](https://dev.twitch.tv/docs/authentication/#registration), [`twitter`](https://developer.twitter.com/en/docs/authentication/oauth-1-0a/api-key-and-secret), [`vimeo`](https://developer.vimeo.com/api/guides/start#register-your-app),[`vk`](https://dev.vk.com/ru/api/getting-started), [`wechat`](https://developers.weixin.qq.com/doc/oplatform/en/Website_App/WeChat_Login/Wechat_Login.html), [`weibo`](https://open.weibo.com/wiki/%E6%8E%88%E6%9D%83%E6%9C%BA%E5%88%B6%E8%AF%B4%E6%98%8E), [`xbox`](https://learn.microsoft.com/en-us/graph/permissions-reference),[ `yahoo`](https://developer.yahoo.com/oauth2/guide), [`yandex`](https://yandex.ru/dev/id/doc/ru/register-client), [`youtube`](https://developers.google.com/youtube/registering_an_application).
         *
         *     If you store user data in [PlayFab](https://developers.xsolla.com/doc/login/integration-guide/connect-users-storage/#login_guide_connect_users_storage_playfab), only `twitch` is available.
         *      */
        provider_name: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description URL for authentication via the social network. */
            url: string
          }
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidClient: unknown
          InvalidOAuth20State: unknown
          InvalidRequest: unknown
          InvalidScope: unknown
        }
      }
      /** @description Bad Request */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          GettingOAuth20TokenError: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          SocialNetworkIsDisabled: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'oauth-20-auth-via-access-token-of-social-network': {
    parameters: {
      query: {
        /** @description Your application ID. Get it after [creating an OAuth 2.0 client](https://developers.xsolla.com/doc/login/features/connecting-oauth2/). */
        client_id: number
        /** @description Grant type used in your project that has the enabled OAuth 2.0 protocol. Must be `code` to get the user authentication code in the response. The received code must be exchanged to a JWT via the [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call to finish user authentication. */
        response_type: string
        /** @description URL to redirect the user to after account confirmation, successful authentication, or password reset confirmation. To set up this parameter, contact your Customer Success Manager or email to [csm@xsolla.com](mailto:csm@xsolla.com).
         *     <div class="notice"><strong>Notice</strong><br> The parameter is required if you have more than one redirect URI in your project settings.</div>
         *      */
        redirect_uri?: string
        /** @description Value used for additional user verification. Often used to mitigate [CSRF Attacks](https://en.wikipedia.org/wiki/Cross-site_request_forgery). The value will be returned in the response. Must be longer than 8 symbols. */
        state: string
        /** @description Scope is a mechanism in OAuth 2.0 to limit an application’s access to a user’s account.
         *
         *     Can be:
         *     * `email` for [Auth via social network](https://developers.xsolla.com/api/login/operation/oauth-20-auth-via-social-network) or [Get link for social auth](https://developers.xsolla.com/api/login/operation/oauth-20-get-link-for-social-auth) calls to request an email from the user additionally.
         *     * `offline` to use `refresh_token` from [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call to refresh the JWT when it is expired.
         *     * `playfab` to write **SessionTicket** to the `session_ticket` claim of the JWT if you store user data at PlayFab.
         *
         *     If you process your own values of the `scope` parameter, that are not mentioned above, you can set them when using this call. The Xsolla Login server does not process these values, but returns them in the received JWT.
         *      */
        scope?: string
      }
      header?: never
      path: {
        /** @description Name of the social network connected to the Login in Publisher Account.
         *
         *     Can have the following values: `facebook`, `google`, `linkedin`, `twitter`, `discord`, `naver`, `baidu`, `wechat`, `qq_mobile`.
         *      */
        provider_name: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description Access token received from a social network. */
          access_token: string
          /** @description Parameter `oauth_token_secret` received from the authorization request. **Required** for Twitter only. */
          access_token_secret?: string
          /** @description Parameter `openid` received from a social network. **Required** for Wechat only. */
          openid?: string
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description URL generated from the `redirect_uri` with additional parameters. The `code` parameter is the user authentication code which must be exchanged to a JWT. */
            login_url: string
          }
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          SocialNetworkIsDisabled: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'check-user-authentication': {
    parameters: {
      query: {
        /** @description Your application ID. Get it after [creating an OAuth 2.0 client](https://developers.xsolla.com/doc/login/features/connecting-oauth2/). */
        client_id: number
        /** @description Scope is a mechanism in OAuth 2.0 to limit an application’s access to a user’s account.
         *
         *     Can be:
         *     * `email` for [Auth via social network](https://developers.xsolla.com/api/login/operation/oauth-20-auth-via-social-network) or [Get link for social auth](https://developers.xsolla.com/api/login/operation/oauth-20-get-link-for-social-auth) calls to request an email from the user additionally.
         *     * `offline` to use `refresh_token` from [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call to refresh the JWT when it is expired.
         *     * `playfab` to write **SessionTicket** to the `session_ticket` claim of the JWT if you store user data at PlayFab.
         *
         *     If you process your own values of the `scope` parameter, that are not mentioned above, you can set them when using this call. The Xsolla Login server does not process these values, but returns them in the received JWT.
         *      */
        scope?: string
        /** @description Value used for additional user verification. Often used to mitigate [CSRF Attacks](https://en.wikipedia.org/wiki/Cross-site_request_forgery). The value will be returned in the response. Must be longer than 8 symbols. */
        state: string
        /** @description Grant type used in your project that has the enabled OAuth 2.0 protocol. Must be `code` to get the user authentication code in the response. The received code must be exchanged to a JWT via the [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call to finish user authentication. */
        response_type: string
        /** @description URL to redirect the user to after account confirmation, successful authentication, or password reset confirmation. To set up this parameter, contact your Customer Success Manager or email to [csm@xsolla.com](mailto:csm@xsolla.com).
         *     <div class="notice"><strong>Notice</strong><br> The parameter is required if you have more than one redirect URI in your project settings.</div>
         *      */
        redirect_uri?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description URL generated from the `redirect_uri` with `code` and `state` parameters. The `code` parameter is the user authentication code which must be exchanged to a JWT. */
            login_url: string
          }
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidClient: unknown
          InvalidParameter: unknown
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          UserIsUnauthorized: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'generate-jwt': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/x-www-form-urlencoded': {
          /** @description Value of this parameter received in the response to the last request of this call with `authorization_code` or `refresh_token` values in the `grant_type` parameter. **Required** if `grant_type=refresh_token`. */
          refresh_token?: string
          /** @description The type of getting the JWT. Can be:
           *     * `authorization_code` to exchange the code received in the authentication call to the JWT. The value of the `code` parameter must be specified.
           *     * `refresh_token` to get the refreshed JWT when the previous value is expired. The value of the `refresh_token` parameter must be specified.
           *     * `client_credentials` to get the server JWT. The values of the `client_id` and `client_secret` parameters must be specified.
           *      */
          grant_type: string
          /** @description Your secret key. The value for this parameter depends on the value of the `grant_type` parameter:
           *     * If it’s `authorization_code`, [create an OAuth 2.0 client and use its secret key](https://developers.xsolla.com/doc/login/features/connecting-oauth2/). **Required** if you created an OAuth 2.0 client with confidential authentication type.
           *     * If it’s `client_credentials`, contact your Customer Success Manager to create a server OAuth 2.0 client and get its secret key. **Required** for this client type.
           *
           *     Note that values for `client_secret` and `client_id` parameters should be used from the same client.
           *      */
          client_secret?: string
          /** @description Your application ID. The value for this parameter depends on the value of the `grant_type` parameter:
           *     * If it’s `authorization_code`, [create an OAuth 2.0 client and use its client ID](https://developers.xsolla.com/doc/login/features/connecting-oauth2/).
           *     * If it’s `client_credentials`, contact your Customer Success Manager to create a server OAuth 2.0 client and get its client ID.
           *
           *     Note that values for `client_secret` and `client_id` parameters should be used from the same client.
           *      */
          client_id: string
          redirect_uri?: string
          /** @description Authentication code that is exchanged to a JWT. **Required** if `grant_type=authorization_code`. */
          code?: string
          /** @description The code verifier for the PKCE request, that the app originally generated before the authorization request. */
          code_verifier?: string
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Xsolla Login JWT. */
            access_token: string
            /** @description JWT expiration period in seconds. Default value is 3600 seconds. */
            expires_in?: number
            /** @description Value to refresh the JWT. Used for getting new `access_token`. */
            refresh_token?: string
            /** @description Scope is a mechanism in OAuth 2.0 to limit an application’s access to a user’s account. */
            scope?: string
            /** @description JWT type with `bearer` value. */
            token_type: string
          }
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidClient: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description I’m a teapot */
      418: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          MisconfiguredProject: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'oauth-20-register-new-user': {
    parameters: {
      query: {
        /** @description Grant type used in your project that has the enabled OAuth 2.0 protocol. Must be `code` to get the user authentication code in the response. The received code must be exchanged to a JWT via the [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call to finish user authentication. */
        response_type: string
        /** @description Your application ID. Get it after [creating an OAuth 2.0 client](https://developers.xsolla.com/doc/login/features/connecting-oauth2/). */
        client_id: number
        /** @description Scope is a mechanism in OAuth 2.0 to limit an application’s access to a user’s account.
         *
         *     Can be:
         *     * `email` for [Auth via social network](https://developers.xsolla.com/api/login/operation/oauth-20-auth-via-social-network) or [Get link for social auth](https://developers.xsolla.com/api/login/operation/oauth-20-get-link-for-social-auth) calls to request an email from the user additionally.
         *     * `offline` to use `refresh_token` from [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call to refresh the JWT when it is expired.
         *     * `playfab` to write **SessionTicket** to the `session_ticket` claim of the JWT if you store user data at PlayFab.
         *
         *     If you process your own values of the `scope` parameter, that are not mentioned above, you can set them when using this call. The Xsolla Login server does not process these values, but returns them in the received JWT.
         *      */
        scope?: string
        /** @description Identification parameter of the application the token was issued for. Parameter value will be passed in the `aud` JWT field.
         *      */
        audience?: string
        /** @description Value used for additional user verification. Often used to mitigate [CSRF Attacks](https://en.wikipedia.org/wiki/Cross-site_request_forgery). The value will be returned in the response. Must be longer than 8 symbols. */
        state: string
        /** @description URL to redirect the user to after account confirmation, successful authentication, or password reset confirmation. To set up this parameter, contact your Customer Success Manager or email to [csm@xsolla.com](mailto:csm@xsolla.com).
         *     <div class="notice"><strong>Notice</strong><br> The parameter is required if you have more than one redirect URI in your project settings.</div>
         *      */
        redirect_uri?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description Whether the user gave consent to processing of their personal data. */
          accept_consent?: boolean
          /** @description User email address. */
          email: string
          /** @description Parameters used for [extended registration form](https://developers.xsolla.com/doc/login/features/extended-registration-form/). To use this feature, please contact your Customer Success Manager. */
          fields?: Record<string, never>
          /** @description User password. */
          password: string
          /** @description User consent to receive the newsletter. */
          promo_email_agreement?: number
          /** @description Username. */
          username: string
        }
      }
    }
    responses: {
      /** @description OK (Account confirmation is disabled) */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description URL generated from the `redirect_uri` with additional parameters. The `code` parameter is the user authentication code which must be exchanged to a JWT. */
            login_url?: string
          }
        }
      }
      /** @description No Content (Account confirmation is enabled) */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidClient: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          UserAlreadyExists: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'oauth-20-resend-account-confirmation-email': {
    parameters: {
      query: {
        /** @description Your application ID. Get it after [creating an OAuth 2.0 client](https://developers.xsolla.com/doc/login/features/connecting-oauth2/). */
        client_id: number
        /** @description URL to redirect the user to after account confirmation, successful authentication, or password reset confirmation. To set up this parameter, contact your Customer Success Manager or email to [csm@xsolla.com](mailto:csm@xsolla.com).
         *     <div class="notice"><strong>Notice</strong><br> The parameter is required if you have more than one redirect URI in your project settings.</div>
         *      */
        redirect_uri?: string
        /** @description Value used for additional user verification. Often used to mitigate [CSRF Attacks](https://en.wikipedia.org/wiki/Cross-site_request_forgery). The value will be returned in the response. Must be longer than 8 symbols. */
        state?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description Username or user email address. */
          username: string
        }
      }
    }
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          LoginURLIsNotConfiguredForThisProject: unknown
          WrongConfirmationCode: unknown
        }
      }
    }
  }
  'get-confirmation-code': {
    parameters: {
      query: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        projectId: string
        /** @description Login identifier of the user. Can be either an email address or phone number. */
        login: string
        /** @description ID of the confirmation code. You can find its value in the response to a previous request. */
        operation_id: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Confirmation code. */
            code: string
          }
        }
      }
      /** @description Deadline exceeded */
      408: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          DeadlineExceeded: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'confirm-password-reset': {
    parameters: {
      query: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        projectId: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description New user password. */
          new_password: string
          /** @description Code to verify the user who changes the password. Is generated by the Xsolla Login server and passed to the URL of the password reset form. */
          reset_code: string
          /**
           * Format: uuid
           * @description User ID. Is passed to the URL of the password reset form. **Required**.
           */
          user_id?: string
        }
      }
    }
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          LoginURLIsNotConfiguredForThisProject: unknown
        }
      }
    }
  }
  'reset-password': {
    parameters: {
      query: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        projectId: string
        /** @description URL to redirect the user to after account confirmation, successful authentication, two-factor authentication configuration, or password reset confirmation. Must be identical to the **Callback URL** specified in the **URL** block of [Publisher Account](https://publisher.xsolla.com/). To find it, go to **Login > your Login project** and select the **Callback URLs** section in the upper block of the navigation page. **Required** if there are several Callback URLs. */
        login_url?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description Email to send the password change verification message to. */
          username: string
        }
      }
    }
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InactiveUser: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          PasswordResettingTurnedOff: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'get-attributes-schema': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        project_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InactiveUser: unknown
          WrongUsernameOrPassword: unknown
        }
      }
      /** @description Unprocessable Entity */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error']
          AccessDenied: unknown
          InvalidToken: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error']
        }
      }
    }
  }
  'put-attributes-schema': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        project_id: string
      }
      cookie?: never
    }
    /** @description JSON Schema for user attribute validation */
    requestBody: {
      content: {
        'application/json': Record<string, never>
      }
    }
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InactiveUser: unknown
          WrongUsernameOrPassword: unknown
        }
      }
      /** @description Unprocessable Entity */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error']
          AccessDenied: unknown
          InvalidToken: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error']
        }
      }
    }
  }
  'delete-attributes-schema': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        project_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InactiveUser: unknown
          WrongUsernameOrPassword: unknown
        }
      }
      /** @description Unprocessable Entity */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error']
          AccessDenied: unknown
          InvalidToken: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error']
        }
      }
    }
  }
  'get-project-list': {
    parameters: {
      query: {
        publisher_id: number
        publisher_project_id?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            allowed_origins?: string[]
            authentication_allowed?: boolean
            /** Format: url */
            consent_url?: string | null
            /** Format: url */
            cookie_policy?: string | null
            email_confirmation_needed?: boolean
            /** Format: url */
            fail_url?: string | null
            firebase_apikey?: string | null
            game_pages?: string[]
            id: string
            is_device_auth_allowed?: boolean
            is_email_auth_allowed?: boolean
            is_passwordless_captcha_enabled?: boolean
            is_phone_auth_allowed?: boolean
            is_username_email?: boolean
            /** Format: url */
            login_proxy_url?: string | null
            login_urls?: string[]
            max_oauth2_refresh_sessions?: number
            name: string
            /** Format: url */
            notification_proxy_url?: string | null
            password_reset_allowed?: boolean
            /** Format: url */
            password_reset_proxy_url?: string | null
            /** Format: url */
            passwordless_registration_proxy_url?: string | null
            playfab_title_id?: string | null
            /** Format: url */
            privacy_policy?: string | null
            /** Format: int32 */
            publisher_id: number
            /** Format: int32 */
            publisher_project_id?: number | null
            registration_allowed?: boolean
            /** Format: url */
            registration_proxy_url?: string | null
            social_friends_enabled?: boolean
            /** Format: url */
            social_login_proxy_url?: string | null
            /** Format: int32 */
            token_expiration_time?: number
            /** Format: url */
            tos_url?: string | null
            type?: string
            updated_at: string
            /** @enum {string} */
            users_storage?: 'xsolla' | 'custom' | 'playfab' | 'firebase'
            /** Format: int64 */
            widget_generation?: number
          }[]
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InactiveUser: unknown
          WrongUsernameOrPassword: unknown
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          LoginURLIsNotConfiguredForThisProject: unknown
        }
      }
    }
  }
  'create-project': {
    parameters: {
      query: {
        publisher_id: number
        publisher_project_id?: number
        is_ng_verification?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          game_pages?: string[] | null
          name: string
          /**
           * @default master
           * @enum {string|null}
           */
          type: 'master' | 'shadow'
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            allowed_origins?: string[] | null
            authentication_allowed?: boolean
            /** Format: url */
            consent_url?: string | null
            /** Format: url */
            cookie_policy?: string | null
            email_confirmation_needed?: boolean
            /** Format: url */
            fail_url?: string | null
            firebase_apikey?: string | null
            game_pages?: string[] | null
            id: string
            is_device_auth_allowed?: boolean
            is_email_auth_allowed?: boolean
            is_passwordless_captcha_enabled?: boolean
            is_phone_auth_allowed?: boolean
            is_username_email?: boolean
            /** Format: url */
            login_proxy_url?: string | null
            login_urls?: string[] | null
            max_oauth2_refresh_sessions?: number
            name?: string
            /** Format: url */
            notification_proxy_url?: string | null
            password_reset_allowed?: boolean
            /** Format: url */
            password_reset_proxy_url?: string | null
            /** Format: url */
            passwordless_registration_proxy_url?: string | null
            playfab_title_id?: string | null
            /** Format: url */
            privacy_policy?: string | null
            /** Format: int32 */
            publisher_id?: number
            /** Format: int32 */
            publisher_project_id?: number | null
            registration_allowed?: boolean
            /** Format: url */
            registration_proxy_url?: string | null
            social_friends_enabled?: boolean
            /** Format: url */
            social_login_proxy_url?: string | null
            /** Format: int32 */
            token_expiration_time?: number
            /** Format: url */
            tos_url?: string | null
            type?: string
            updated_at?: string
            /** @enum {string} */
            users_storage?: 'xsolla' | 'custom' | 'playfab' | 'firebase'
            /** Format: int64 */
            widget_generation?: number
          }
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InactiveUser: unknown
          WrongUsernameOrPassword: unknown
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          LoginURLIsNotConfiguredForThisProject: unknown
        }
      }
    }
  }
  'list-age-restrictions': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        project_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            age: number
            country_code: string
            rating_name: string
          }[]
        }
      }
      /** @description Access denied */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unprocessable entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'create-age-restriction': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        project_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['restriction']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Access denied */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unprocessable entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'delete-age-restriction': {
    parameters: {
      query: {
        /** @description Country code in the [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. */
        code: string
      }
      header?: never
      path: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        project_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Access denied */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unprocessable entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'batch-age-restrictions': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        project_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['restriction'][]
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InactiveUser: unknown
          WrongUsernameOrPassword: unknown
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          LoginURLIsNotConfiguredForThisProject: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'get-project-checklist': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        project_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Whether the step is completed. */
            status: boolean
            /** @description Name of item of checklist's */
            step: string
          }[]
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AccessDenied: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'check-project-checklist': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Item name */
        item: string
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        project_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AccessDenied: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'get-webhooks-for-event': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        project_id: string
        /** @description Event type. Can have the following values:
         *     * `registration` is used for user registration by login and password ([JWT](https://developers.xsolla.com/api/login/operation/jwt-register-new-user) and [OAuth 2.0](https://developers.xsolla.com/api/login/operation/oauth-20-register-new-user)), social authentication ([JWT](https://developers.xsolla.com/api/login/operation/jwt-auth-via-social-network) and [OAuth 2.0](https://developers.xsolla.com/api/login/operation/oauth-20-auth-via-social-network)), silent authentication ([JWT](https://developers.xsolla.com/api/login/operation/jwt-silent-authentication) and [OAuth 2.0](https://developers.xsolla.com/api/login/operation/oauth-20-silent-authentication)), authentication by a phone number ([JWT](https://developers.xsolla.com/api/login/operation/jwt-start-auth-by-phone-number) and [OAuth 2.0](https://developers.xsolla.com/api/login/operation/oauth-20-start-auth-by-phone-number)), and [registration of a new user from the server](https://developers.xsolla.com/api/login/operation/register-new-user-from-server) as well.
         *     * `authorization` is used for user authorization by login and password (JWT and OAuth 2.0), social authentication (JWT and OAuth 2.0), silent authentication (JWT and OAuth 2.0), and authentication by a phone number (JWT and OAuth 2.0).
         *     * `email_confirmation` is used for user email address confirmation.
         *     * `link_social_account` is used for linking user’s social account.
         *     * `new_verified_user` is used for user registration when they pass all the necessary verification steps. These verification steps can be email address confirmation, age confirmation via the okname service, [additional data collection](https://developers.xsolla.com/doc/login/features/collecting-emails/), etc. You should configure these steps by yourself.
         *      */
        event_type:
          | 'registration'
          | 'authorization'
          | 'email_confirmation'
          | 'link_social_account'
          | 'new_verified_user'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['respWebhookSettings'][]
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidToken: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          ProjectNotFound: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'add-webhook-for-event': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        project_id: string
        /** @description Event type. Can have the following values:
         *     * `registration` is used for user registration by login and password ([JWT](https://developers.xsolla.com/api/login/operation/jwt-register-new-user) and [OAuth 2.0](https://developers.xsolla.com/api/login/operation/oauth-20-register-new-user)), social authentication ([JWT](https://developers.xsolla.com/api/login/operation/jwt-auth-via-social-network) and [OAuth 2.0](https://developers.xsolla.com/api/login/operation/oauth-20-auth-via-social-network)), silent authentication ([JWT](https://developers.xsolla.com/api/login/operation/jwt-silent-authentication) and [OAuth 2.0](https://developers.xsolla.com/api/login/operation/oauth-20-silent-authentication)), authentication by a phone number ([JWT](https://developers.xsolla.com/api/login/operation/jwt-start-auth-by-phone-number) and [OAuth 2.0](https://developers.xsolla.com/api/login/operation/oauth-20-start-auth-by-phone-number)), and [registration of a new user from the server](https://developers.xsolla.com/api/login/operation/register-new-user-from-server) as well.
         *     * `authorization` is used for user authorization by login and password (JWT and OAuth 2.0), social authentication (JWT and OAuth 2.0), silent authentication (JWT and OAuth 2.0), and authentication by a phone number (JWT and OAuth 2.0).
         *     * `email_confirmation` is used for user email address confirmation.
         *     * `link_social_account` is used for linking user’s social account.
         *     * `new_verified_user` is used for user registration when they pass all the necessary verification steps. These verification steps can be email address confirmation, age confirmation via the okname service, [additional data collection](https://developers.xsolla.com/doc/login/features/collecting-emails/), etc. You should configure these steps by yourself.
         *      */
        event_type:
          | 'registration'
          | 'authorization'
          | 'email_confirmation'
          | 'link_social_account'
          | 'new_verified_user'
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /**
           * Format: uri
           * @description Valid URL to which the Xsolla Login server sends the webhook.
           */
          url: string
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['respWebhookSettings']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidToken: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          ProjectNotFound: unknown
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          MaxNumberOfWebhooks: unknown
          WebhookURLIsAlreadyUsed: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'delete-webhook-for-event': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        project_id: string
        /** @description Event type. Can have the following values:
         *     * `registration` is used for user registration by login and password ([JWT](https://developers.xsolla.com/api/login/operation/jwt-register-new-user) and [OAuth 2.0](https://developers.xsolla.com/api/login/operation/oauth-20-register-new-user)), social authentication ([JWT](https://developers.xsolla.com/api/login/operation/jwt-auth-via-social-network) and [OAuth 2.0](https://developers.xsolla.com/api/login/operation/oauth-20-auth-via-social-network)), silent authentication ([JWT](https://developers.xsolla.com/api/login/operation/jwt-silent-authentication) and [OAuth 2.0](https://developers.xsolla.com/api/login/operation/oauth-20-silent-authentication)), authentication by a phone number ([JWT](https://developers.xsolla.com/api/login/operation/jwt-start-auth-by-phone-number) and [OAuth 2.0](https://developers.xsolla.com/api/login/operation/oauth-20-start-auth-by-phone-number)), and [registration of a new user from the server](https://developers.xsolla.com/api/login/operation/register-new-user-from-server) as well.
         *     * `authorization` is used for user authorization by login and password (JWT and OAuth 2.0), social authentication (JWT and OAuth 2.0), silent authentication (JWT and OAuth 2.0), and authentication by a phone number (JWT and OAuth 2.0).
         *     * `email_confirmation` is used for user email address confirmation.
         *     * `link_social_account` is used for linking user’s social account.
         *     * `new_verified_user` is used for user registration when they pass all the necessary verification steps. These verification steps can be email address confirmation, age confirmation via the okname service, [additional data collection](https://developers.xsolla.com/doc/login/features/collecting-emails/), etc. You should configure these steps by yourself.
         *      */
        event_type:
          | 'registration'
          | 'authorization'
          | 'email_confirmation'
          | 'link_social_account'
          | 'new_verified_user'
        /** @description ID of the webhook that you want to delete. */
        webhook_id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidToken: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          ProjectNotFound: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'export-users': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        project_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /**
           * Format: email
           * @description Email address to which the link with the result is sent.
           */
          email: string
        }
      }
    }
    responses: {
      /** @description OK */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AccessDenied: unknown
        }
      }
    }
  }
  'project-configuration-edit': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        project_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description Toggler for enable append social network's token to Login JWT token */
          add_social_access_token?: boolean | null
          allowed_origins?: string[] | null
          authentication_allowed?: boolean | null
          /** Format: url */
          consent_url?: string | null
          /** Format: url */
          cookie_policy?: string | null
          email_confirmation_needed?: boolean | null
          /** Format: url */
          fail_url?: string | null
          game_pages?: string[] | null
          is_device_auth_allowed?: boolean | null
          is_email_auth_allowed?: boolean | null
          is_enable_magic_link?: boolean | null
          is_ng_verification?: boolean | null
          is_passwordless_captcha_enabled?: boolean | null
          is_phone_auth_allowed?: boolean | null
          is_username_email?: boolean | null
          /** Format: url */
          login_proxy_url?: string | null
          login_urls?: string[] | null
          max_oauth2_refresh_sessions?: number | null
          name?: string | null
          /** Format: url */
          notification_proxy_url?: string | null
          password_reset_allowed?: boolean | null
          /** Format: url */
          password_reset_proxy_url?: string | null
          /** Format: url */
          passwordless_registration_proxy_url?: string | null
          playfab_title_id?: string | null
          /** Format: url */
          privacy_policy?: string | null
          /** Format: int32 */
          publisher_project_id?: number | null
          registration_allowed?: boolean | null
          /** Format: url */
          registration_proxy_url?: string | null
          social_friends_enabled?: boolean | null
          /** Format: url */
          social_login_proxy_url?: string | null
          /** @description Solution the Login project was created for. Possible values: [ "webshop", "launcher", "login", "sdk" ].
           *      */
          solution?: string | null
          /** Format: int32 */
          token_expiration_time?: number | null
          /** Format: url */
          tos_url?: string | null
          /** @enum {string|null} */
          users_storage?: 'xsolla' | 'custom' | 'playfab' | 'firebase'
          /** Format: int64 */
          widget_generation?: number | null
        }
      }
    }
    responses: {
      /** @description Ok. Configuration saved */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InactiveUser: unknown
          WrongUsernameOrPassword: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          LoginURLIsNotConfiguredForThisProject: unknown
        }
      }
    }
  }
  'json-web-key-set': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        project_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['jwks']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          ProjectNotFound: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'get-projects-keys': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        project_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['key'][]
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          ProjectNotFound: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'post-projects-key': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        project_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['key']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          ProjectNotFound: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'delete-projects-keys': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        project_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          ProjectNotFound: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'get-project-two-factor-authentication-settings': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        project_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description List of data about project two-factor authentication settings. */
            mfa_types?: {
              /**
               * @description Type of MFA SMS or Email.
               * @enum {string}
               */
              mfa_type?: 'sms' | 'email'
              /** @description Priority of MFA type "1" for higher and "2" for lower. */
              priority?: number
            }[]
            /** @description URL to redirect user for MFA flow */
            mfa_url?: string
          }
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidToken: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          ProjectNotFound: unknown
        }
      }
    }
  }
  'update-project-two-factor-authentication-settings': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        project_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          mfa_types: {
            /**
             * @description Type of MFA: SMS or Email.
             * @enum {string}
             */
            mfa_type: 'sms' | 'email'
            /** @description Priority of MFA type "1" for higher and "2" for lower. */
            priority: number
          }[]
          /** @description URL to redirect user for MFA flow */
          mfa_url?: string
        }
      }
    }
    responses: {
      /** @description OK */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidToken: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          ProjectNotFound: unknown
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
    }
  }
  'delete-sms-limit': {
    parameters: {
      query: {
        /** @description Country code per ISO 3166. */
        code: string
      }
      header?: never
      path: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        project_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidToken: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          MismatchProjectType: unknown
        }
      }
    }
  }
  'put-social-provider-token': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        project_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          add_social_token?: boolean
        }
      }
    }
    responses: {
      /** @description OK */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AccessDenied: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          ProjectNotFound: unknown
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          LoginURLIsNotConfiguredForThisProject: unknown
        }
      }
    }
  }
  'put-social-provider-custom-scope': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        project_id: string
        /** @description Name of the social network connected to Login in Publisher Account. Can be: Can be: [`amazon`](https://developer.amazon.com/docs/), [`apple`](https://developer.apple.com/documentation/sign_in_with_apple/sign_in_with_apple_rest_api/authenticating_users_with_sign_in_with_apple), [`babka`](/doc/login/how-to/xsolla-account-login/#login_babka_button_integration_oauth_client_creation), [`baidu`](https://developer.baidu.com/wiki/index.php?title=docs/oauth/client), [`battlenet`](https://develop.battle.net/documentation/guides/using-oauth/client-credentials-flow), [`discord`](https://discord.com/developers/docs/topics/oauth2), [`epicgames`](https://dev.epicgames.com/docs/dev-portal/client-credentials), [`facebook`](https://developers.facebook.com/docs/facebook-login/guides/advanced/manual-flow/), [`github`](https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps), [`google`](https://developers.google.com/identity/protocols/oauth2),[`kakao`](https://developers.kakao.com/docs/latest/en/kakaologin/common), [`linkedin`](https://learn.microsoft.com/en-us/linkedin/shared/authentication/client-credentials-flow), [`mailru`](https://help.mail.ru/developers/oauth/settings), [`microsoft`](https://learn.microsoft.com/en-us/graph/permissions-reference), [`msn`](https://learn.microsoft.com/en-us/graph/permissions-reference), [`naver`](https://developers.naver.com/docs/common/openapiguide/appregister), [`ok`](https://apiok.ru/dev/app/create#section-2), [`paypal`](https://developer.paypal.com/home/#get-api-credentials), [`qq`](https://wiki.connect.qq.com/__trashed-2), [`reddit`](https://github.com/reddit-archive/reddit/wiki/OAuth2#getting-started), [`steam`](https://partner.steamgames.com/doc/webapi_overview/oauth), [`twitch`](https://dev.twitch.tv/docs/authentication/#registration), [`twitter`](https://developer.twitter.com/en/docs/authentication/oauth-1-0a/api-key-and-secret), [`vimeo`](https://developer.vimeo.com/api/guides/start#register-your-app),[`vk`](https://dev.vk.com/ru/api/getting-started), [`wechat`](https://developers.weixin.qq.com/doc/oplatform/en/Website_App/WeChat_Login/Wechat_Login.html), [`weibo`](https://open.weibo.com/wiki/%E6%8E%88%E6%9D%83%E6%9C%BA%E5%88%B6%E8%AF%B4%E6%98%8E), [`xbox`](https://learn.microsoft.com/en-us/graph/permissions-reference),[ `yahoo`](https://developer.yahoo.com/oauth2/guide), [`yandex`](https://yandex.ru/dev/id/doc/ru/register-client), [`youtube`](https://developers.google.com/youtube/registering_an_application).
         *
         *     If you store user data in [PlayFab](https://developers.xsolla.com/doc/login/integration-guide/connect-users-storage/#login_guide_connect_users_storage_playfab), only `twitch` is available.
         *      */
        provider_name: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          custom_scope?: string[]
          refresh_always?: boolean
        }
      }
    }
    responses: {
      /** @description OK */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AccessDenied: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          ProjectNotFound: unknown
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          LoginURLIsNotConfiguredForThisProject: unknown
        }
      }
    }
  }
  'get-project-user-groups': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        project_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Group ID. */
            id: number
            /** @description Shows whether the group is default or not. */
            is_default: boolean
            /** @description Shows whether the group can be deleted or not. Default groups can’t be deleted. */
            is_deletable: boolean
            /** @description Group name. */
            name: string
          }[]
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InactiveUser: unknown
          WrongUsernameOrPassword: unknown
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
    }
  }
  'post-project-user-group': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        project_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          name: string
        }
      }
    }
    responses: {
      /** @description OK */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InactiveUser: unknown
          WrongUsernameOrPassword: unknown
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          LoginURLIsNotConfiguredForThisProject: unknown
        }
      }
    }
  }
  'put-project-user-group': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        project_id: string
        group_id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          new_name: string
        }
      }
    }
    responses: {
      /** @description OK. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InactiveUser: unknown
          WrongUsernameOrPassword: unknown
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          LoginURLIsNotConfiguredForThisProject: unknown
        }
      }
    }
  }
  'del-project-user-group': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        project_id: string
        group_id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InactiveUser: unknown
          WrongUsernameOrPassword: unknown
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          LoginURLIsNotConfiguredForThisProject: unknown
        }
      }
    }
  }
  'upload-import-file': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        project_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'multipart/form-data': {
          /**
           * Format: binary
           * @description CSV file containing user data.
           */
          users: string
          /**
           * Format: json
           * @description File containing field numbers and names. The index should start at 0.
           */
          mapping: string
          /**
           * Format: email
           * @description Email to send a report to.
           */
          email: string
          /**
           * @description CSV separator.
           * @default ,
           */
          comma: string
        }
      }
    }
    responses: {
      /** @description OK */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
    }
  }
  'search-users-by-user-id-list': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        project_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description Array of User ID. */
          user_ids: string[]
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['searchUserInfoLite']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidToken: unknown
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          LoginURLIsNotConfiguredForThisProject: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'search-users-by-filter': {
    parameters: {
      query: {
        limit: number
        offset?: number
        order_column?: 'username' | 'contact' | 'group' | 'activity'
        order_dir?: 'asc' | 'desc'
        user_groups?: number[]
        status?: boolean
        search_query?: string
        search_by?: 'contact' | 'phone' | 'id' | 'social-id' | 'username'
        activity_from?: string
        activity_to?: string
      }
      header?: never
      path: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        project_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Count all user by criteria without pagination */
            count: number
            /** @description Offset for next page of search */
            next_after: number
            /** @description List of found users */
            users?: components['schemas']['user'][]
          }
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AccessDenied: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'get-attributes-by-user-id': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        project_id: string
        /** @description User ID. You can find it in [Publisher Account](https://publisher.xsolla.com/) > your Login project > **Users**. */
        user_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['getServerAttribute'][]
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Unprocessable Entity */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error']
          AccessDenied: unknown
          InvalidToken: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error']
        }
      }
    }
  }
  'post-projects-users-ban': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        project_id: string
        /** @description User ID. You can find it in [Publisher Account](https://publisher.xsolla.com/) > your Login project > **Users**. */
        user_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          date_from?: string | null
          date_to?: string | null
          reason: string
        }
      }
    }
    responses: {
      /** @description OK. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InactiveUser: unknown
          WrongUsernameOrPassword: unknown
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          LoginURLIsNotConfiguredForThisProject: unknown
        }
      }
    }
  }
  'del-projects-users-ban': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        project_id: string
        /** @description User ID. You can find it in [Publisher Account](https://publisher.xsolla.com/) > your Login project > **Users**. */
        user_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InactiveUser: unknown
          WrongUsernameOrPassword: unknown
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          LoginURLIsNotConfiguredForThisProject: unknown
        }
      }
    }
  }
  'get-users-count': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        project_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            user_count?: number
          }
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InactiveUser: unknown
          WrongUsernameOrPassword: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          LoginURLIsNotConfiguredForThisProject: unknown
        }
      }
    }
  }
  'jwt-silent-authentication': {
    parameters: {
      query: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        projectId: string
        /** @description URL to redirect the user to after account confirmation, successful authentication, two-factor authentication configuration, or password reset confirmation. Must be identical to the **Callback URL** specified in the **URL** block of [Publisher Account](https://publisher.xsolla.com/). To find it, go to **Login > your Login project** and select the **Callback URLs** section in the upper block of the navigation page. **Required** if there are several Callback URLs. */
        login_url?: string
        /** @description List of parameters which must be requested from the user or social network additionally and written to the JWT. The parameters must be separated by a comma. For example, `email`.
         *
         *     When the `email` is requested and the social network did not respond with the `email` value:
         *     * the user will be asked to input their email in the corresponding form if you integrated [Login Widget](https://developers.xsolla.com/doc/login/integration-guide/integrate-solution/#login_guide_integration_widget),
         *     * the user must be asked to input their email in the corresponding form of your own interface if you integrated [Login API](https://developers.xsolla.com/doc/login/integration-guide/integrate-solution/#login_guide_integration_api). Please send the URL of this form to your Customer Success Manager.
         *
         *     After the email is inputted, the user receives an email confirmation [message](https://developers.xsolla.com/doc/login/how-to/email-customization/). To disable email confirmation, please contact your Customer Success Manager.
         *      */
        fields?: string[]
        /** @description Your app ID in the platform. */
        app_id?: string
        /** @description Your custom data. The value of the parameter will be returned in the `payload` claim of the **user JWT**. */
        payload?: string
        /** @description Shows whether to deactivate the existing user JWT values and activate the one generated by this call. Can have the following values:
         *     * `1` to deactivate the existing values and activate a new one,
         *     * `0` to keep the existing values activated.
         *      */
        with_logout?: string
        /** @description Session ticket received from the platform. */
        session_ticket?: string
        /** @description Code received from the platform. */
        code?: string
        /** @description Shows how the Xsolla Login server should respond. If you set:
         *     * `true` value, the Xsolla Login server returns the 302 response code. URL for user redirection with user JWT will be in the `Location` header.
         *     * `false` value, the Xsolla Login server returns the 200 response code. URL for user redirection with user JWT will be in the response body.
         *      */
        is_redirect?: boolean
      }
      header?: never
      path: {
        /** @description Name of the platform the user authorized in. Can be `steam`, `xbox`, `epicgames`.
         *      */
        cross_social_provider_name: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description URL with the `token` parameter to redirect the user to your project. */
            login_url: string
          }
        }
      }
      /** @description Redirection */
      302: {
        headers: {
          /** @description URL with the `token` parameter to redirect the user to your project. */
          Location?: string
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'jwt-auth-via-social-network': {
    parameters: {
      query: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        projectId: string
        /** @description URL to redirect the user to after account confirmation, successful authentication, two-factor authentication configuration, or password reset confirmation. Must be identical to the **Callback URL** specified in the **URL** block of [Publisher Account](https://publisher.xsolla.com/). To find it, go to **Login > your Login project** and select the **Callback URLs** section in the upper block of the navigation page. **Required** if there are several Callback URLs. */
        login_url?: string
        /** @description List of parameters which must be requested from the user or social network additionally and written to the JWT. The parameters must be separated by a comma. For example, `email`.
         *
         *     When the `email` is requested and the social network did not respond with the `email` value:
         *     * the user will be asked to input their email in the corresponding form if you integrated [Login Widget](https://developers.xsolla.com/doc/login/integration-guide/integrate-solution/#login_guide_integration_widget),
         *     * the user must be asked to input their email in the corresponding form of your own interface if you integrated [Login API](https://developers.xsolla.com/doc/login/integration-guide/integrate-solution/#login_guide_integration_api). Please send the URL of this form to your Customer Success Manager.
         *
         *     After the email is inputted, the user receives an email confirmation [message](https://developers.xsolla.com/doc/login/how-to/email-customization/). To disable email confirmation, please contact your Customer Success Manager.
         *      */
        fields?: string[]
        /** @description Your custom data. The value of the parameter will be returned in the `payload` claim of the **user JWT**. */
        payload?: string
        /** @description Shows whether to deactivate the existing user JWT values and activate the one generated by this call. Can have the following values:
         *     * `1` to deactivate the existing values and activate a new one,
         *     * `0` to keep the existing values activated.
         *      */
        with_logout?: string
      }
      header?: never
      path: {
        /** @description Name of the social network connected to Login in Publisher Account. Can be: Can be: [`amazon`](https://developer.amazon.com/docs/), [`apple`](https://developer.apple.com/documentation/sign_in_with_apple/sign_in_with_apple_rest_api/authenticating_users_with_sign_in_with_apple), [`babka`](/doc/login/how-to/xsolla-account-login/#login_babka_button_integration_oauth_client_creation), [`baidu`](https://developer.baidu.com/wiki/index.php?title=docs/oauth/client), [`battlenet`](https://develop.battle.net/documentation/guides/using-oauth/client-credentials-flow), [`discord`](https://discord.com/developers/docs/topics/oauth2), [`epicgames`](https://dev.epicgames.com/docs/dev-portal/client-credentials), [`facebook`](https://developers.facebook.com/docs/facebook-login/guides/advanced/manual-flow/), [`github`](https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps), [`google`](https://developers.google.com/identity/protocols/oauth2),[`kakao`](https://developers.kakao.com/docs/latest/en/kakaologin/common), [`linkedin`](https://learn.microsoft.com/en-us/linkedin/shared/authentication/client-credentials-flow), [`mailru`](https://help.mail.ru/developers/oauth/settings), [`microsoft`](https://learn.microsoft.com/en-us/graph/permissions-reference), [`msn`](https://learn.microsoft.com/en-us/graph/permissions-reference), [`naver`](https://developers.naver.com/docs/common/openapiguide/appregister), [`ok`](https://apiok.ru/dev/app/create#section-2), [`paypal`](https://developer.paypal.com/home/#get-api-credentials), [`qq`](https://wiki.connect.qq.com/__trashed-2), [`reddit`](https://github.com/reddit-archive/reddit/wiki/OAuth2#getting-started), [`steam`](https://partner.steamgames.com/doc/webapi_overview/oauth), [`twitch`](https://dev.twitch.tv/docs/authentication/#registration), [`twitter`](https://developer.twitter.com/en/docs/authentication/oauth-1-0a/api-key-and-secret), [`vimeo`](https://developer.vimeo.com/api/guides/start#register-your-app),[`vk`](https://dev.vk.com/ru/api/getting-started), [`wechat`](https://developers.weixin.qq.com/doc/oplatform/en/Website_App/WeChat_Login/Wechat_Login.html), [`weibo`](https://open.weibo.com/wiki/%E6%8E%88%E6%9D%83%E6%9C%BA%E5%88%B6%E8%AF%B4%E6%98%8E), [`xbox`](https://learn.microsoft.com/en-us/graph/permissions-reference),[ `yahoo`](https://developer.yahoo.com/oauth2/guide), [`yandex`](https://yandex.ru/dev/id/doc/ru/register-client), [`youtube`](https://developers.google.com/youtube/registering_an_application).
         *
         *     If you store user data in [PlayFab](https://developers.xsolla.com/doc/login/integration-guide/connect-users-storage/#login_guide_connect_users_storage_playfab), only `twitch` is available.
         *      */
        provider_name: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Redirection */
      302: {
        headers: {
          /** @description URL to authenticate the user via the social network. */
          Location?: string
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Bad Request */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          GettingOAuth20TokenError: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          SocialNetworkIsDisabled: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'jwt-get-link-for-social-auth': {
    parameters: {
      query: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        projectId: string
        /** @description URL to redirect the user to after account confirmation, successful authentication, two-factor authentication configuration, or password reset confirmation. Must be identical to the **Callback URL** specified in the **URL** block of [Publisher Account](https://publisher.xsolla.com/). To find it, go to **Login > your Login project** and select the **Callback URLs** section in the upper block of the navigation page. **Required** if there are several Callback URLs. */
        login_url?: string
        /** @description List of parameters which must be requested from the user or social network additionally and written to the JWT. The parameters must be separated by a comma. For example, `email`.
         *
         *     When the `email` is requested and the social network did not respond with the `email` value:
         *     * the user will be asked to input their email in the corresponding form if you integrated [Login Widget](https://developers.xsolla.com/doc/login/integration-guide/integrate-solution/#login_guide_integration_widget),
         *     * the user must be asked to input their email in the corresponding form of your own interface if you integrated [Login API](https://developers.xsolla.com/doc/login/integration-guide/integrate-solution/#login_guide_integration_api). Please send the URL of this form to your Customer Success Manager.
         *
         *     After the email is inputted, the user receives an email confirmation [message](https://developers.xsolla.com/doc/login/how-to/email-customization/). To disable email confirmation, please contact your Customer Success Manager.
         *      */
        fields?: string[]
        /** @description Your custom data. The value of the parameter will be returned in the `payload` claim of the **user JWT**. */
        payload?: string
        /** @description Shows whether to deactivate the existing user JWT values and activate the one generated by this call. Can have the following values:
         *     * `1` to deactivate the existing values and activate a new one,
         *     * `0` to keep the existing values activated.
         *      */
        with_logout?: string
      }
      header?: never
      path: {
        /** @description Name of the social network connected to Login in Publisher Account. Can be: Can be: [`amazon`](https://developer.amazon.com/docs/), [`apple`](https://developer.apple.com/documentation/sign_in_with_apple/sign_in_with_apple_rest_api/authenticating_users_with_sign_in_with_apple), [`babka`](/doc/login/how-to/xsolla-account-login/#login_babka_button_integration_oauth_client_creation), [`baidu`](https://developer.baidu.com/wiki/index.php?title=docs/oauth/client), [`battlenet`](https://develop.battle.net/documentation/guides/using-oauth/client-credentials-flow), [`discord`](https://discord.com/developers/docs/topics/oauth2), [`epicgames`](https://dev.epicgames.com/docs/dev-portal/client-credentials), [`facebook`](https://developers.facebook.com/docs/facebook-login/guides/advanced/manual-flow/), [`github`](https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps), [`google`](https://developers.google.com/identity/protocols/oauth2),[`kakao`](https://developers.kakao.com/docs/latest/en/kakaologin/common), [`linkedin`](https://learn.microsoft.com/en-us/linkedin/shared/authentication/client-credentials-flow), [`mailru`](https://help.mail.ru/developers/oauth/settings), [`microsoft`](https://learn.microsoft.com/en-us/graph/permissions-reference), [`msn`](https://learn.microsoft.com/en-us/graph/permissions-reference), [`naver`](https://developers.naver.com/docs/common/openapiguide/appregister), [`ok`](https://apiok.ru/dev/app/create#section-2), [`paypal`](https://developer.paypal.com/home/#get-api-credentials), [`qq`](https://wiki.connect.qq.com/__trashed-2), [`reddit`](https://github.com/reddit-archive/reddit/wiki/OAuth2#getting-started), [`steam`](https://partner.steamgames.com/doc/webapi_overview/oauth), [`twitch`](https://dev.twitch.tv/docs/authentication/#registration), [`twitter`](https://developer.twitter.com/en/docs/authentication/oauth-1-0a/api-key-and-secret), [`vimeo`](https://developer.vimeo.com/api/guides/start#register-your-app),[`vk`](https://dev.vk.com/ru/api/getting-started), [`wechat`](https://developers.weixin.qq.com/doc/oplatform/en/Website_App/WeChat_Login/Wechat_Login.html), [`weibo`](https://open.weibo.com/wiki/%E6%8E%88%E6%9D%83%E6%9C%BA%E5%88%B6%E8%AF%B4%E6%98%8E), [`xbox`](https://learn.microsoft.com/en-us/graph/permissions-reference),[ `yahoo`](https://developer.yahoo.com/oauth2/guide), [`yandex`](https://yandex.ru/dev/id/doc/ru/register-client), [`youtube`](https://developers.google.com/youtube/registering_an_application).
         *
         *     If you store user data in [PlayFab](https://developers.xsolla.com/doc/login/integration-guide/connect-users-storage/#login_guide_connect_users_storage_playfab), only `twitch` is available.
         *      */
        provider_name: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description URL for authentication via the social network. */
            url: string
          }
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Bad Request */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          GettingOAuth20TokenError: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          SocialNetworkIsDisabled: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'jwt-auth-via-access-token-of-social-network': {
    parameters: {
      query: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        projectId: string
        /** @description Your custom data. The value of the parameter will be returned in the `payload` claim of the **user JWT**. */
        payload?: string
        /** @description Shows whether to deactivate the existing user JWT values and activate the one generated by this call. Can have the following values:
         *     * `1` to deactivate the existing values and activate a new one,
         *     * `0` to keep the existing values activated.
         *      */
        with_logout?: string
      }
      header?: never
      path: {
        /** @description Name of the social network connected to the Login in Publisher Account.
         *
         *     Can have the following values: `facebook`, `google`, `linkedin`, `twitter`, `discord`, `naver`, `baidu`, `wechat`, `qq_mobile`.
         *      */
        provider_name: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description Access token received from a social network. */
          access_token: string
          /** @description Parameter `oauth_token_secret` received from the authorization request. **Required** for Twitter only. */
          access_token_secret?: string
          /** @description Parameter `openid` received from a social network. **Required** for Wechat only. */
          openid?: string
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Xsolla Login user JWT. */
            token: string
          }
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          SocialNetworkIsDisabled: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'jwt-refresh-social-token': {
    parameters: {
      query: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        projectId: string
      }
      header?: never
      path: {
        /** @description Name of the social network connected to Login in Publisher Account. Can be: Can be: [`amazon`](https://developer.amazon.com/docs/), [`apple`](https://developer.apple.com/documentation/sign_in_with_apple/sign_in_with_apple_rest_api/authenticating_users_with_sign_in_with_apple), [`babka`](/doc/login/how-to/xsolla-account-login/#login_babka_button_integration_oauth_client_creation), [`baidu`](https://developer.baidu.com/wiki/index.php?title=docs/oauth/client), [`battlenet`](https://develop.battle.net/documentation/guides/using-oauth/client-credentials-flow), [`discord`](https://discord.com/developers/docs/topics/oauth2), [`epicgames`](https://dev.epicgames.com/docs/dev-portal/client-credentials), [`facebook`](https://developers.facebook.com/docs/facebook-login/guides/advanced/manual-flow/), [`github`](https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps), [`google`](https://developers.google.com/identity/protocols/oauth2),[`kakao`](https://developers.kakao.com/docs/latest/en/kakaologin/common), [`linkedin`](https://learn.microsoft.com/en-us/linkedin/shared/authentication/client-credentials-flow), [`mailru`](https://help.mail.ru/developers/oauth/settings), [`microsoft`](https://learn.microsoft.com/en-us/graph/permissions-reference), [`msn`](https://learn.microsoft.com/en-us/graph/permissions-reference), [`naver`](https://developers.naver.com/docs/common/openapiguide/appregister), [`ok`](https://apiok.ru/dev/app/create#section-2), [`paypal`](https://developer.paypal.com/home/#get-api-credentials), [`qq`](https://wiki.connect.qq.com/__trashed-2), [`reddit`](https://github.com/reddit-archive/reddit/wiki/OAuth2#getting-started), [`steam`](https://partner.steamgames.com/doc/webapi_overview/oauth), [`twitch`](https://dev.twitch.tv/docs/authentication/#registration), [`twitter`](https://developer.twitter.com/en/docs/authentication/oauth-1-0a/api-key-and-secret), [`vimeo`](https://developer.vimeo.com/api/guides/start#register-your-app),[`vk`](https://dev.vk.com/ru/api/getting-started), [`wechat`](https://developers.weixin.qq.com/doc/oplatform/en/Website_App/WeChat_Login/Wechat_Login.html), [`weibo`](https://open.weibo.com/wiki/%E6%8E%88%E6%9D%83%E6%9C%BA%E5%88%B6%E8%AF%B4%E6%98%8E), [`xbox`](https://learn.microsoft.com/en-us/graph/permissions-reference),[ `yahoo`](https://developer.yahoo.com/oauth2/guide), [`yandex`](https://yandex.ru/dev/id/doc/ru/register-client), [`youtube`](https://developers.google.com/youtube/registering_an_application).
         *
         *     If you store user data in [PlayFab](https://developers.xsolla.com/doc/login/integration-guide/connect-users-storage/#login_guide_connect_users_storage_playfab), only `twitch` is available.
         *      */
        provider_name: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Login JWT with refreshed social tokens. */
            token?: string
          }
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Bad Request */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          GettingOAuth20TokenError: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          SocialNetworkIsDisabled: unknown
        }
      }
    }
  }
  'jwt-register-new-user': {
    parameters: {
      query: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        projectId: string
        /** @description URL to redirect the user to after account confirmation, successful authentication, two-factor authentication configuration, or password reset confirmation. Must be identical to the **Callback URL** specified in the **URL** block of [Publisher Account](https://publisher.xsolla.com/). To find it, go to **Login > your Login project** and select the **Callback URLs** section in the upper block of the navigation page. **Required** if there are several Callback URLs. */
        login_url?: string
        /** @description Your custom data. The value of the parameter will be returned in the `payload` claim of the **user JWT**. */
        payload?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description Whether the user gave consent to processing of their personal data. */
          accept_consent?: boolean
          /** @description User email address. */
          email: string
          /** @description Parameters used for [extended registration form](https://developers.xsolla.com/doc/login/features/extended-registration-form/). To use this feature, please contact your Customer Success Manager. */
          fields?: Record<string, never>
          /** @description User password. */
          password: string
          /** @description User consent to receive the newsletter. */
          promo_email_agreement?: number
          /** @description Username. */
          username: string
        }
      }
    }
    responses: {
      /** @description OK (Account confirmation is disabled) */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description URL with the `token` and `remember_me` parameters to redirect the user to after successful registration. The `token` value is the user JWT. */
            login_url?: string
          }
        }
      }
      /** @description No Content (Account confirmation is enabled) */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          UserAlreadyExists: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'jwt-resend-account-confirmation-email': {
    parameters: {
      query: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        projectId: string
        /** @description URL to redirect the user to after account confirmation, successful authentication, two-factor authentication configuration, or password reset confirmation. Must be identical to the **Callback URL** specified in the **URL** block of [Publisher Account](https://publisher.xsolla.com/). To find it, go to **Login > your Login project** and select the **Callback URLs** section in the upper block of the navigation page. **Required** if there are several Callback URLs. */
        login_url?: string
        /** @description Your custom data. The value of the parameter will be returned in the `payload` claim of the **user JWT**. */
        payload?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description Username or user email address. */
          username: string
        }
      }
    }
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          LoginURLIsNotConfiguredForThisProject: unknown
          WrongConfirmationCode: unknown
        }
      }
    }
  }
  'register-new-user-from-server': {
    parameters: {
      query: {
        /** @description Login project ID from [Publisher Account](https://publisher.xsolla.com/). */
        projectId: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description User email address. */
          email?: string
          /** @description User ID from your game. */
          external_account_id?: string
          /** @description User phone number. Is used for authentication via a phone number. */
          phone_number?: string
          /** @description Flag indicates that the phone number has been verified */
          phone_number_verified?: boolean
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description The Xsolla Login user ID. You can find it in **your Login project > Users > Username/ID** section of Publisher Account. */
            user_id: string
          }
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AccessDenied: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidEmailAddress: unknown
          UnavailableProjectMethod: unknown
          UserWithSpecifiedEmailAlreadyExists: unknown
          UserWithSpecifiedPhoneAlreadyExists: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'create-code-for-linking-accounts': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /**
             * @description Code for linking.
             * @example 123456
             */
            code: string
          }
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          UserNotFound: unknown
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          MismatchProjectType: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'link-accounts-by-code': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description Code by which service links accounts. */
          code: string
          /** @description Name of chosen Social Provider. Can be `steam`, `xbox`, `epicgames`. */
          platform: string
          /**
           * Format: uuid
           * @description Shadow Login ID from Publisher Account.
           *
           *     **Shadow Login** is a project which ID you do not need to pass to this call. Contact your Customer Success Manager to set it up.
           *
           */
          project_id?: string
          /** @description Project ID from Publisher Account which you make a request for.
           *
           *     If you specify it, but do not specify the `project_id` parameter, the service will be linked to its `project_id`. Contact your Customer Success Manager to link `project_id` to `publisher_project_id`.
           *      */
          publisher_project_id?: number
          /** @description User ID from Social Provider. */
          user_id: string
        }
      }
    }
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidToken: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          MismatchProjectType: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'link-user-ids-via-external-id': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description User ID from your game. Used as an external ID by which users will be linked. */
          external_account_id: string
          /**
           * Format: uuid
           * @description The Xsolla Login user ID. You can find it in **Publisher Account** > your Login project > **Users** > **Username/ID**.
           */
          user_id: string
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AccessDenied: unknown
          InvalidParameter: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          UserNotFound: unknown
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          ExternalIDAlreadyLinked: unknown
          UserAlreadyHasAnExternalID: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'check-users-age': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /**
           * Format: date
           * @description User’s birth date in the `YYYY-MM-DD` format.
           */
          dob: string
          /**
           * Format: uuid
           * @description Login ID from Publisher Account.
           */
          project_id: string
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Shows whether the user reached the required age or not. The parameter can have the `true` or `false` value. */
            accepted: boolean
          }
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'get-users-ids-by-social-id-and-platform': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /**
           * Format: uuid
           * @description Login ID from Publisher Account.
           */
          project_id?: string
          /** @description Project ID from Publisher Account which you make a request for.
           *
           *     If you specify it, but do not specify `project_id` parameter, service will be found linked to its `project_id`. Contact your Customer Success Manager to link `project_id` to `publisher_project_id`.
           *      */
          publisher_project_id?: number
          /** @description Social ID and platform for which it is needed to get user ID. */
          users: {
            /** @description Name of chosen Social Provider. Can be `steam`, `xbox`, `epicgames`. */
            platform: string
            /** @description User ID from Social Provider. */
            user_id: string
          }[]
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description User email address. */
            email?: string | null
            /** @description User ID from your game. Used as an external ID by which users will be linked. */
            external_account_id?: string | null
            /** @description Name of chosen Social Provider. Can be `steam`, `xbox`, `epicgames`. */
            platform: string
            /** @description User ID from Social Provider. */
            user_id: string
            /** @description The Xsolla Login user ID. You can find it in **Publisher Account** > Login settings > **Users** > **Username/ID**. */
            xl_uid: string | null
          }[]
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidToken: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'auth-by-custom-id': {
    parameters: {
      query?: {
        /** @description Login project ID from Publisher Account. If you do not specify it, [shadow Login](/api/login/overview/#section/Glossary/Shadow-Login-project) will be used for the specified `publisher_project_id` parameter.
         *
         *     Shadow Login ID you do not need to pass to this call.
         *      */
        projectId?: string
        /** @description Your custom data. The value of the parameter will be returned in the `payload` claim of the **user JWT**. */
        payload?: string
        /** @description Project ID from Publisher Account which you make a request for.
         *
         *     If you specify it, but do not specify `project_id` parameter, service will be found linked to its `project_id`. Contact your Customer Success Manager to link `project_id` to `publisher_project_id`.
         *      */
        publisher_project_id?: number
        /** @description Shows whether to deactivate the existing user JWT values and activate the one generated by this call. Can have the following values:
         *     * `1` to deactivate the existing values and activate a new one,
         *     * `0` to keep the existing values activated.
         *      */
        with_logout?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description Optional param. Contains user`s custom attributes that will saved on auth */
          attributes?: {
            /** @enum {string} */
            attr_type: 'client' | 'server'
            key: string
            /** @enum {string} */
            permission: 'public' | 'private'
            read_only?: boolean
            value: Record<string, never>
          }[]
          /** @description Custom ID is generated by your server (it is not Xsolla Login User ID). It should be in secret key. */
          server_custom_id: string
          /** @description Social profile which is needed to be linked to the user. */
          social_profile?: {
            /** @description Name of Social Provider. */
            platform: string
            /** @description User ID from Social Provider. */
            user_id: string
          }
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Xsolla Login user JWT. */
            token: string
          }
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AccessDenied: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          SocialProfileLinkedToAnotherUser: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'get-user-details': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['userInfo']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
    }
  }
  'update-user-details': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description User birth date in the following format: `YYYY-MM-DD`. Can be changed only once.
           *      */
          birthday?: string
          /** @description User first name. */
          first_name?: string
          /** @description User gender. Can be:
           *     * `f` for female
           *     * `m` for male
           *     * `other`
           *     * `prefer not to answer`
           *      */
          gender?: string
          /** @description User last name. */
          last_name?: string
          /** @description User nickname. */
          nickname?: string
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['userInfo']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Forbidden */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameterGender: unknown
        }
      }
    }
  }
  'get-users-devices': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['deviceInfo'][]
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidToken: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'link-device-to-account': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Type of the device. */
        device_type: 'android' | 'ios'
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description Manufacturer and model name of the device. */
          device: string
          /** @description Device ID:
           *     * For Android, it is an [ANDROID_ID](https://developer.android.com/reference/android/provider/Settings.Secure#ANDROID_ID) constant.
           *     * For iOS, it is an [identifierForVendor](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor?language=objc) property.
           *      */
          device_id: string
        }
      }
    }
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidToken: unknown
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          DependencyService: unknown
          InvalidParam: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'unlink-device-from-account': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Device ID of the device you want to unlink. It is generated by the Xsolla Login server. It **is not** the same as the `device_id` parameter from the Auth via device ID ([JWT](https://developers.xsolla.com/api/login/operation/jwt-auth-via-device-id) and [OAuth 2.0](https://developers.xsolla.com/api/login/operation/oauth-20-auth-via-device-id)) call. */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidToken: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          SpecifiedDeviceNotFound: unknown
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          UserHasOnlyOneWayToLogIn: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'get-user-email': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description User email address. */
            current_email: string | null
          }
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
    }
  }
  'add-username-email-auth-to-account': {
    parameters: {
      query?: {
        /** @description URL to redirect the user to after account confirmation, successful authentication, two-factor authentication configuration, or password reset confirmation. Must be identical to the **Callback URL** specified in the **URL** block of [Publisher Account](https://publisher.xsolla.com/). To find it, go to **Login > your Login project** and select the **Callback URLs** section in the upper block of the navigation page. **Required** if there are several Callback URLs. */
        login_url?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /**
           * Format: email
           * @description User email address.
           */
          email: string
          /** @description User password. */
          password: string
          /** @description User consent to receive the newsletter. */
          promo_email_agreement?: number
          /** @description Username. */
          username: string
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Whether the user has to confirm the email address or not. */
            email_confirmation_required: boolean
          }
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidToken: unknown
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          UserWithSpecifiedEmailAlreadyExists: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'get-links-for-social-auth': {
    parameters: {
      query?: {
        /** @description Region in the `<language code>_<country code>` format, where:
         *
         *     * `language code`: language code in the [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format;
         *     * `country code`: country/region code in the [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
         *
         *     The list of the links will be sorted from most to least used social networks, according to the variable value.
         *      */
        locale?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['socialAuthUrl'][]
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
    }
  }
  'get-users-two-factor-authentication-settings': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['mfa'][]
        }
      }
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidToken: unknown
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          UnavailableProjectMethod: unknown
        }
      }
    }
  }
  'update-users-two-factor-authentication-settings': {
    parameters: {
      query?: {
        /** @description URL to redirect the user to after account confirmation, successful authentication, two-factor authentication configuration, or password reset confirmation. Must be identical to the **Callback URL** specified in the **URL** block of [Publisher Account](https://publisher.xsolla.com/). To find it, go to **Login > your Login project** and select the **Callback URLs** section in the upper block of the navigation page. **Required** if there are several Callback URLs. */
        login_url?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /**
           * @description Status of two-factor authentication settings. Set `true` value for enabling, and `false` value otherwise.
           * @default false
           */
          enabled: boolean
          /** @description Region in the `<language code>_<country code>` format, where:
           *     * `language code`: language code in the [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format;
           *     * `country code`: country or region code in the [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
           *      */
          locale?: string
          /**
           * @description Type of the second factor. Can be: `email` or `sms`. You must enable the specified type for the Login project. Contact your Customer Success Manager to set it up.
           *
           * @enum {string}
           */
          mfa_type: 'email' | 'sms'
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidToken: unknown
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'get-user-phone-number': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description User phone number according to [national conventions](https://en.wikipedia.org/wiki/National_conventions_for_writing_telephone_numbers).
             *      */
            phone_number: string
          }
        }
      }
      /** @description No Content (Phone number is empty) */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
    }
  }
  'update-user-phone-number': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description Updated user phone number according to [national conventions](https://en.wikipedia.org/wiki/National_conventions_for_writing_telephone_numbers).
           *      */
          phone_number: string
        }
      }
    }
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description (Unprocessable Entity) Semantic errors in the request */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
    }
  }
  'delete-user-phone-number': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description User phone number according to [national conventions](https://en.wikipedia.org/wiki/National_conventions_for_writing_telephone_numbers).
         *      */
        phoneNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
    }
  }
  'upload-user-picture': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: {
      content: {
        'multipart/form-data': {
          /**
           * Format: binary
           * @description User profile picture in the binary format.
           */
          picture?: string
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description CDN link with the user image. */
            picture: string
          }
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
    }
  }
  'delete-user-picture': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
    }
  }
  'get-users-friends': {
    parameters: {
      query: {
        /** @description Parameter that is used for API pagination. */
        after?: string
        /** @description Maximum number of users that are returned at a time. */
        limit?: number
        /** @description Friends type. Can be:
         *     * `friends` to get the list of the users added to the friend list
         *     * `friend_requested` to get the list of the users to who got the friend request
         *     * `friend_requested_by` to get the list of the users from who sent a friend request
         *     * `blocked` to get the list of the users added to the friend list, but blocked
         *     * `blocked_by` to get the list of the users who blocked this user
         *      */
        type: 'friends' | 'friend_requested' | 'friend_requested_by' | 'blocked' | 'blocked_by'
        /** @description Condition for sorting the users. Can be:
         *     * `by_nickname` to sort the list alphabetically by the nickname
         *     * `by_updated` to sort the list by the date when users recently added someone to their friend list or blocked them
         *      */
        sort_by: 'by_nickname' | 'by_updated'
        /** @description Condition for sorting the list of users. Can be:
         *     * `asc` to apply the `sort_by` value in ascending order
         *     * `desc` to apply the `sort_by` value in descending order
         *      */
        sort_order: 'asc' | 'desc'
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Value of the `after` parameter that should be passed while requesting this call for the next time. */
            next_after: string
            /** @description URL of the request for using this call for the next time. */
            next_url: string
            /** @description Friends details. */
            relationships: components['schemas']['relationship'][]
          }
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
    }
  }
  'update-users-friends': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /**
           * @description Type of the action. Can be:
           *
           *     * `friend_request_add` to send a friend request,
           *     * `friend_request_cancel` to cancel the friend request that was sent,
           *     * `friend_request_approve` to confirm the friend request,
           *     * `friend_request_deny` to cancel the friend request that was received,
           *     * `friend_remove` to delete the user from the friend list,
           *     * `block` to block the user,
           *     * `unblock` to unblock the user.
           *
           * @enum {string}
           */
          action?:
            | 'friend_request_add'
            | 'friend_request_cancel'
            | 'friend_request_approve'
            | 'friend_request_deny'
            | 'friend_remove'
            | 'block'
            | 'unblock'
          /**
           * Format: uuid
           * @description ID of the user to change relationship with.
           */
          user?: string
        }
      }
    }
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
    }
  }
  'get-social-account-friends': {
    parameters: {
      query?: {
        /** @description Name of the chosen social provider which you can enable in your [Publisher Account](https://publisher.xsolla.com/) > your Login project > **Social connections**. If you do not specify it, the call gets friends from all social providers. */
        platform?: 'steam' | 'xbox' | 'twitter' | 'facebook' | 'vk'
        /** @description Number of the elements from which the list is generated. */
        offset?: number
        /** @description Maximum number of friends that are returned at a time. */
        limit?: number
        /** @description Shows whether the social friends are from your game. */
        with_xl_uid?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['socialFriendsResponse200']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidToken: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'update-social-account-friends': {
    parameters: {
      query?: {
        /** @description Name of the chosen social provider which you can enable in your [Publisher Account](https://publisher.xsolla.com/) > your Login project > **Social connections**. If you do not specify it, the call gets friends from all social providers. */
        platform?: 'steam' | 'xbox' | 'twitter' | 'facebook' | 'vk'
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidToken: unknown
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          UnavailableProjectMethod: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
  'get-linked-networks': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['socialProvider'][]
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
    }
  }
  'delete-linked-networks': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Name of the social network connected to Login in Publisher Account. Can be:
         *       Name of the social network connected to Login in Publisher Account. Can be: [`amazon`](https://developer.amazon.com/docs/), [`apple`](https://developer.apple.com/documentation/sign_in_with_apple/sign_in_with_apple_rest_api/authenticating_users_with_sign_in_with_apple), [`babka`](/doc/login/how-to/xsolla-account-login/#login_babka_button_integration_oauth_client_creation), [`baidu`](https://developer.baidu.com/wiki/index.php?title=docs/oauth/client), [`battlenet`](https://develop.battle.net/documentation/guides/using-oauth/client-credentials-flow), [`discord`](https://discord.com/developers/docs/topics/oauth2), [`epicgames`](https://dev.epicgames.com/docs/dev-portal/client-credentials), [`facebook`](https://developers.facebook.com/docs/facebook-login/guides/advanced/manual-flow/), [`github`](https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps), [`google`](https://developers.google.com/identity/protocols/oauth2),[`kakao`](https://developers.kakao.com/docs/latest/en/kakaologin/common), [`linkedin`](https://learn.microsoft.com/en-us/linkedin/shared/authentication/client-credentials-flow), [`mailru`](https://help.mail.ru/developers/oauth/settings), [`microsoft`](https://learn.microsoft.com/en-us/graph/permissions-reference), [`msn`](https://learn.microsoft.com/en-us/graph/permissions-reference), [`naver`](https://developers.naver.com/docs/common/openapiguide/appregister), [`ok`](https://apiok.ru/dev/app/create#section-2), [`paypal`](https://developer.paypal.com/home/#get-api-credentials), [`qq`](https://wiki.connect.qq.com/__trashed-2), [`reddit`](https://github.com/reddit-archive/reddit/wiki/OAuth2#getting-started), [`steam`](https://partner.steamgames.com/doc/webapi_overview/oauth), [`twitch`](https://dev.twitch.tv/docs/authentication/#registration), [`twitter`](https://developer.twitter.com/en/docs/authentication/oauth-1-0a/api-key-and-secret), [`vimeo`](https://developer.vimeo.com/api/guides/start#register-your-app),[`vk`](https://dev.vk.com/ru/api/getting-started), [`wechat`](https://developers.weixin.qq.com/doc/oplatform/en/Website_App/WeChat_Login/Wechat_Login.html), [`weibo`](https://open.weibo.com/wiki/%E6%8E%88%E6%9D%83%E6%9C%BA%E5%88%B6%E8%AF%B4%E6%98%8E), [`xbox`](https://learn.microsoft.com/en-us/graph/permissions-reference),[ `yahoo`](https://developer.yahoo.com/oauth2/guide), [`yandex`](https://yandex.ru/dev/id/doc/ru/register-client), [`youtube`](https://developers.google.com/youtube/registering_an_application).
         *
         *     If you store user data in [PlayFab](https://developers.xsolla.com/doc/login/integration-guide/connect-users-storage/#login_guide_connect_users_storage_playfab), only `twitch` is available.
         *      */
        providerName: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          UserHasOnlyOneWayToLogIn: unknown
        }
      }
    }
  }
  'link-social-network-to-account': {
    parameters: {
      query?: {
        /** @description URL to redirect the user to after account confirmation, successful authentication, two-factor authentication configuration, or password reset confirmation. Must be identical to the **Callback URL** specified in the **URL** block of [Publisher Account](https://publisher.xsolla.com/). To find it, go to **Login > your Login project > General settings**. **Required** if there are several Callback URLs. */
        login_url?: string
      }
      header?: never
      path: {
        /** @description Name of the social network connected to Login in Publisher Account. Can be:
         *       Name of the social network connected to Login in Publisher Account. Can be: [`amazon`](https://developer.amazon.com/docs/), [`apple`](https://developer.apple.com/documentation/sign_in_with_apple/sign_in_with_apple_rest_api/authenticating_users_with_sign_in_with_apple), [`babka`](/doc/login/how-to/xsolla-account-login/#login_babka_button_integration_oauth_client_creation), [`baidu`](https://developer.baidu.com/wiki/index.php?title=docs/oauth/client), [`battlenet`](https://develop.battle.net/documentation/guides/using-oauth/client-credentials-flow), [`discord`](https://discord.com/developers/docs/topics/oauth2), [`epicgames`](https://dev.epicgames.com/docs/dev-portal/client-credentials), [`facebook`](https://developers.facebook.com/docs/facebook-login/guides/advanced/manual-flow/), [`github`](https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps), [`google`](https://developers.google.com/identity/protocols/oauth2),[`kakao`](https://developers.kakao.com/docs/latest/en/kakaologin/common), [`linkedin`](https://learn.microsoft.com/en-us/linkedin/shared/authentication/client-credentials-flow), [`mailru`](https://help.mail.ru/developers/oauth/settings), [`microsoft`](https://learn.microsoft.com/en-us/graph/permissions-reference), [`msn`](https://learn.microsoft.com/en-us/graph/permissions-reference), [`naver`](https://developers.naver.com/docs/common/openapiguide/appregister), [`ok`](https://apiok.ru/dev/app/create#section-2), [`paypal`](https://developer.paypal.com/home/#get-api-credentials), [`qq`](https://wiki.connect.qq.com/__trashed-2), [`reddit`](https://github.com/reddit-archive/reddit/wiki/OAuth2#getting-started), [`steam`](https://partner.steamgames.com/doc/webapi_overview/oauth), [`twitch`](https://dev.twitch.tv/docs/authentication/#registration), [`twitter`](https://developer.twitter.com/en/docs/authentication/oauth-1-0a/api-key-and-secret), [`vimeo`](https://developer.vimeo.com/api/guides/start#register-your-app),[`vk`](https://dev.vk.com/ru/api/getting-started), [`wechat`](https://developers.weixin.qq.com/doc/oplatform/en/Website_App/WeChat_Login/Wechat_Login.html), [`weibo`](https://open.weibo.com/wiki/%E6%8E%88%E6%9D%83%E6%9C%BA%E5%88%B6%E8%AF%B4%E6%98%8E), [`xbox`](https://learn.microsoft.com/en-us/graph/permissions-reference),[ `yahoo`](https://developer.yahoo.com/oauth2/guide), [`yandex`](https://yandex.ru/dev/id/doc/ru/register-client), [`youtube`](https://developers.google.com/youtube/registering_an_application).
         *
         *     If you store user data in [PlayFab](https://developers.xsolla.com/doc/login/integration-guide/connect-users-storage/#login_guide_connect_users_storage_playfab), only `twitch` is available.
         *      */
        providerName: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Redirection */
      302: {
        headers: {
          /** @description URL to authenticate the user via the social network. */
          Location?: string
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
    }
  }
  'get-url-to-link-social-network-to-account': {
    parameters: {
      query?: {
        /** @description URL to redirect the user to after account confirmation, successful authentication, two-factor authentication configuration, or password reset confirmation. Must be identical to the **Callback URL** specified in the **URL** block of [Publisher Account](https://publisher.xsolla.com/). To find it, go to **Login > your Login project > General settings**. **Required** if there are several Callback URLs. */
        login_url?: string
      }
      header?: never
      path: {
        /** @description Name of the social network connected to Login in Publisher Account. Can be:
         *       Name of the social network connected to Login in Publisher Account. Can be: [`amazon`](https://developer.amazon.com/docs/), [`apple`](https://developer.apple.com/documentation/sign_in_with_apple/sign_in_with_apple_rest_api/authenticating_users_with_sign_in_with_apple), [`babka`](/doc/login/how-to/xsolla-account-login/#login_babka_button_integration_oauth_client_creation), [`baidu`](https://developer.baidu.com/wiki/index.php?title=docs/oauth/client), [`battlenet`](https://develop.battle.net/documentation/guides/using-oauth/client-credentials-flow), [`discord`](https://discord.com/developers/docs/topics/oauth2), [`epicgames`](https://dev.epicgames.com/docs/dev-portal/client-credentials), [`facebook`](https://developers.facebook.com/docs/facebook-login/guides/advanced/manual-flow/), [`github`](https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps), [`google`](https://developers.google.com/identity/protocols/oauth2),[`kakao`](https://developers.kakao.com/docs/latest/en/kakaologin/common), [`linkedin`](https://learn.microsoft.com/en-us/linkedin/shared/authentication/client-credentials-flow), [`mailru`](https://help.mail.ru/developers/oauth/settings), [`microsoft`](https://learn.microsoft.com/en-us/graph/permissions-reference), [`msn`](https://learn.microsoft.com/en-us/graph/permissions-reference), [`naver`](https://developers.naver.com/docs/common/openapiguide/appregister), [`ok`](https://apiok.ru/dev/app/create#section-2), [`paypal`](https://developer.paypal.com/home/#get-api-credentials), [`qq`](https://wiki.connect.qq.com/__trashed-2), [`reddit`](https://github.com/reddit-archive/reddit/wiki/OAuth2#getting-started), [`steam`](https://partner.steamgames.com/doc/webapi_overview/oauth), [`twitch`](https://dev.twitch.tv/docs/authentication/#registration), [`twitter`](https://developer.twitter.com/en/docs/authentication/oauth-1-0a/api-key-and-secret), [`vimeo`](https://developer.vimeo.com/api/guides/start#register-your-app),[`vk`](https://dev.vk.com/ru/api/getting-started), [`wechat`](https://developers.weixin.qq.com/doc/oplatform/en/Website_App/WeChat_Login/Wechat_Login.html), [`weibo`](https://open.weibo.com/wiki/%E6%8E%88%E6%9D%83%E6%9C%BA%E5%88%B6%E8%AF%B4%E6%98%8E), [`xbox`](https://learn.microsoft.com/en-us/graph/permissions-reference),[ `yahoo`](https://developer.yahoo.com/oauth2/guide), [`yandex`](https://yandex.ru/dev/id/doc/ru/register-client), [`youtube`](https://developers.google.com/youtube/registering_an_application).
         *
         *     If you store user data in [PlayFab](https://developers.xsolla.com/doc/login/integration-guide/connect-users-storage/#login_guide_connect_users_storage_playfab), only `twitch` is available.
         *      */
        providerName: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description URL to authenticate the user via the social network. */
            url: string
          }
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
    }
  }
  'search-users-by-admin': {
    parameters: {
      query?: {
        /** @description User's UUID identifier */
        id?: string
        /** @description User's email address */
        email?: string
        /** @description User's phone number */
        phone?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Search results */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['user'][]
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidParameters: unknown
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InactiveUser: unknown
          WrongUsernameOrPassword: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
    }
  }
  'search-users-by-nickname': {
    parameters: {
      query: {
        /** @description The search string that may contain:
         *     * nickname only. Search is performed by substring at the beginning of the nickname.
         *     * tag only, is used with "#" at the beginning. Search is performed by substring at the beginning of the tag.
         *     * nickname and tag together, is used with "#" and without space. Search is performed by full nickname and substring at the beginning of the tag.
         *      */
        nickname: string
        /** @description Number of the elements from which the list is generated. */
        offset?: number
        /** @description Maximum number of users that are returned at a time. */
        limit?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['searchUserInfo']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidToken: unknown
        }
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          NicknameMissedInTheQuery: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
        }
      }
    }
  }
  'get-user-public-profile': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description User ID. You can find it in [Publisher Account](https://publisher.xsolla.com/) > your Login project > **Users**. */
        user_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['publicUserInfo']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          InvalidToken: unknown
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          UserNotFound: unknown
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['errorResult']
          AllowableNumberOfRequestsExceeded: unknown
        }
      }
    }
  }
}
