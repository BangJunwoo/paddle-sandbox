/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/v2/project/{project_id}/admin/attribute': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get list of attributes for administration
     * @description Gets the list of attributes from a project for administration.
     *
     */
    get: operations['admin-get-attribute-list']
    put?: never
    /**
     * Create attribute
     * @description Creates an attribute.
     *
     */
    post: operations['admin-create-attribute']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/attribute/{external_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get specified attribute
     * @description Gets a specified attribute.
     */
    get: operations['admin-get-attribute']
    /**
     * Update attribute
     * @description Updates an attribute.
     *
     */
    put: operations['admin-update-attribute']
    post?: never
    /**
     * Delete attribute
     * @description Deletes an attribute.
     *
     */
    delete: operations['delete-attribute']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/attribute/{external_id}/value': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create attribute value
     * @description Creates an attribute value.
     *
     *     <div class="notice"><strong>Attention</strong><br><br>All projects have the limitation to the number of attribute values. The default and maximum value is <strong>20 values per attribute.</strong></div>
     *
     */
    post: operations['admin-create-attribute-value']
    /**
     * Delete all values of attribute
     * @description Deletes all values of the attribute.
     */
    delete: operations['admin-delete-all-attribute-value']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/attribute/{external_id}/value/{value_external_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update attribute value
     * @description Updates an attribute values.
     */
    put: operations['admin-update-attribute-value']
    post?: never
    /**
     * Delete attribute value
     * @description Deletes an attribute value.
     */
    delete: operations['admin-delete-attribute-value']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/user/attribute/rule': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get list of catalog filter rules
     * @description Gets all rules applying to user attributes.
     *
     */
    get: operations['get-filter-rules']
    put?: never
    /**
     * Create catalog filter rule
     * @description Create rule for user attributes.
     *
     */
    post: operations['create-filter-rule']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/user/attribute/rule/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all catalog rules for searching on client-side
     * @description Gets a list of all catalog rules for searching on the client-side.
     *     <div class="notice"><strong>Attention</strong><br><br>Returns only rule id, name and is_enabled</div>
     *
     */
    get: operations['get-all-filter-rules']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/user/attribute/rule/{rule_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get catalog filter rule
     * @description Get specific rule applying to user attributes.
     *
     */
    get: operations['get-filter-rule-by-id']
    /**
     * Update catalog filter rule
     * @description Updates a specific rule applying to user attributes. The default value will be used for a not specified property (if property is not required).
     *
     */
    put: operations['update-filter-rule-by-id']
    post?: never
    /**
     * Delete catalog filter rule
     * @description Deletes a specific rule.
     *
     */
    delete: operations['delete-filter-rule-by-id']
    options?: never
    head?: never
    /**
     * Patch catalog filter rule
     * @description Updates a specific rule applying to user attributes. The current value will be used for a not specified property.
     *
     */
    patch: operations['patch-filter-rule-by-id']
    trace?: never
  }
  '/v2/project/{project_id}/admin/items/bundle': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get list of bundles for administration
     * @description Gets the list of bundles within a project for administration.
     *
     *     <div class="note"><b>Note</b><br><br>Do not use this endpoint for building a store catalog.</div>
     *
     */
    get: operations['admin-get-bundle-list']
    put?: never
    /**
     * Create bundle
     * @description Creates a bundle.
     *
     */
    post: operations['admin-create-bundle']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/items/bundle/group/id/{group_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get list of bundles by specified group id
     * @description Gets the list of bundles within a group for administration.
     *
     *     <div class="note"><b>Note</b><br><br>Do not use this endpoint for building a store catalog.</div>
     *
     */
    get: operations['admin-get-bundle-list-in-group-by-id']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/items/bundle/group/external_id/{external_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get list of bundles by specified group external id
     * @description Gets the list of bundles within a group for administration.
     *
     *     <div class="note"><b>Note</b><br><br>Do not use this endpoint for building a store catalog.</div>
     *
     */
    get: operations['admin-get-bundle-list-in-group-by-external-id']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/items/bundle/sku/{sku}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get bundle
     * @description Gets the bundle within a project for administration.
     *
     *     <div class="note"><b>Note</b><br><br>Do not use this endpoint for building a store catalog.</div>
     *
     */
    get: operations['admin-get-bundle']
    /**
     * Update bundle
     * @description Updates a bundle.
     *
     */
    put: operations['admin-update-bundle']
    post?: never
    /**
     * Delete bundle
     * @description Deletes a bundle.
     *
     */
    delete: operations['admin-delete-bundle']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/items/bundle/sku/{sku}/show': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Show bundle in catalog
     * @description Shows a bundle in a catalog.
     *
     */
    put: operations['admin-show-bundle']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/items/bundle/sku/{sku}/hide': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Hide bundle in catalog
     * @description Hides a bundle in a catalog.
     *
     */
    put: operations['admin-hide-bundle']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/items/bundle': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get list of bundles
     * @description Gets a list of bundles for building a catalog.
     *
     *     <div class="notice"><strong>Attention</strong><br><br>All projects have the limitation to the number of items that you can get in the response. The default and maximum value is <strong>50 items per response.</strong></div> <br> <div class="note"><b>Note</b><br><br>In general, the use of catalog of items is available without authorization.<br> Only authorized users can get <a href="https://developers.xsolla.com/doc/in-game-store/features/personalization/" target="_blank">a personalized catalog.</a></div>
     *
     */
    get: operations['get-bundle-list']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/items/bundle/sku/{sku}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get specified bundle
     * @description Gets a specified bundle.
     *
     *     <div class="note"><b>Note</b><br><br>This endpoint, accessible without authorization,  returns generic data. However, authorization enriches the response with user-specific  details for a personalized result, such as available user limits and promotions.</div>
     */
    get: operations['get-bundle']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/items/bundle/group/{external_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get list of bundles by specified group
     * @description Gets a list of bundles within a group for building a catalog.
     *
     *     <div class="notice"><strong>Attention</strong><br><br>All projects have the limitation to the number of items that you can get in the response. The default and maximum value is <strong>50 items per response.</strong></div> <br> <div class="note"><b>Note</b><br><br>In general, the use of catalog of items is available without authorization.<br> Only authorized users can get <a href="https://developers.xsolla.com/doc/in-game-store/features/personalization/" target="_blank">a personalized catalog.</a></div>
     *
     */
    get: operations['get-bundle-list-in-group']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/cart/{cart_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get cart by cart ID
     * @description Returns user’s cart by cart ID.
     */
    get: operations['get-cart-by-id']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/cart': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get current user's cart
     * @description Returns the current user's cart.
     */
    get: operations['get-user-cart']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/cart/{cart_id}/clear': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Delete all cart items by cart ID
     * @description Deletes all cart items.
     */
    put: operations['cart-clear-by-id']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/cart/clear': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Delete all cart items from current cart
     * @description Deletes all cart items.
     */
    put: operations['cart-clear']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/cart/fill': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Fill cart with items
     * @description Fills the cart with items. If the cart already has an item with the same SKU, the existing item will be replaced by the passed value.
     */
    put: operations['cart-fill']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/cart/{cart_id}/fill': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Fill specific cart with items
     * @description Fills the specific cart with items. If the cart already has an item with the same SKU, the existing item position will be replaced by the passed value.
     */
    put: operations['cart-fill-by-id']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/cart/{cart_id}/item/{item_sku}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update cart item by cart ID
     * @description Updates an existing cart item or creates the one in the cart.
     */
    put: operations['put-item-by-cart-id']
    post?: never
    /**
     * Delete cart item by cart ID
     * @description Removes an item from the cart.
     */
    delete: operations['delete-item-by-cart-id']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/cart/item/{item_sku}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update cart item from current cart
     * @description Updates an existing cart item or creates the one in the cart.
     */
    put: operations['put-item']
    post?: never
    /**
     * Delete cart item from current cart
     * @description Removes an item from the cart.
     */
    delete: operations['delete-item']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/payment/cart/{cart_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create order with all items from particular cart
     * @description Creates an order with all items from the particular cart. The created order will get a `new` order status.
     *
     *     To open the payment UI in a new window, use the following link: `https://secure.xsolla.com/paystation2/?access_token=ACCESS_TOKEN`, where `ACCESS_TOKEN` is the received token.
     *
     *     For testing purposes, use this URL: `https://sandbox-secure.xsolla.com/paystation2/?access_token=ACCESS_TOKEN`.
     *
     */
    post: operations['create-order-by-cart-id']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/payment/cart': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create order with all items from current cart
     * @description Creates an order with all items from the cart. The created order will get a `new` order status.
     *
     *     To open the payment UI in a new window, use the following link: `https://secure.xsolla.com/paystation2/?access_token=ACCESS_TOKEN`, where `ACCESS_TOKEN` is the received token.
     *
     *     For testing purposes, use this URL: `https://sandbox-secure.xsolla.com/paystation2/?access_token=ACCESS_TOKEN`.
     *
     */
    post: operations['create-order']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/payment/item/{item_sku}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create order with specified item
     * @description Creates an order with a specified item. The created order will get a `new` order status.
     *
     *     To open the payment UI in a new window, use the following link: `https://secure.xsolla.com/paystation2/?access_token=ACCESS_TOKEN`, where `ACCESS_TOKEN` is the received token.
     *
     *     For testing purposes, use this URL: `https://sandbox-secure.xsolla.com/paystation2/?access_token=ACCESS_TOKEN`.
     *
     */
    post: operations['create-order-with-item']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/free/cart': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create order with free cart
     * @description Creates an order with all items from the free cart. The created order will get a `done` order status.
     *
     */
    post: operations['create-free-order']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/free/cart/{cart_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create order with particular free cart
     * @description Creates an order with all items from the particular free cart. The created order will get a `done` order status.
     *
     */
    post: operations['create-free-order-by-cart-id']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/free/item/{item_sku}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create order with specified free item
     * @description Creates an order with a specified free item. The created order will get a `done` order status.
     *
     */
    post: operations['create-free-order-with-item']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/order/{order_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get order
     * @description Retrieves a specified order.
     */
    get: operations['get-order']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/payment/token': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create payment token for purchase
     * @description Generates an order and a payment token for it. The order is generated based on the items passed in the request body.
     */
    post: operations['admin-create-payment-token']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/admin/project/{project_id}/cart/fill': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Fill cart with items and prices
     * @description Fills the current cart with items. If the cart already has an item with the same SKU, the existing item will be replaced by the passed value.
     *
     */
    put: operations['admin-cart-fill']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/admin/project/{project_id}/cart/{cart_id}/fill': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Fill cart by cart ID with items and prices
     * @description Fills the cart by cart ID with items. If the cart already has an item with the same SKU, the existing item will be replaced by the passed value.
     *
     */
    put: operations['admin-fill-cart-by-id']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/webhook': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get information about webhook settings
     * @description Gets the information about the webhook settings in Store.
     *     [Check webhooks documentation](https://developers.xsolla.com/doc/in-game-store/integration-guide/set-up-webhooks/) to learn more.
     *
     */
    get: operations['get-webhook']
    /**
     * Update information about webhook settings
     * @description Updates the information about the webhook settings in Store.
     *     [Check webhooks documentation](https://developers.xsolla.com/doc/in-game-store/integration-guide/set-up-webhooks/) to learn more.
     *
     */
    put: operations['update-webhook']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/items/pre_order/limit/item/sku/{item_sku}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get information about item pre-order limit
     * @description Get pre-order limit of the item.
     *
     *     Pre-Order limit API allows you to sell an item in a limited quantity. For configuring the pre-order itself, go to the Admin section of the desired item module:
     *     * [Game Keys](https://developers.xsolla.com/api/igs-bb/operation/admin-create-game/)
     *     * [Virtual Items & Currency](https://developers.xsolla.com/api/igs-bb/operation/admin-get-virtual-items-list/)
     *     * [Bundles](https://developers.xsolla.com/api/igs-bb/operation/admin-get-bundle-list/)
     *
     *     Aliases for this endpoint:
     *     * /v2/project/{project_id}/admin/items/pre_order/limit/item/id/{item_id}
     *
     */
    get: operations['get-pre-order-limit']
    /**
     * Set quantity of item pre-order limit
     * @description Set quantity of pre-order limit of the item.
     *
     *     Pre-Order limit API allows you to sell an item in a limited quantity. For configuring the pre-order itself, go to the Admin section of the desired item module:
     *     * [Game Keys](https://developers.xsolla.com/api/igs-bb/operation/admin-create-game/)
     *     * [Virtual Items & Currency](https://developers.xsolla.com/api/igs-bb/operation/admin-get-virtual-items-list/)
     *     * [Bundles](https://developers.xsolla.com/api/igs-bb/operation/admin-get-bundle-list/)
     *
     *     Aliases for this endpoint:
     *     * /v2/project/{project_id}/admin/items/pre_order/limit/item/id/{item_id}
     *
     */
    put: operations['set-pre-order-limit']
    /**
     * Add quantity to item pre-order limit
     * @description Add quantity to pre-order limit of the item.
     *
     *     Pre-Order limit API allows you to sell an item in a limited quantity. For configuring the pre-order itself, go to the Admin section of the desired item module:
     *     * [Game Keys](https://developers.xsolla.com/api/igs-bb/operation/admin-create-game/)
     *     * [Virtual Items & Currency](https://developers.xsolla.com/api/igs-bb/operation/admin-get-virtual-items-list/)
     *     * [Bundles](https://developers.xsolla.com/api/igs-bb/operation/admin-get-bundle-list/)
     *
     *     Aliases for this endpoint:
     *     * /v2/project/{project_id}/admin/items/pre_order/limit/item/id/{item_id}
     *
     */
    post: operations['add-pre-order-limit']
    /**
     * Remove quantity of item pre-order limit
     * @description Remove quantity of pre-order limit of the item.
     *
     *     Pre-Order limit API allows you to sell an item in a limited quantity. For configuring the pre-order itself, go to the Admin section of the desired item module:
     *     * [Game Keys](https://developers.xsolla.com/api/igs-bb/operation/admin-create-game/)
     *     * [Virtual Items & Currency](https://developers.xsolla.com/api/igs-bb/operation/admin-get-virtual-items-list/)
     *     * [Bundles](https://developers.xsolla.com/api/igs-bb/operation/admin-get-bundle-list/)
     *
     *     Aliases for this endpoint:
     *     * /v2/project/{project_id}/admin/items/pre_order/limit/item/id/{item_id}
     *
     */
    delete: operations['remove-pre-order-limit']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/items/pre_order/limit/item/sku/{item_sku}/toggle': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Toggle item's pre-order limit
     * @description Enable/disable pre-order limit of the item.
     *
     *     Pre-Order limit API allows you to sell an item in a limited quantity. For configuring the pre-order itself, go to the admin section of the desired item module:
     *     * [Game Keys](https://developers.xsolla.com/api/igs-bb/operation/admin-create-game/)
     *     * [Virtual Items & Currency](https://developers.xsolla.com/api/igs-bb/operation/admin-get-virtual-items-list/)
     *     * [Bundles](https://developers.xsolla.com/api/igs-bb/operation/admin-get-bundle-list/)
     *
     *     Aliases for this endpoint:
     *     * /v2/project/{project_id}/admin/items/pre_order/limit/item/id/{item_id}/toggle
     *
     */
    put: operations['toggle-pre-order-limit']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/items/pre_order/limit/item/sku/{item_sku}/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Remove all quantity of item pre-order limit
     * @description Remove all quantity of pre-order limit of the item.
     *
     *     Pre-Order limit API allows you to sell an item in a limited quantity. For configuring the pre-order itself, go to the admin section of the desired item module:
     *     * [Game Keys](https://developers.xsolla.com/api/igs-bb/operation/admin-create-game/)
     *     * [Virtual Items & Currency](https://developers.xsolla.com/api/igs-bb/operation/admin-get-virtual-items-list/)
     *     * [Bundles](https://developers.xsolla.com/api/igs-bb/operation/admin-get-bundle-list/)
     *
     *     Aliases for this endpoint:
     *     * /v2/project/{project_id}/admin/items/pre_order/limit/item/id/{item_id}/all
     *
     */
    delete: operations['remove-all-pre-order-limit']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/merchant/{merchant_id}/projects': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get projects
     * @description Gets the list of merchant's projects.
     *
     */
    get: operations['get-projects']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/items/game': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get games list
     * @description Gets a games list for building a catalog.
     *
     *     <div class="notice"><strong>Attention</strong><br><br>All projects have the limitation to the number of items that you can get in the response. The default and maximum value is <strong>50 items per response.</strong> To get more data page by page, use <b>limit</b> and <b>offset</b> fields.</div> <br> <div class="note"><b>Note</b><br><br>In general, the use of catalog of items is available without authorization.<br> Only authorized users can get <a href="https://developers.xsolla.com/doc/in-game-store/features/personalization/" target="_blank">a personalized catalog.</a></div>
     *
     */
    get: operations['get-games-list']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/items/game/group/{external_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get games list by specified group
     * @description Gets a games list from the specified group for building a catalog.
     *
     *     <div class="notice"><strong>Attention</strong><br><br>All projects have the limitation to the number of items that you can get in the response. The default and maximum value is <strong>50 items per response.</strong> To get more data page by page, use <b>limit</b> and <b>offset</b> fields.</div>
     *
     */
    get: operations['get-games-group']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/items/game/sku/{item_sku}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get game for catalog
     * @description Gets a game for the catalog.
     *
     *     <div class="note"><b>Note</b><br><br>This endpoint, accessible without authorization,  returns generic data. However, authorization enriches the response with user-specific  details for a personalized result, such as available user limits and promotions.</div>
     */
    get: operations['get-game-by-sku']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/items/game/key/sku/{item_sku}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get game key for catalog
     * @description Gets a game key for the catalog.
     *
     *     <div class="note"><b>Note</b><br><br>This endpoint, accessible without authorization,  returns generic data. However, authorization enriches the response with user-specific  details for a personalized result, such as available user limits and promotions.</div>
     */
    get: operations['get-game-key-by-sku']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/items/game/key/group/{external_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get game keys list by specified group
     * @description Gets a game key list from the specified group for building a catalog.
     *
     *     <div class="notice"><strong>Attention</strong><br><br>All projects have the limitation to the number of items that you can get in the response. The default and maximum value is <strong>50 items per response.</strong> To get more data page by page, use <b>limit</b> and <b>offset</b> fields.</div>
     *
     */
    get: operations['get-game-keys-group']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/items/game/drm': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get DRM list
     * @description Gets the list of available DRMs.
     */
    get: operations['get-drm-list']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/items/game': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get list of games for administration
     * @description Gets the list of games within a project for administration.
     *     Game consists of game keys which could be purchased by a user.
     *
     *     <div class="note"><b>Note</b><br><br>Do not use this endpoint for building a store catalog.</div>
     *
     */
    get: operations['admin-get-game-list']
    put?: never
    /**
     * Create game
     * @description Creates a game in the project.
     *
     */
    post: operations['admin-create-game']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/items/game/sku/{item_sku}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get game for administration
     * @description Gets a game for administration.
     *     Game consists of game keys which could be purchased by a user.
     *
     *     <div class="note"><b>Note</b><br><br>Do not use this endpoint for building a store catalog.</div>
     *
     */
    get: operations['admin-get-game-by-sku']
    /**
     * Update game by SKU
     * @description Updates a game in the project by SKU.
     *
     */
    put: operations['admin-update-game-by-sku']
    post?: never
    /**
     * Delete game by SKU
     * @description Deletes a game in the project by SKU.
     *
     */
    delete: operations['admin-delete-game-by-sku']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/items/game/id/{item_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get game for administration by ID
     * @description Gets a game for administration.
     *     Game consists of game keys which could be purchased by a user.
     *
     *     <div class="note"><b>Note</b><br><br>Do not use this endpoint for building a store catalog.</div>
     *
     */
    get: operations['admin-get-game-by-id']
    /**
     * Update game by ID
     * @description Updates a game in the project by ID.
     *
     */
    put: operations['admin-update-game-by-id']
    post?: never
    /**
     * Delete game by ID
     * @description Deletes a game in the project by ID.
     *
     */
    delete: operations['admin-delete-game-by-id']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/items/game/key/upload/sku/{item_sku}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Upload codes
     * @description Uploads codes by game key SKU.
     */
    post: operations['admin-upload-codes-by-sku']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/items/game/key/upload/id/{item_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Upload codes by ID
     * @description Uploads codes by game key ID.
     */
    post: operations['admin-upload-codes-by-id']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/items/game/key/upload/session/{session_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get codes loading session information
     * @description Gets codes loading session information.
     */
    get: operations['admin-get-codes-session']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/items/game/key/request/sku/{item_sku}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get codes
     * @description Gets a certain number of codes by game key SKU.
     */
    get: operations['admin-get-codes-by-sku']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/items/game/key/request/id/{item_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get codes by ID
     * @description Gets a certain number of codes by game key ID.
     */
    get: operations['admin-get-codes-by-id']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/items/game/key/delete/sku/{item_sku}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Delete codes
     * @description Deletes all codes by game key SKU.
     */
    delete: operations['admin-delete-codes-by-sku']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/items/game/key/delete/id/{item_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Delete codes by ID
     * @description Deletes all codes by game key ID.
     */
    delete: operations['admin-delete-codes-by-id']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/entitlement': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get list of games owned by user
     * @description Get the list of games owned by the user. The response will contain an array of games owned by a particular user.
     *
     *     <div class="notice"><strong>Attention</strong><br><br>All projects have the limitation to the number of items that you can get in the response. The default and maximum value is <strong>50 items per response.</strong> To get more data page by page, use <b>limit</b> and <b>offset</b> fields.</div>
     *
     */
    get: operations['get-user-games']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/entitlement/redeem': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Redeem game code by client
     * @description Grants entitlement by a provided game code.
     *
     *     <div class="notice"><strong>Attention</strong><br><br>You can redeem codes only for the DRM-free platform.</div>
     *
     */
    post: operations['redeem-game-pin-code']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/entitlement/grant': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Grant entitlement (admin)
     * @description Grants entitlement to user.
     *
     *     <div class="notice"><strong>Attention</strong><br><br>Game codes or games for DRM free platform can be granted only.</div>
     *
     */
    post: operations['grant-entitlement-admin']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/entitlement/revoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Revoke entitlement (admin)
     * @description Revokes entitlement of user.
     *
     *     <div class="notice"><strong>Attention</strong><br><br>Game codes or games for DRM free platform can be revoked only.</div>
     *
     */
    post: operations['revoke-entitlement-admin']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/inventory/reward': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Grant items to users
     * @description Adds the specified items to the specified user inventories.
     *
     *     <div class="notice"><strong>Attention</strong><br><br><strong>Only 50 operations</strong> can be processed at once. Operations that exceed this limit will be ignored.</div>
     *
     */
    post: operations['add-item-to-inventory']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/inventory/revoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Revoke inventory items
     * @description Revokes access for items of multiple users.
     *
     *     <div class="notice"><strong>Attention</strong><br><br><strong>Only 50 operations</strong> can be processed at once. Operations that exceed this limit will be ignored.</div>
     *
     */
    post: operations['revoke-item']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/inventory/purchase': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Grant items by purchases to users
     * @description Adds the specified items by purchase to the specified user inventories.
     *
     *     <div class="notice"><strong>Attention</strong><br><br><strong>Only 50 operations</strong> can be processed at once. Operations that exceed this limit will be ignored.</div>
     *
     */
    post: operations['grant-item-by-purchase']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/inventory/set': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Set items to users
     * @description Sets specified items to specified user inventories. Note that new data will replace old data.
     *
     *     <div class="notice"><strong>Attention</strong><br><br><strong>Only 50 operations</strong> can be processed at once. Operations that exceed this limit will be ignored.</div>
     *
     */
    post: operations['set-item-quantity']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/user/inventory/items': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get current user's inventory
     * @description Client endpoint. Retrieves the current user’s inventory.
     *
     *     <div class="notice"><strong>Attention</strong><br><br>All projects have the limitation to the number of items that you can get in the response. The default and maximum value is <strong>50 items per response.</strong> To get more data page by page, use <b>limit</b> and <b>offset</b> fields.</div>
     *
     */
    get: operations['get-user-inventory']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/user/virtual_currency_balance': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get current user's virtual balance
     * @description Client endpoint. Retrieves the current user’s virtual balance.
     *
     */
    get: operations['get-user-virtual-balance']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/user/time_limited_items': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get current user's time-limited items
     * @description Client endpoint. Retrieves the current user’s time-limited items.
     *
     */
    get: operations['get-user-subscriptions']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/user/inventory/item/consume': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Consume item
     * @description Client endpoint. Consumes an item from the current user’s inventory.
     *
     */
    post: operations['consume-item']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/inventory/account/link': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Connect game account to Xsolla
     * @description Connects user game account with Xsolla account.
     */
    post: operations['inventory-account-link']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/inventory/account/signin': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * User tokenization
     * @description Gets JWT for working with In-Game Store API for users of your publishing platform.
     */
    post: operations['inventory-account-signin']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/items/physical_good': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get physical items list
     * @description Gets a physical items list for building a catalog.
     *
     *     <div class="notice"><strong>Attention</strong><br><br>All projects have the limitation to the number of items that you can get in the response. The default and maximum value is <strong>50 items per response.</strong> To get more data page by page, use <b>limit</b> and <b>offset</b> fields.</div> <br> <div class="note"><b>Note</b><br><br>In general, the use of catalog of items is available without authorization.<br> Only authorized users can get <a href="https://developers.xsolla.com/doc/in-game-store/features/personalization/" target="_blank">a personalized catalog.</a></div>
     *
     */
    get: operations['get-physical-goods-list']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/items/physical_good': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get list of physical goods for administration
     * @description Gets the list of physical goods within a project for administration.
     *
     *     <div class="note"><b>Note</b><br><br>Do not use this endpoint for building a store catalog.</div>
     *
     */
    get: operations['admin-get-physical-item-list']
    put?: never
    /**
     * Create physical item
     * @description Adds a new item.
     *
     */
    post: operations['admin-create-physical-item']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/items/physical_good/sku/{item_sku}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get physical item
     * @description Gets a physical item.
     *
     *     Aliases for this endpoint:
     *     * /v2/project/{project_id}/admin/items/physical_good/id/{item_id}
     *
     */
    get: operations['admin-get-physical-item-by-sku']
    /**
     * Update physical item
     * @description Updates a physical item.
     *
     *     Aliases for this endpoint:
     *     * /v2/project/{project_id}/admin/items/physical_good/id/{item_id}
     *
     */
    put: operations['admin-update-physical-item-by-sku']
    post?: never
    /**
     * Delete physical item
     * @description Deletes a physical item.
     *
     *     Aliases for this endpoint:
     *     * /v2/project/{project_id}/admin/items/physical_good/id/{item_id}
     *
     */
    delete: operations['delete-physical-item']
    options?: never
    head?: never
    /**
     * Partially update physical item
     * @description Partially updates a physical item.
     *
     *     Aliases for this endpoint:
     *     * /v2/project/{project_id}/admin/items/physical_good/id/{item_id}
     *
     */
    patch: operations['admin-patch-physical-item-by-sku']
    trace?: never
  }
  '/v2/project/{project_id}/admin/items/physical_good/id/{item_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get physical item by ID
     * @description Gets a physical item by ID.
     */
    get: operations['admin-get-physical-item-by-id']
    /**
     * Update physical item by ID
     * @description Updates a physical item by ID.
     */
    put: operations['admin-update-physical-item-by-id']
    post?: never
    /**
     * Delete physical item by ID
     * @description Deletes a physical item by ID.
     */
    delete: operations['delete-physical-item-by-id']
    options?: never
    head?: never
    /**
     * Partially update physical item by ID
     * @description Partially updates a physical item by ID.
     */
    patch: operations['admin-patch-physical-item-by-id']
    trace?: never
  }
  '/v2/project/{project_id}/admin/items/physical_good/delivery/method': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all delivery methods
     * @description This API allows to specify method of item's delivery and delivery prices in
     *     different currencies. User chooses one of the provided methods after they
     *     provide shipping address information.
     *
     *     <div class="note">
     *       <p><b>Note</b></p><p>To make the delivery method available to the user, all items in user's order should have the delivery price for this method in the currency of the order. Final shipping price is calculated by summing prices of all items for this delivery method.</p>
     *     </div>
     *
     *     To use the methods, you should specify fulfilment XSOLLA_SIMPLE in project
     *     delivery settings.
     */
    get: operations['admin-get-delivery-method']
    put?: never
    /**
     * Add new delivery method
     * @description This API allows to specify method of item's delivery and delivery prices in
     *     different currencies. User chooses one of the provided methods after they
     *     provide shipping address information.
     *
     *     <div class="note">
     *       <p><b>Note</b></p><p>To make the delivery method available to the user, all items in user's order should have the delivery price for this method in the currency of the order. Final shipping price is calculated by summing prices of all items for this delivery method.</p>
     *     </div>
     *
     *     To use the methods, you should specify fulfilment XSOLLA_SIMPLE in project
     *     delivery settings.
     */
    post: operations['admin-create-delivery-method']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/items/physical_good/delivery/method/code/{code}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get delivery method information by method code
     * @description This API allows to specify method of item's delivery and delivery prices in
     *     different currencies. User chooses one of the provided methods after they
     *     provide shipping address information.
     *
     *     <div class="note">
     *       <p><b>Note</b></p><p>To make the delivery method available to the user, all items in user's order should have the delivery price for this method in the currency of the order. Final shipping price is calculated by summing prices of all items for this delivery method.</p>
     *     </div>
     *
     *     To use the methods, you should specify fulfilment XSOLLA_SIMPLE in project
     *     delivery settings.
     *
     *     Aliases for this endpoint:
     *
     *     * /v2/project/{project_id}/admin/items/physical_good/delivery/method/id/{id}
     */
    get: operations['admin-get-delivery-method-method-code']
    /**
     * Update delivery method information by method code
     * @description This API allows to specify method of item's delivery and delivery prices in
     *     different currencies. User chooses one of the provided methods after they
     *     provide shipping address information.
     *
     *     <div class="note">
     *       <p><b>Note</b></p><p>To make the delivery method available to the user, all items in user's order should have the delivery price for this method in the currency of the order. Final shipping price is calculated by summing prices of all items for this delivery method.</p>
     *     </div>
     *
     *     To use the methods, you should specify fulfilment XSOLLA_SIMPLE in project
     *     delivery settings.
     *
     *     Aliases for this endpoint:
     *
     *     * /v2/project/{project_id}/admin/items/physical_good/delivery/method/id/{id}
     */
    put: operations['admin-update-delivery-method-method-code']
    post?: never
    /**
     * Remove delivery method by method code
     * @description This API allows to specify method of item's delivery and delivery prices in
     *     different currencies. User chooses one of the provided methods after they
     *     provide shipping address information.
     *
     *     <div class="note">
     *       <p><b>Note</b></p><p>To make the delivery method available to the user, all items in user's order should have the delivery price for this method in the currency of the order. Final shipping price is calculated by summing prices of all items for this delivery method.</p>
     *     </div>
     *
     *     To use the methods, you should specify fulfilment XSOLLA_SIMPLE in project
     *     delivery settings.
     *
     *     Aliases for this endpoint:
     *
     *     * /v2/project/{project_id}/admin/items/physical_good/delivery/method/id/{id}
     */
    delete: operations['admin-delete-delivery-method-method-code']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/items/physical_good/delivery/price/item/sku/{item_sku}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get item delivery prices information
     * @description This API allows to specify method of item's delivery and delivery prices in
     *     different currencies. User chooses one of the provided methods after they
     *     provide shipping address information.
     *
     *     <div class="note">
     *       <p><b>Note</b></p><p>To make the delivery method available to the user, all items in user's order should have the delivery price for this method in the currency of the order. Final shipping price is calculated by summing prices of all items for this delivery method.</p>
     *     </div>
     *
     *     To use the methods, you should specify fulfilment XSOLLA_SIMPLE in project
     *     delivery settings.
     *
     *     Aliases for this endpoint:
     *
     *     * /v2/project/{project_id}/admin/items/physical_good/delivery/price/item/id/{item_id}
     *     * /v2/project/{project_id}/admin/items/physical_good/delivery/price/method/id/{id}
     *     * /v2/project/{project_id}/admin/items/physical_good/delivery/price/method/code/{code}
     *
     */
    get: operations['admin-get-delivery-method-price-item-sku']
    /**
     * Replace delivery prices
     * @description This API allows to specify method of item's delivery and delivery prices in
     *     different currencies. User chooses one of the provided methods after they
     *     provide shipping address information.
     *
     *     <div class="note">
     *       <p><b>Note</b></p><p>To make the delivery method available to the user, all items in user's order should have the delivery price for this method in the currency of the order. Final shipping price is calculated by summing prices of all items for this delivery method.</p>
     *     </div>
     *
     *     To use the methods, you should specify fulfilment XSOLLA_SIMPLE in project
     *     delivery settings.
     *
     *     Aliases for this endpoint:
     *
     *     * /v2/project/{project_id}/admin/items/physical_good/delivery/price/item/id/{item_id}
     *     * /v2/project/{project_id}/admin/items/physical_good/delivery/price/method/id/{id}
     *     * /v2/project/{project_id}/admin/items/physical_good/delivery/price/method/code/{code}
     *
     */
    put: operations['admin-replace-delivery-method-price-item-sku']
    /**
     * Add new delivery prices
     * @description This API allows to specify method of item's delivery and delivery prices in
     *     different currencies. User chooses one of the provided methods after they
     *     provide shipping address information.
     *
     *     <div class="note">
     *       <p><b>Note</b></p><p>To make the delivery method available to the user, all items in user's order should have the delivery price for this method in the currency of the order. Final shipping price is calculated by summing prices of all items for this delivery method.</p>
     *     </div>
     *
     *     To use the methods, you should specify fulfilment XSOLLA_SIMPLE in project
     *     delivery settings.
     *
     *     Aliases for this endpoint:
     *
     *     * /v2/project/{project_id}/admin/items/physical_good/delivery/price/item/id/{item_id}
     *     * /v2/project/{project_id}/admin/items/physical_good/delivery/price/method/id/{id}
     *     * /v2/project/{project_id}/admin/items/physical_good/delivery/price/method/code/{code}
     *
     */
    post: operations['admin-add-delivery-method-price-item-sku']
    /**
     * Remove delivery prices
     * @description This API allows to specify method of item's delivery and delivery prices in
     *     different currencies. User chooses one of the provided methods after they
     *     provide shipping address information.
     *
     *     <div class="note">
     *       <p><b>Note</b></p><p>To make the delivery method available to the user, all items in user's order should have the delivery price for this method in the currency of the order. Final shipping price is calculated by summing prices of all items for this delivery method.</p>
     *     </div>
     *
     *     To use the methods, you should specify fulfilment XSOLLA_SIMPLE in project
     *     delivery settings.
     *
     *     Aliases for this endpoint:
     *
     *     * /v2/project/{project_id}/admin/items/physical_good/delivery/price/item/id/{item_id}
     *     * /v2/project/{project_id}/admin/items/physical_good/delivery/price/method/id/{id}
     *     * /v2/project/{project_id}/admin/items/physical_good/delivery/price/method/code/{code}
     *
     */
    delete: operations['admin-delete-delivery-method-price-item-sku']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/promotion': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all promotion list
     * @description Gets the list of promotions of a project.
     */
    get: operations['get-promotion-list']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/promotion/{promotion_id}/activate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Activate promotion
     * @description Activates a promotion.
     */
    put: operations['activate-promotion']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/promotion/{promotion_id}/deactivate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Deactivate promotion
     * @description Deactivates a promotion.
     */
    put: operations['deactivate-promotion']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/promotion/redeemable/code/{code}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get redeemable promotion by code
     * @description Gets the promotion by a promo code or coupon code.
     */
    get: operations['get-redeemable-promotion-by-code']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/coupon/redeem': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Redeem coupon code
     * @description Redeems a coupon code. The user gets a bonus after a coupon is redeemed.
     */
    post: operations['redeem-coupon']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/coupon/code/{coupon_code}/rewards': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get coupon rewards
     * @description Gets coupons rewards by its code.
     *     Can be used to allow users to choose one of many items as a bonus.
     *     The usual case is choosing a DRM if the coupon contains a game as a bonus (`type=unit`).
     *
     */
    get: operations['get-coupon-rewards-by-code']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/coupon': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get list of coupon promotions
     * @description Gets the list of coupon promotions of a project.
     *
     */
    get: operations['get-coupons']
    put?: never
    /**
     * Create coupon promotion
     * @description Creates a coupon promotion.
     *
     */
    post: operations['admin-create-coupon']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/coupon/{external_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get coupon promotion
     * @description Gets a specified coupon promotion.
     *
     */
    get: operations['get-coupon']
    /**
     * Update coupon promotion
     * @description Updates a coupon promotion.
     *
     */
    put: operations['update-coupon-promotion']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/coupon/{external_id}/activate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Activate coupon promotion
     * @description Activates a coupon promotion.
     *     Created coupon promotion is disabled by default.
     *     It will not be ready for redemption until you activate it.
     *     Use this endpoint to enable and activate a coupon promotion.
     *
     */
    put: operations['activate-coupon']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/coupon/{external_id}/deactivate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Deactivate coupon promotion
     * @description Deactivates a coupon promotion.
     *     Created coupon promotion is disabled by default.
     *     It will not be ready for redemption until you activate it.
     *     Use this endpoint to disable and deactivate a coupon promotion.
     *
     */
    put: operations['deactivate-coupon']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/coupon/{external_id}/code': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get coupon codes
     * @description Gets coupon codes.
     *
     */
    get: operations['get-coupon-codes']
    put?: never
    /**
     * Create coupon code
     * @description Creates coupon code.
     */
    post: operations['create-coupon-code']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/coupon/{external_id}/code/generate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Generate coupon codes
     * @description Generates coupon codes.
     *
     */
    put: operations['generate-coupon-codes']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/promocode/redeem': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Redeem promo code
     * @description Redeems a code of promo code promotion.
     *     After redeeming a promo code, the user will get free items and/or the price of the cart and/or particular items will be decreased.
     *
     */
    post: operations['redeem-promo-code']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/promocode/remove': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Remove promo code from cart
     * @description Removes a promo code from a cart.
     *     After the promo code is removed, the total price of all items in the cart will be recalculated without bonuses and discounts provided by a promo code.
     *
     */
    put: operations['remove-cart-promo-code']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/promocode/code/{promocode_code}/rewards': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get promo code reward
     * @description Gets promo code rewards by its code.
     *     Can be used to allow users to choose one of many items as a bonus.
     *     The usual case is choosing a DRM if the promo code contains a game as a bonus (`type=unit`).
     *
     */
    get: operations['get-promo-code-rewards-by-code']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/promocode': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get list of promo code promotions
     * @description Gets the list of promo codes of a project.
     *
     */
    get: operations['get-promo-codes']
    put?: never
    /**
     * Create promo code promotion
     * @description Creates a promo code promotion.
     *
     */
    post: operations['create-promo-code']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/promocode/{external_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get promo code promotion
     * @description Gets a specified promo code promotion.
     *
     */
    get: operations['get-promo-code']
    /**
     * Update promo code promotion
     * @description Updates a promo code promotion.
     *
     */
    put: operations['update-promo-code']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/promocode/{external_id}/activate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Activate promo code promotion
     * @description Activates a promo code promotion.
     *
     *     Created promo code promotion is disabled by default.
     *     It will not be ready for redemption until you activate it.
     *     Use this endpoint to enable and activate a promo code promotion.
     *
     */
    put: operations['activate-promo-code']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/promocode/{external_id}/deactivate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Deactivate promo code promotion
     * @description Deactivates a promo code promotion.
     *
     *     Created promo code promotion is disabled by default.
     *     It will not be ready for redemption until you activate it.
     *     Use this endpoint to disable and deactivate a promo code promotion.
     *
     */
    put: operations['deactivate-promo-code']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/promocode/{external_id}/code': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get codes of promo code promotion
     * @description Gets codes of a promo code promotion.
     *
     */
    get: operations['get-promocode-codes']
    put?: never
    /**
     * Create code for promo code promotion
     * @description Creates code for a promo code promotion.
     */
    post: operations['create-promo-code-code']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/promocode/{external_id}/code/generate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Generate codes for promo code promotion
     * @description Generates codes for a promo code promotion.
     *
     */
    put: operations['generate-promo-code-codes']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/promotion/item': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get list of item promotions
     * @description Get the list of item promotions of a project.
     *
     *     Promotions provide a discount (%) on items.
     *     The discount will be applied to all prices of the specified items.
     *
     */
    get: operations['get-item-promotion-list']
    put?: never
    /**
     * Create discount promotion for item
     * @description Creates a discount promotion for an item.
     *
     *     Promotions provide a discount (%) on items.
     *     The discount will be applied to all prices of the specified items.
     *
     */
    post: operations['create-item-promotion']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/promotion/{promotion_id}/item': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get item promotion
     * @description Gets the promotion applied to particular items.
     *
     *     Promotions provide a discount (%) on items.
     *     The discount will be applied to all prices of the specified items.
     *
     */
    get: operations['get-item-promotion']
    /**
     * Update item promotion
     * @description Updates the promotion.
     *
     *     <div class='note'><b>Note</b><br><br>New data will replace old data. If you want to update only a part of a promotion, you should transfer all required data in request as well.</div>
     *
     *     Promotions provide a discount (%) on items.
     *     The discount will be applied to all prices of the specified items.
     *
     */
    put: operations['update-item-promotion']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/promotion/bonus': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get list of bonus promotions
     * @description Gets the list of bonus promotions of a project.
     *
     *     Promotion adds free bonus items to the purchase made by a user.
     *     The promotion can be applied to every purchase within a project or to a purchase that includes particular items.
     *
     */
    get: operations['get-bonus-promotion-list']
    put?: never
    /**
     * Create bonus promotion
     * @description Creates the bonus promotion.
     *
     *     Promotion adds free bonus items to the purchase made by a user.
     *     The promotion can be applied to every purchase within a project or to a purchase that includes particular items.
     *
     */
    post: operations['create-bonus-promotion']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/promotion/{promotion_id}/bonus': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get bonus promotion
     * @description Gets the bonus promotion.
     *
     *     Promotion adds free bonus items to the purchase made by a user.
     *     The promotion can be applied to every purchase within a project or to a purchase that includes particular items.
     *
     */
    get: operations['get-bonus-promotion']
    /**
     * Update bonus promotion
     * @description Updates the promotion.
     *
     *     <div class='note'><b>Note</b><br><br>New data will replace old data. If you want to update only a part of a promotion, you should transfer all required data in request as well.</div>
     *
     *     Promotion adds free bonus items to the purchase made by a user.
     *     The promotion can be applied to every purchase within a project or to a purchase that includes particular items.
     *
     */
    put: operations['update-bonus-promotion']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/promotion/code/{code}/verify': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Verify promotion code
     * @description Determines if the code is a promo code or coupon code and if the user can apply it.
     *
     */
    get: operations['verify-promotion-code']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/items/virtual_items': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get list of virtual items for administration
     * @description Gets the list of virtual items within a project for administration.
     *
     *     <div class="note"><b>Note</b><br><br>Do not use this endpoint for building a store catalog.</div>
     *
     */
    get: operations['admin-get-virtual-items-list']
    put?: never
    /**
     * Create virtual item
     * @description Creates a virtual item.
     */
    post: operations['admin-create-virtual-item']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/items/virtual_items/group/external_id/{external_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get list of virtual items by specified group external id
     * @description Gets the list of virtual items within a group for administration.
     *
     *     <div class="note"><b>Note</b><br><br>Do not use this endpoint for building a store catalog.</div>
     *
     */
    get: operations['admin-get-virtual-items-list-by-group-external-id']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/items/virtual_items/group/id/{group_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get list of virtual items by specified group id
     * @description Gets the list of virtual items within a group for administration.
     *
     *     <div class="note"><b>Note</b><br><br>Do not use this endpoint for building a store catalog.</div>
     *
     */
    get: operations['admin-get-virtual-items-list-by-group-id']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/items/virtual_items/sku/{item_sku}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get virtual item
     * @description Gets the virtual item within a project for administration.
     *
     *     <div class="note"><b>Note</b><br><br>Do not use this endpoint for building a store catalog.</div>
     *
     */
    get: operations['admin-get-virtual-item']
    /**
     * Update virtual item
     * @description Updates a virtual item.
     *
     */
    put: operations['admin-update-virtual-item']
    post?: never
    /**
     * Delete virtual item
     * @description Deletes a virtual item.
     *
     */
    delete: operations['admin-delete-virtual-item']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/items/virtual_currency': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get list of virtual currencies for administration
     * @description Gets the list of virtual currencies within a project for administration.
     *
     *     <div class="note"><b>Note</b><br><br>Do not use this endpoint for building a store catalog.</div>
     *
     */
    get: operations['admin-get-virtual-currencies-list']
    put?: never
    /**
     * Create virtual currency
     * @description Creates a virtual currency.
     */
    post: operations['admin-create-virtual-currency']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/items/virtual_currency/sku/{virtual_currency_sku}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get virtual currency
     * @description Gets the virtual currency within a project for administration.
     *
     *     <div class="note"><b>Note</b><br><br>Do not use this endpoint for building a store catalog.</div>
     *
     */
    get: operations['admin-get-virtual-currency']
    /**
     * Update virtual currency
     * @description Updates a virtual currency.
     *
     */
    put: operations['admin-update-virtual-currency']
    post?: never
    /**
     * Delete virtual currency
     * @description Deletes a virtual currency.
     *
     */
    delete: operations['admin-delete-virtual-currency']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/items/virtual_currency/package': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get list of virtual currency packages for administration
     * @description Gets the list of virtual currency packages within a project for administration.
     *
     *     <div class="note"><b>Note</b><br><br>Do not use this endpoint for building a store catalog.</div>
     *
     */
    get: operations['admin-get-virtual-currency-packages-list']
    put?: never
    /**
     * Create virtual currency package
     * @description Creates a virtual currency package.
     */
    post: operations['admin-create-virtual-currency-package']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/items/virtual_currency/package/sku/{item_sku}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get virtual currency package
     * @description Gets the virtual currency package within a project for administration.
     *
     *     <div class="note"><b>Note</b><br><br>Do not use this endpoint for building a store catalog.</div>
     *
     */
    get: operations['admin-get-virtual-currency-package']
    /**
     * Update virtual currency package
     * @description Updates a virtual currency package.
     *
     */
    put: operations['admin-update-virtual-currency-package']
    post?: never
    /**
     * Delete virtual currency package
     * @description Deletes a virtual currency package.
     *
     */
    delete: operations['admin-delete-virtual-currency-package']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/items/virtual_items': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get virtual items list
     * @description Gets a virtual items list for building a catalog.
     *
     *     <div class="notice"><strong>Attention</strong><br><br>All projects have the limitation to the number of items that you can get in the response. The default and maximum value is <strong>50 items per response.</strong> To get more data page by page, use <b>limit</b> and <b>offset</b> fields.</div> <br> <div class="note"><b>Note</b><br><br>In general, the use of catalog of items is available without authorization.<br> Only authorized users can get <a href="https://developers.xsolla.com/doc/in-game-store/features/personalization/" target="_blank">a personalized catalog.</a></div>
     *
     */
    get: operations['get-virtual-items']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/items/virtual_items/sku/{item_sku}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get virtual item by SKU
     * @description Gets a virtual item by SKU for building a catalog.
     *     <div class="note"><b>Note</b><br><br>This endpoint, accessible without authorization,  returns generic data. However, authorization enriches the response with user-specific  details for a personalized result, such as available user limits and promotions.</div>
     */
    get: operations['get-virtual-items-sku']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/items/virtual_items/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all virtual items list
     * @description Gets a list of all virtual items for searching on client-side.
     *
     *     <div class="notice"><strong>Attention</strong><br><br>Returns only item SKU, name, groups and description</div> <br> <div class="note"><b>Note</b><br><br>In general, the use of catalog of items is available without authorization.<br> Only authorized users can get <a href="https://developers.xsolla.com/doc/in-game-store/features/personalization/" target="_blank">a personalized catalog.</a></div>
     *
     */
    get: operations['get-all-virtual-items']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/items/virtual_currency': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get virtual currency list
     * @description Gets a virtual currency list for building a catalog.
     *
     *     <div class="notice"><strong>Attention</strong><br><br>All projects have the limitation to the number of items that you can get in the response. The default and maximum value is <strong>50 items per response.</strong> To get more data page by page, use <b>limit</b> and <b>offset</b> fields.</div> <br> <div class="note"><b>Note</b><br><br>In general, the use of catalog of items is available without authorization.<br> Only authorized users can get <a href="https://developers.xsolla.com/doc/in-game-store/features/personalization/" target="_blank">a personalized catalog.</a></div>
     *
     */
    get: operations['get-virtual-currency']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/items/virtual_currency/sku/{virtual_currency_sku}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get virtual currency by SKU
     * @description Gets a virtual currency by SKU for building a catalog.
     *     <div class="note"><b>Note</b><br><br>This endpoint, accessible without authorization,  returns generic data. However, authorization enriches the response with user-specific  details for a personalized result, such as available user limits and promotions.</div>
     */
    get: operations['get-virtual-currency-sku']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/items/virtual_currency/package': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get virtual currency package list
     * @description Gets a virtual currency packages list for building a catalog.
     *
     *     <div class="notice"><strong>Attention</strong><br><br>All projects have the limitation to the number of items that you can get in the response. The default and maximum value is <strong>50 items per response.</strong> To get more data page by page, use <b>limit</b> and <b>offset</b> fields.</div> <br> <div class="note"><b>Note</b><br><br>In general, the use of catalog of items is available without authorization.<br> Only authorized users can get <a href="https://developers.xsolla.com/doc/in-game-store/features/personalization/" target="_blank">a personalized catalog.</a></div>
     *
     */
    get: operations['get-virtual-currency-package']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/items/virtual_currency/package/sku/{virtual_currency_package_sku}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get virtual currency package by SKU
     * @description Gets a virtual currency packages by SKU for building a catalog.
     *     <div class="note"><b>Note</b><br><br>This endpoint, accessible without authorization,  returns generic data. However, authorization enriches the response with user-specific  details for a personalized result, such as available user limits and promotions.</div>
     */
    get: operations['get-virtual-currency-package-sku']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/items/virtual_items/group/{external_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get items list by specified group
     * @description Gets an items list from the specified group for building a catalog.
     *
     *     <div class="notice"><strong>Attention</strong><br><br>All projects have the limitation to the number of items that you can get in the response. The default and maximum value is <strong>50 items per response.</strong> To get more data page by page, use <b>limit</b> and <b>offset</b> fields.</div> <br> <div class="note"><b>Note</b><br><br>This endpoint, accessible without authorization,  returns generic data. However, authorization enriches the response with user-specific  details for a personalized result, such as available user limits and promotions.</div>
     */
    get: operations['get-virtual-items-group']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/items/groups': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get items groups list
     * @description Gets an items groups list for building a catalog.
     */
    get: operations['get-item-groups']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/payment/item/{item_sku}/virtual/{virtual_currency_sku}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create order with specified item purchased by virtual currency
     * @description Creates item purchase using virtual currency.
     */
    post: operations['create-order-with-item-for-virtual-currency']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/items': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get sellable items list
     * @description Gets a sellable items list for building a catalog.
     *
     *     <div class="notice"><strong>Attention</strong><br><br>All projects have the limitation to the number of items that you can get in the response. The default and maximum value is <strong>50 items per response.</strong> To get more data page by page, use <b>limit</b> and <b>offset</b> fields.</div> <br> <div class="note"><b>Note</b><br><br>In general, the use of catalog of items is available without authorization.<br> Only authorized users can get <a href="https://developers.xsolla.com/doc/in-game-store/features/personalization/" target="_blank">a personalized catalog.</a></div>
     *
     */
    get: operations['get-sellable-items']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/items/id/{item_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get sellable item by ID
     * @description Gets a sellable item by its ID.
     *     <div class="note"><b>Note</b><br><br>This endpoint, accessible without authorization,  returns generic data. However, authorization enriches the response with user-specific  details for a personalized result, such as available user limits and promotions.</div>
     */
    get: operations['get-sellable-item-by-id']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/items/sku/{sku}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get sellable item by SKU
     * @description Gets a sellable item by SKU for building a catalog.
     *     <div class="note"><b>Note</b><br><br>This endpoint, accessible without authorization,  returns generic data. However, authorization enriches the response with user-specific  details for a personalized result, such as available user limits and promotions.</div>
     */
    get: operations['get-sellable-item-by-sku']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/items/group/{external_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get sellable items list by specified group
     * @description Gets a sellable items list from the specified group for building a catalog.
     *
     *     <div class="notice"><strong>Attention</strong><br><br>All projects have the limitation to the number of items that you can get in the response. The default and maximum value is <strong>50 items per response.</strong> To get more data page by page, use <b>limit</b> and <b>offset</b> fields.</div>
     *
     */
    get: operations['get-sellable-items-group']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/region': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get list of regions
     * @description Gets list of regions.
     *
     *     You can use a region for managing your regional restrictions.
     *
     */
    get: operations['admin-get-regions']
    put?: never
    /**
     * Create region
     * @description Creates region.
     *
     *     You can use a region for managing your regional restrictions.
     *
     */
    post: operations['admin-create-region']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/region/{region_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get region
     * @description Gets particular region.
     *
     *     You can use a region for managing your regional restrictions.
     *
     */
    get: operations['admin-get-region']
    /**
     * Update region
     * @description Updates particular region.
     *
     *     You can use a region for managing your regional restrictions.
     *
     */
    put: operations['admin-update-region']
    post?: never
    /**
     * Delete region
     * @description Deletes particular region.
     *
     */
    delete: operations['admin-delete-region']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/items/nft': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get list of NFT items for administration
     * @description Gets the list of NFT items within a project for administration.
     *
     *     <div class="note"><b>Note</b><br><br>Do not use this endpoint for building a store catalog.</div>
     *
     */
    get: operations['admin-get-nft-items-list']
    put?: never
    /**
     * Create NFT item
     * @description Creates an NFT item.
     */
    post: operations['admin-create-nft-item']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/items/nft/sku/{item_sku}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get NFT item
     * @description Gets the NFT item within a project for administration.
     *
     *     <div class="note"><b>Note</b><br><br>Do not use this endpoint for building a store catalog.</div>
     *
     */
    get: operations['admin-get-nft-item']
    /**
     * Update NFT item
     * @description Updates an NFT item.
     *
     */
    put: operations['admin-update-nft-item']
    post?: never
    /**
     * Delete NFT item
     * @description Deletes an NFT item.
     *
     */
    delete: operations['admin-delete-nft-item']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/items/nft': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get NFT items list
     * @description Gets an NFT items list for building a catalog.
     *
     *     <div class="notice"><strong>Attention</strong><br><br>All projects have the limitation to the number of items that you can get in the response. The default and maximum value is <strong>50 items per response.</strong> To get more data page by page, use <b>limit</b> and <b>offset</b> fields.</div> <br> <div class="note"><b>Note</b><br><br>In general, the use of catalog of items is available without authorization.<br> Only authorized users can get <a href="https://developers.xsolla.com/doc/in-game-store/features/personalization/" target="_blank">a personalized catalog.</a></div>
     *
     */
    get: operations['get-nft-items']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/user/limit/item/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Refresh all purchase limits for specified user
     * @description Refreshes all purchase limits across all items for a specified user so they can purchase these items again.
     *
     *     User limit API allows you to sell an item in a limited quantity. To configure the purchase limits, go to the Admin section of the desired item type module:
     *     * [Game Keys](https://developers.xsolla.com/api/igs-bb/operation/admin-create-game/)
     *     * [Virtual Items & Currency](https://developers.xsolla.com/api/igs-bb/operation/admin-get-virtual-items-list/)
     *     * [Bundles](https://developers.xsolla.com/api/igs-bb/operation/admin-get-bundle-list/)
     *
     */
    delete: operations['reset-all-user-items-limit']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/user/limit/item/sku/{item_sku}/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Refresh purchase limit
     * @description Refreshes the purchase limit for an item so a user can buy it again. If the *user* parameter is `null`, this call refreshes this limit for all users.
     *
     *     User limit API allows you to sell an item in a limited quantity. To configure the purchase limits, go to the Admin section of the desired item type module:
     *     * [Game Keys](https://developers.xsolla.com/api/igs-bb/operation/admin-create-game/)
     *     * [Virtual Items & Currency](https://developers.xsolla.com/api/igs-bb/operation/admin-get-virtual-items-list/)
     *     * [Bundles](https://developers.xsolla.com/api/igs-bb/operation/admin-get-bundle-list/)
     *
     */
    delete: operations['reset-user-item-limit']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/user/limit/item/sku/{item_sku}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get number of items available to specified user
     * @description Gets the remaining number of items available to the specified user within the limit applied.
     *
     *     User limit API allows you to sell an item in a limited quantity. To configure the purchase limits, go to the Admin section of the desired item type module:
     *     * [Game Keys](https://developers.xsolla.com/api/igs-bb/operation/admin-create-game/)
     *     * [Virtual Items & Currency](https://developers.xsolla.com/api/igs-bb/operation/admin-get-virtual-items-list/)
     *     * [Bundles](https://developers.xsolla.com/api/igs-bb/operation/admin-get-bundle-list/)
     *
     */
    get: operations['get-user-item-limit']
    /**
     * Set number of items available to specified user
     * @description Sets the number of items the specified user can buy within the limit applied after it was increased or decreased.
     *
     *     User limit API allows you to sell an item in a limited quantity. To configure the purchase limits, go to the Admin section of the desired item type module:
     *     * [Game Keys](https://developers.xsolla.com/api/igs-bb/operation/admin-create-game/)
     *     * [Virtual Items & Currency](https://developers.xsolla.com/api/igs-bb/operation/admin-get-virtual-items-list/)
     *     * [Bundles](https://developers.xsolla.com/api/igs-bb/operation/admin-get-bundle-list/)
     *
     */
    put: operations['set-user-item-limit']
    /**
     * Increase number of items available to specified user
     * @description Increases the remaining number of items available to the specified user within the limit applied.
     *
     *     User limit API allows you to sell an item in a limited quantity. To configure the purchase limits, go to the Admin section of the desired item type module:
     *     * [Game Keys](https://developers.xsolla.com/api/igs-bb/operation/admin-create-game/)
     *     * [Virtual Items & Currency](https://developers.xsolla.com/api/igs-bb/operation/admin-get-virtual-items-list/)
     *     * [Bundles](https://developers.xsolla.com/api/igs-bb/operation/admin-get-bundle-list/)
     *
     */
    post: operations['add-user-item-limit']
    /**
     * Decrease number of items available to specified user
     * @description Decreases the remaining number of items available to the specified user within the limit applied.
     *
     *     User limit API allows you to sell an item in a limited quantity. To configure the purchase limits, go to the Admin section of the desired item type module:
     *     * [Game Keys](https://developers.xsolla.com/api/igs-bb/operation/admin-create-game/)
     *     * [Virtual Items & Currency](https://developers.xsolla.com/api/igs-bb/operation/admin-get-virtual-items-list/)
     *     * [Bundles](https://developers.xsolla.com/api/igs-bb/operation/admin-get-bundle-list/)
     *
     */
    delete: operations['remove-user-item-limit']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/user/limit/promotion/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Refresh all promotion limits for specified user
     * @description Refreshes all limits across all promotions for the specified user so they can use these promotions again.
     *
     *     User limit API allows you to limit the number of times users can use a promotion. For configuring the user limit itself, go to the Admin section of the desired promotion type:
     *     * [Discount Promotions](https://developers.xsolla.com/api/igs-bb/tag/promotions-discounts/)
     *     * [Bonus Promotions](https://developers.xsolla.com/api/igs-bb/tag/promotions-bonuses/)
     *
     */
    delete: operations['reset-all-user-promotions-limit']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/user/limit/promotion/id/{promotion_id}/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Refresh promotion limit for users
     * @description Refreshes the promotion limit so a user can use this promotion again. If the *user* parameter is `null`, this call refreshes this limit for all users.
     *
     *     User limit API allows you to limit the number of times users can use a promotion. For configuring the user limit itself, go to the Admin section of the desired promotion type:
     *     * [Discount Promotions](https://developers.xsolla.com/api/igs-bb/tag/promotions-discounts/)
     *     * [Bonus Promotions](https://developers.xsolla.com/api/igs-bb/tag/promotions-bonuses/)
     *
     */
    delete: operations['reset-user-promotion-limit']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/user/limit/promotion/id/{promotion_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get promotion limit for specified user
     * @description Gets the remaining number of times the specified user can use the promotion within the limit applied.
     *
     *     User limit API allows you to limit the number of times users can use a promotion. For configuring the user limit itself, go to the Admin section of the desired promotion type:
     *     * [Discount Promotions](https://developers.xsolla.com/api/igs-bb/tag/promotions-discounts/)
     *     * [Bonus Promotions](https://developers.xsolla.com/api/igs-bb/tag/promotions-bonuses/)
     *
     */
    get: operations['get-user-promotion-limit']
    /**
     * Set promotion limit for specified user
     * @description Sets the number of times the specified user can use a promotion within the limit applied after it was increased or decreased.
     *
     *     User limit API allows you to limit the number of times users can use a promotion. For configuring the user limit itself, go to the Admin section of the desired promotion type:
     *     * [Discount Promotions](https://developers.xsolla.com/api/igs-bb/tag/promotions-discounts/)
     *     * [Bonus Promotions](https://developers.xsolla.com/api/igs-bb/tag/promotions-bonuses/)
     *
     */
    put: operations['set-user-promotion-limit']
    /**
     * Increase promotion limit for specified user
     * @description Increases the remaining number of times the specified user can use the promotion within the limit applied.
     *
     *     User limit API allows you to limit the number of times users can use a promotion. For configuring the user limit itself, go to the Admin section of the desired promotion type:
     *     * [Discount Promotions](https://developers.xsolla.com/api/igs-bb/tag/promotions-discounts/)
     *     * [Bonus Promotions](https://developers.xsolla.com/api/igs-bb/tag/promotions-bonuses/)
     *
     */
    post: operations['add-user-promotion-limit']
    /**
     * Decrease promotion limit for specified user
     * @description Decreases the remaining number of times the specified user can use a promotion within the limit applied.
     *
     *     User limit API allows you to limit the number of times users can use a promotion. For configuring the user limit itself, go to the Admin section of the desired promotion type:
     *     * [Discount Promotions](https://developers.xsolla.com/api/igs-bb/tag/promotions-discounts/)
     *     * [Bonus Promotions](https://developers.xsolla.com/api/igs-bb/tag/promotions-bonuses/)
     *
     */
    delete: operations['remove-user-promotion-limit']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/user/limit/promocode/external_id/{external_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get promo code limit for specified user
     * @description Gets the remaining number of times the specified user can use the promo code.
     *
     *     User limit API allows you to limit the number of times users can use a promo code. For configuring the user limit itself, go to the Admin section:
     *     * [Promo Codes](https://developers.xsolla.com/api/igs-bb/tag/promotions-promo-codes/)
     *
     */
    get: operations['get-promo-code-user-limit']
    /**
     * Set promo code limit for specified user
     * @description Sets the number of times the specified user can use a promo code after it was increased or decreased.
     *
     *     User limit API allows you to limit the number of times users can use a promo code. For configuring the user limit itself, go to the Admin section:
     *     * [Promo Codes](https://developers.xsolla.com/api/igs-bb/tag/promotions-promo-codes/)
     *
     */
    put: operations['set-promo-code-user-promotion-limit']
    /**
     * Increase promo code limit for specified user
     * @description Increases the remaining number of times the specified user can use the promo code.
     *
     *     User limit API allows you to limit the number of times users can use a promo code. For configuring the user limit itself, go to the Admin section:
     *     * [Promo Codes](https://developers.xsolla.com/api/igs-bb/tag/promotions-promo-codes/)
     *
     */
    post: operations['add-promo-code-user-promotion-limit']
    /**
     * Decrease promo code limit for specified user
     * @description Decreases the remaining number of times the specified user can use a promo code.
     *
     *     User limit API allows you to limit the number of times users can use a promo code. For configuring the user limit itself, go to the Admin section:
     *     * [Promo Codes](https://developers.xsolla.com/api/igs-bb/tag/promotions-promo-codes/)
     *
     */
    delete: operations['remove-promo-code-user-promotion-limit']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/user/limit/coupon/external_id/{external_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get coupon limit for specified user
     * @description Gets the remaining number of times the specified user can use the coupon.
     *
     *     User limit API allows you to limit the number of times users can use a coupon. For configuring the user limit itself, go to the Admin section:
     *     * [Coupons](https://developers.xsolla.com/api/igs-bb/tag/promotions-coupons/)
     *
     */
    get: operations['get-coupon-user-limit']
    /**
     * Set coupon limit for specified user
     * @description Sets the number of times the specified user can use a coupon after it was increased or decreased.
     *
     *     User limit API allows you to limit the number of times users can use a coupon. For configuring the user limit itself, go to the Admin section:
     *     * [Coupons](https://developers.xsolla.com/api/igs-bb/tag/promotions-coupons/)
     *
     */
    put: operations['set-coupon-user-promotion-limit']
    /**
     * Increase coupon limit for specified user
     * @description Increases the remaining number of times the specified user can use the coupon.
     *
     *     User limit API allows you to limit the number of times users can use a coupon. For configuring the user limit itself, go to the Admin section:
     *     * [Coupons](https://developers.xsolla.com/api/igs-bb/tag/promotions-coupons/)
     *
     */
    post: operations['add-coupon-user-promotion-limit']
    /**
     * Decrease coupon limit for specified user
     * @description Decreases the remaining number of times the specified user can use a coupon.
     *
     *     User limit API allows you to limit the number of times users can use a coupon. For configuring the user limit itself, go to the Admin section:
     *     * [Coupons](https://developers.xsolla.com/api/igs-bb/tag/promotions-coupons/)
     *
     */
    delete: operations['remove-coupon-user-promotion-limit']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/code/limit/promocode/external_id/{external_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get promo code limit for codes
     * @description Gets the remaining number of times codes can be used. For filtering the codes, use the `codes` query parameter.
     *
     *     For configuring the code limit itself, go to the Admin section:
     *     * [Promo Codes](https://developers.xsolla.com/api/igs-bb/tag/promotions-promo-codes/)
     *
     */
    get: operations['get-promo-code-code-limit']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/code/limit/coupon/external_id/{external_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get unique coupon code limits
     * @description Gets the remaining number of times codes can be used. For filtering the codes, use the `codes` query parameter.
     *
     *     For configuring the code limit itself, go to the Admin section:
     *     * [Coupons](https://developers.xsolla.com/api/igs-bb/tag/promotions-coupons/)
     *
     */
    get: operations['get-coupon-code-limit']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/items/value_points': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get list of value points for administration
     * @description Gets the list of value points within a project for administration.
     *
     */
    get: operations['admin-get-value-points-list']
    put?: never
    /**
     * Create value point
     * @description Creates a value point.
     */
    post: operations['admin-create-value-points']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/items/value_points/sku/{item_sku}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get value point
     * @description Gets a value point by the SKU within a project for administration.
     *
     */
    get: operations['admin-get-value-point']
    /**
     * Update value point
     * @description Updates a value point identified by an SKU.
     *
     */
    put: operations['admin-update-value-point']
    post?: never
    /**
     * Delete value points
     * @description Deletes a value point identified by an SKU.
     *
     */
    delete: operations['admin-delete-value-point']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/items/{item_sku}/value_points/rewards': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get list of items with value points
     * @description Gets list of all items with value points within a project for administration.
     *
     */
    get: operations['admin-get-items-value-point-reward']
    /**
     * Set value points for items
     * @description Assigns value points to one or several items by an SKU. Users receive value points after they purchase these items.
     *
     *     Note that this PUT request overwrites all previously set value points for items in the project.
     *
     *     To avoid unintentional deletion of value points, include all items and their respective value points in each PUT request.
     *
     *     If you only want to update the value points for a specific item while preserving the value points of other items, you should retrieve the current set of value points using a GET request, modify the desired item's value points, and then send the modified set of value points back with the updated value points for the specific item.
     *
     */
    put: operations['admin-set-items-value-point-reward']
    post?: never
    /**
     * Delete value points from items
     * @description Removes value point rewards from ALL items.
     *
     */
    delete: operations['admin-delete-items-value-point-reward']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/user/reward_chain': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get current user's reward chains
     * @description Client endpoint. Gets the current user’s reward chains.
     *
     *     <div class="notice"><strong>Attention</strong><br><br>All projects have the limitation to the number of items that you can get in the response. The default and maximum value is <strong>50 items per response.</strong> To get more data page by page, use <b>limit</b> and <b>offset</b> fields.</div>
     *
     */
    get: operations['get-reward-chains-list']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/user/reward_chain/{reward_chain_id}/balance': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get current user's value point balance
     * @description Client endpoint. Gets the current user’s value point balance.
     *
     */
    get: operations['get-user-reward-chain-balance']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/user/reward_chain/{reward_chain_id}/step/{step_id}/claim': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Claim step reward
     * @description Client endpoint. Claims the current user’s step reward from a reward chain.
     *
     */
    post: operations['claim-user-reward-chain-step-reward']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/reward_chain': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get list of reward chains
     * @description Gets list of reward chains.
     *
     *     <div class="notice"><strong>Attention</strong><br><br>All projects have the limitation to the number of items that you can get in the response. The default and maximum value is <strong>10 items per response.</strong> To get more data page by page, use <b>limit</b> and <b>offset</b> fields.</div>
     *
     */
    get: operations['admin-get-reward-chains']
    put?: never
    /**
     * Create reward chain
     * @description Creates reward chain.
     *
     */
    post: operations['admin-create-reward-chain']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/reward_chain/id/{reward_chain_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get reward chain
     * @description Gets particular reward chain.
     *
     */
    get: operations['admin-get-reward-chain']
    /**
     * Update reward chain
     * @description Updates particular reward chain.
     *
     */
    put: operations['admin-update-reward-chain']
    post?: never
    /**
     * Delete reward chain
     * @description Deletes particular reward chain.
     *
     */
    delete: operations['admin-delete-reward-chain']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/reward_chain/id/{reward_chain_id}/toggle': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Toggle reward chain
     * @description Enable/disable reward chain.
     *
     */
    put: operations['admin-toggle-reward-chain']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/unique_catalog_offer': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get list of unique catalog offer promotions
     * @description Gets the list of unique catalog offer promotions of a project.
     *
     */
    get: operations['get-unique-catalog-offers']
    put?: never
    /**
     * Create unique catalog offer promotion
     * @description Creates a unique catalog offer promotion.
     *
     */
    post: operations['admin-create-unique-catalog-offer']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/unique_catalog_offer/{external_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get unique catalog offer promotion
     * @description Gets the specified unique catalog offer promotion.
     *
     */
    get: operations['get-unique-catalog-offer']
    /**
     * Update unique catalog offer promotion
     * @description Updates the unique catalog offer promotion.
     *
     */
    put: operations['update-unique-catalog-offer-promotion']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/unique_catalog_offer/{external_id}/activate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Activate unique catalog offer promotion
     * @description Activates a unique catalog offer promotion.
     *     The created unique catalog offer promotion is disabled by default.
     *     It cannot be redeemed until you activate it.
     *     Use this endpoint to enable and activate a coupon promotion.
     *
     */
    put: operations['activate-unique-catalog-offer']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/unique_catalog_offer/{external_id}/deactivate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Deactivate unique catalog offer promotion
     * @description Deactivates a unique catalog offer promotion.
     *     The created unique catalog offer promotion is disabled by default.
     *     It cannot be redeemed until you activate it.
     *     Use this endpoint to disable and deactivate a coupon promotion.
     *
     */
    put: operations['deactivate-unique-catalog-offer']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/unique_catalog_offer/{external_id}/code': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get unique catalog offer codes
     * @description Gets unique catalog offer codes.
     *
     */
    get: operations['get-unique-catalog-offer-codes']
    put?: never
    /**
     * Create unique catalog offer code
     * @description Creates unique catalog offer code.
     */
    post: operations['create-unique-catalog-offer-code']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v2/project/{project_id}/admin/unique_catalog_offer/{external_id}/code/generate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Generate unique catalog offer codes
     * @description Generates unique catalog offer codes.
     *
     */
    put: operations['generate-unique-catalog-offer-codes']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    /**
     * @description Unique attribute ID. The `external_id` may only contain lowercase Latin alphanumeric characters, dashes, and underscores.
     * @example attribute_1
     */
    'admin-attribute-external_id': string
    /**
     * @description Object with localizations for attribute's name. Keys are specified in ISO 3166-1.
     * @default {
     *       "en": "Genre",
     *       "de": "Genre"
     *     }
     * @example {
     *       "en": "Genre",
     *       "de": "Genre"
     *     }
     */
    'admin-attribute-name': {
      [key: string]: string | undefined
    }
    /**
     * @description Unique value ID for an attribute. The `external_id` may only contain lowercase Latin alphanumeric characters, dashes, and underscores.
     * @example attribute_value
     */
    'value-external_id': string
    /**
     * @description Object with localizations of the value's name. Keys are specified in ISO 3166-1.
     * @default {
     *       "en": "Strategy",
     *       "de": "Strategie"
     *     }
     * @example {
     *       "en": "Strategy",
     *       "de": "Strategie"
     *     }
     */
    'value-name': {
      [key: string]: string | undefined
    }
    /** @example {
     *       "external_id": "value_external_id",
     *       "name": {
     *         "en": "Value 1",
     *         "de": "Wert 1"
     *       }
     *     } */
    'attribute-value': {
      external_id: components['schemas']['value-external_id']
      value: components['schemas']['value-name']
    }
    /** @example {
     *       "value": [
     *         {
     *           "external_id": "genre",
     *           "name": {
     *             "en": "Genre",
     *             "de": "Genre"
     *           },
     *           "values": [
     *             {
     *               "external_id": "strategy",
     *               "value": {
     *                 "en": "Strategy",
     *                 "de": "Strategie"
     *               }
     *             },
     *             {
     *               "external_id": "action",
     *               "value": {
     *                 "en": "Action",
     *                 "de": "Aktion"
     *               }
     *             }
     *           ]
     *         }
     *       ]
     *     } */
    admin_attribute_response: {
      external_id: components['schemas']['admin-attribute-external_id']
      name: components['schemas']['admin-attribute-name']
      values: components['schemas']['attribute-value'][]
    }
    'schemas-422-invalid-request': {
      /** @example 422 */
      statusCode?: number
      /** @example 1102 */
      errorCode?: number
      /** @example [0401-1102]: Unprocessable Entity. The property `property_name` is required */
      errorMessage?: string
      /** @example x-x-x-x-transactionId-mock-x-x-x */
      transactionId?: string
    }
    /** @example {
     *       "external_id": "value_id",
     *       "value": {
     *         "en": "Value",
     *         "de": "Wert"
     *       }
     *     } */
    'request-attribute-value': {
      external_id: components['schemas']['value-external_id']
      value: components['schemas']['value-name']
    }
    '404-not-found': {
      /** @example 422 */
      statusCode?: number
      /** @example 1102 */
      errorCode?: number
      /** @example [0000-0000]: Entity not found */
      errorMessage?: string
    }
    /**
     * type = string
     * @description Conditions which are compared to user attribute values.
     *     All conditions must be met for the action to take an effect.
     *
     */
    'user-attribute_conditions-string': {
      /** @description User attribute code. */
      attribute: string
      /**
       * @description User attribute type.
       * @enum {string}
       */
      type: 'string'
      /**
       * @description Type of operation performed by condition. For <code>string</code> attribute type.
       *
       * @enum {string}
       */
      operator: 'eq' | 'ne'
      /** @description Condition value which user attribute value will be compared to. Type depends on attribute type.
       *      */
      value: string
    }[]
    /**
     * type = date
     * @description Conditions which are compared to user attribute values.
     *     All conditions must be met for the action to take an effect.
     *
     */
    'user-attribute_conditions-date': {
      /** @description User attribute code. */
      attribute: string
      /**
       * @description User attribute type.
       * @enum {string}
       */
      type: 'date'
      /**
       * @description Type of operation performed by condition. For <code>date</code> attribute type.
       *
       * @enum {string}
       */
      operator: 'eq' | 'ne' | 'er' | 'lt' | 'ee' | 'le'
      /** @description Condition value which user attribute value will be compared to. Type depends on attribute type.
       *      */
      value: string
    }[]
    /**
     * type = number
     * @description Conditions which are compared to user attribute values.
     *     All conditions must be met for the action to take an effect.
     *
     */
    'user-attribute_conditions-number': {
      /** @description User attribute code. */
      attribute: string
      /**
       * @description User attribute type.
       * @enum {string}
       */
      type: 'number'
      /**
       * @description Type of operation performed by condition. For <code>number</code> attribute type.
       *
       * @enum {string}
       */
      operator: 'eq' | 'ne' | 'gt' | 'lt' | 'ge' | 'le'
      /** @description Condition value which user attribute value will be compared to. Type depends on attribute type.
       *      */
      value: string
    }[]
    'user-attribute_personalized-catalog': {
      /** @description Rule ID. */
      rule_id: number
      /** @description Readable name of a rule. Used to display a rule in Publisher Account. */
      name: string
      /** @description If rule is enabled. */
      is_enabled: boolean
      attribute_conditions:
        | components['schemas']['user-attribute_conditions-string']
        | components['schemas']['user-attribute_conditions-date']
        | components['schemas']['user-attribute_conditions-number']
      items: {
        /** @description Item ID. */
        item_id?: number
        /** @description Item SKU. */
        sku?: string
        /** @description Item name. */
        name?: string
        /**
         * @description Item type.
         * @enum {string}
         */
        type?: 'virtual_good' | 'virtual_currency' | 'bundle' | 'physical_good' | 'unit'
        /**
         * @description Bundle type. Returned if item type is a bundle.
         * @enum {string}
         */
        bundle_type?: 'standard' | 'virtual_currency_package'
      }[]
    }
    'user-attribute_personalized-catalog-body-required': {
      /** @description Readable name of a rule. Used to display a rule in Publisher Account. */
      name: string
      /** @description If rule is enabled. */
      is_enabled: boolean
      attribute_conditions:
        | components['schemas']['user-attribute_conditions-string']
        | components['schemas']['user-attribute_conditions-date']
        | components['schemas']['user-attribute_conditions-number']
      items: (
        | {
            /** @description Item ID. */
            item_id: number
          }
        | {
            /** @description Item SKU. */
            sku: string
          }
      )[]
    }
    '422-invalid-request': {
      /**
       * @description Response status code.
       * @example 422
       */
      statusCode?: number
      /**
       * @description Error code.
       * @example 1102
       */
      errorCode?: number
      /**
       * @description Readable error message.
       * @example [0401-1102]: Unprocessable Entity. The property `external_id` is required
       */
      errorMessage?: string
      /**
       * @description Unique ID of request.
       * @example da145238620011eb8e24fe6913ff226a
       */
      transactionId?: string
    }
    'user-attribute_personalized-catalog_all': {
      /** @description Rule ID. */
      rule_id: number
      /** @description Readable name of a rule. Used to display a rule in Publisher Account. */
      name: string
      /** @description If rule is enabled. */
      is_enabled: boolean
    }
    'user-attribute_personalized-catalog-body': {
      /** @description Readable name of a rule. Used to display a rule in Publisher Account. */
      name?: string
      /** @description If rule is enabled. */
      is_enabled?: boolean
      attribute_conditions?:
        | components['schemas']['user-attribute_conditions-string']
        | components['schemas']['user-attribute_conditions-date']
        | components['schemas']['user-attribute_conditions-number']
      items?: (
        | {
            /** @description Item ID. */
            item_id: number
          }
        | {
            /** @description Item SKU. */
            sku: string
          }
      )[]
    }
    /**
     * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
     * @example bundle_1
     */
    Bundles_sku: string
    /** @description Object with localizations for item's name. Two-letter lowercase [language code](https://developers.xsolla.com/doc/pay-station/features/localization/). */
    'Bundles_admin-name-two-letter-locale': {
      /** @example Item's name. */
      en?: string | null
      /** @example null */
      ar?: string | null
      /** @example null */
      bg?: string | null
      /** @example null */
      cn?: string | null
      /** @example null */
      cs?: string | null
      /** @example Name des Artikels. */
      de?: string | null
      /** @example Nombre del artículo. */
      es?: string | null
      /** @example Nom de l'élément. */
      fr?: string | null
      /** @example null */
      he?: string | null
      /** @example Nome dell'elemento. */
      it?: string | null
      /** @example 買い物の名前。 */
      ja?: string | null
      /** @example null */
      ko?: string | null
      /** @example null */
      pl?: string | null
      /** @example null */
      pt?: string | null
      /** @example null */
      ro?: string | null
      /** @example null */
      ru?: string | null
      /** @example null */
      th?: string | null
      /** @example null */
      tr?: string | null
      /** @example null */
      tw?: string | null
      /** @example null */
      vi?: string | null
    }
    /** @example {
     *       "external_id": "attribute_external_id",
     *       "name": {
     *         "en": "Attribute name",
     *         "de": "Attributname"
     *       },
     *       "values": [
     *         {
     *           "external_id": "value_1",
     *           "name": {
     *             "en": "value 1",
     *             "de": "wert 1"
     *           }
     *         },
     *         {
     *           "external_id": "value_2",
     *           "name": {
     *             "en": "value 2",
     *             "de": "wert 2"
     *           }
     *         }
     *       ]
     *     } */
    attribute: {
      external_id: components['schemas']['admin-attribute-external_id']
      name?: components['schemas']['admin-attribute-name']
      /** @example [
       *       {
       *         "external_id": "strategy",
       *         "value": {
       *           "en": "Strategy",
       *           "de": "Strategie"
       *         }
       *       },
       *       {
       *         "external_id": "action",
       *         "value": {
       *           "en": "Action",
       *           "de": "Aktion"
       *         }
       *       }
       *     ] */
      values: components['schemas']['attribute-value'][]
    }
    /** @description List of attributes. */
    'Bundles_admin-attributes': components['schemas']['attribute'][]
    /**
     * @description Type of item.
     * @example bundle
     */
    Bundles_type: string
    /**
     * @description Type of bundle. In this case, it is always `standart`.
     * @example standart
     */
    Bundles_bundle_type: string
    /** @description Object with localizations for item's description. Two-letter lowercase [language code](https://developers.xsolla.com/doc/pay-station/features/localization/). */
    'Bundles_admin-description-two-letter-locale': {
      /** @example Item's description. */
      en?: string | null
      /** @example null */
      ar?: string | null
      /** @example null */
      bg?: string | null
      /** @example null */
      cn?: string | null
      /** @example null */
      cs?: string | null
      /** @example Artikelbeschreibung. */
      de?: string | null
      /** @example Descripción del artículo. */
      es?: string | null
      /** @example Description de l'article. */
      fr?: string | null
      /** @example null */
      he?: string | null
      /** @example Descrizione dell'oggetto. */
      it?: string | null
      /** @example 買い物の説明。 */
      ja?: string | null
      /** @example null */
      ko?: string | null
      /** @example null */
      pl?: string | null
      /** @example null */
      pt?: string | null
      /** @example null */
      ro?: string | null
      /** @example null */
      ru?: string | null
      /** @example null */
      th?: string | null
      /** @example null */
      tr?: string | null
      /** @example null */
      tw?: string | null
      /** @example null */
      vi?: string | null
    }
    /** @description Object with localizations for long description of item. Two-letter lowercase [language code](https://developers.xsolla.com/doc/pay-station/features/localization/). */
    'Bundles_admin-long-description-two-letter-locale': {
      /** @example Long description of item. */
      en?: string | null
      /** @example null */
      ar?: string | null
      /** @example null */
      bg?: string | null
      /** @example null */
      cn?: string | null
      /** @example null */
      cs?: string | null
      /** @example Lange Beschreibung des Artikels. */
      de?: string | null
      /** @example Descripción larga del artículo. */
      es?: string | null
      /** @example Description longue de l'article. */
      fr?: string | null
      /** @example null */
      he?: string | null
      /** @example Descrizione lunga dell'articolo. */
      it?: string | null
      /** @example アイテムの長い説明。 */
      ja?: string | null
      /** @example null */
      ko?: string | null
      /** @example null */
      pl?: string | null
      /** @example null */
      pt?: string | null
      /** @example null */
      ro?: string | null
      /** @example null */
      ru?: string | null
      /** @example null */
      th?: string | null
      /** @example null */
      tr?: string | null
      /** @example null */
      tw?: string | null
      /** @example null */
      vi?: string | null
    }
    /**
     * @description Image URL.
     * @example https://image.example.com
     */
    Bundles_image_url: string | null
    /**
     * @description If `true`, the item is free.
     * @default false
     * @example false
     */
    'value-is_free': boolean
    /**
     * @description Item price.
     * @example 100.99
     */
    Bundles_amount_without_discount: string
    /**
     * @description Purchase currency. Three-letter code per [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     * @example USD
     */
    Bundles_currency: string
    /** @description Prices in real currencies. */
    Bundles_prices: {
      amount: components['schemas']['Bundles_amount_without_discount']
      currency: components['schemas']['Bundles_currency']
      /** @description Default price is used to build a catalog if no price in the user's currency is specified. */
      is_default: boolean
      /** @description The price is enabled. */
      is_enabled: boolean
      /**
       * @description Country where this price is available. Two-letter code per [ISO 3166-1 alpha 2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
       * @example US
       */
      country_iso?: string | null
    }[]
    /**
     * @description Virtual currency type.
     * @example virtual_currency
     */
    'Bundles_vc-type': string
    /**
     * @description Item price with a discount.
     * @example 100.99
     */
    Bundles_amount: string
    /**
     * @description Whether the price is default for an item.
     * @example true
     */
    'Bundles_currency-is_default': boolean
    'Bundles_admin-response-virtual_price': {
      sku?: components['schemas']['Bundles_sku']
      name?: components['schemas']['Bundles_admin-name-two-letter-locale']
      type?: components['schemas']['Bundles_vc-type']
      description?: components['schemas']['Bundles_admin-description-two-letter-locale']
      image_url?: components['schemas']['Bundles_image_url']
      amount?: components['schemas']['Bundles_amount']
      is_default?: components['schemas']['Bundles_currency-is_default']
    }
    'Bundles_admin-regions': {
      /** @example 1 */
      id?: number
    }[]
    Bundles_admin_content_response: {
      sku?: components['schemas']['Bundles_sku']
      name?: components['schemas']['Bundles_admin-name-two-letter-locale']
      type?: components['schemas']['Bundles_type']
      description?: components['schemas']['Bundles_admin-description-two-letter-locale']
      image_url?: components['schemas']['Bundles_image_url']
      /**
       * @description Quantity of the item type in the bundle.
       * @default 1
       */
      quantity: number
    }
    /** @description Limit refresh period. */
    recurrent_schedule_response: {
      /** @description User limit refresh period. */
      per_user?: {
        /**
         * @description Recurrent refresh period type.
         * @enum {string}
         */
        interval_type?: 'daily' | 'weekly' | 'monthly'
        /** @description Day of the week when the limits refresh. Where 1 is Monday and 7 is Sunday. Not `null` only for `weekly` limit refresh period type. */
        day_of_week?: number | null
        /** @description Day of the month when limits refresh. If there's no selected day of the month as it's shorter, then the refresh will occur on the last day of the month. Not `null` only for `monthly` limit refresh period type. */
        day_of_month?: number | null
        /**
         * Format: full-time
         * @description Time of limit refresh in the desired time zone (rounding to hours).
         * @example 11:00:00+03:00
         */
        time?: string
        /**
         * @description Date and time when limits refresh (Unix Timestamp).
         * @example 1677553200
         */
        reset_next_date?: number
        /**
         * Format: date-time
         * @description Date and time of the first limit refresh (ISO 8601).
         * @example 2023-02-28T11:00:00+08:00
         */
        displayable_reset_start_date?: string
        /**
         * Format: date-time
         * @description Date and time when limits should reset (ISO 8601).
         * @example 2023-02-28T11:00:00+08:00
         */
        displayable_reset_next_date?: string
      }
    } | null
    /** @description Item limits. */
    'item-limit-response': {
      /** @description Item limitation for a separate user. */
      per_user?: {
        total?: number
      } | null
      /** @description Global item limitation. */
      per_item?: {
        total?: number
        available?: number
        reserved?: number
        sold?: number
      } | null
      recurrent_schedule?: components['schemas']['recurrent_schedule_response']
    }
    /** @description Item sales period. */
    'item-periods-response': {
      /**
       * Format: date-time
       * @description Date when the specified item will be available for sale.
       * @example 2020-08-11T10:00:00+03:00
       */
      date_from?: string
      /**
       * Format: date-time
       * @description Date when the specified item will become unavailable for sale. Can be `null`.
       * @example 2020-08-11T20:00:00+03:00
       */
      date_until?: string | null
    }[]
    /**
     * Format: json
     * @description A JSON object containing item attributes and values.
     */
    'item-custom-attributes-response': Record<string, never>
    /** @description The specified bundle. */
    Bundles_admin_bundle_response: {
      sku?: components['schemas']['Bundles_sku']
      name?: components['schemas']['Bundles_admin-name-two-letter-locale']
      attributes?: components['schemas']['Bundles_admin-attributes']
      type?: components['schemas']['Bundles_type']
      bundle_type?: components['schemas']['Bundles_bundle_type']
      description?: components['schemas']['Bundles_admin-description-two-letter-locale']
      long_description?: components['schemas']['Bundles_admin-long-description-two-letter-locale']
      image_url?: components['schemas']['Bundles_image_url']
      is_free?: components['schemas']['value-is_free']
      prices?: components['schemas']['Bundles_prices']
      virtual_prices?: components['schemas']['Bundles_admin-response-virtual_price'][]
      regions?: components['schemas']['Bundles_admin-regions']
      content?: components['schemas']['Bundles_admin_content_response'][]
      limits?: components['schemas']['item-limit-response']
      periods?: components['schemas']['item-periods-response']
      custom_attributes?: components['schemas']['item-custom-attributes-response']
    }
    /**
     * @description Groups the item belongs to.
     * @default []
     * @example [
     *       "honor"
     *     ]
     */
    Bundles_groups_request: string[]
    'admin-post-put-attribute-item': {
      external_id: components['schemas']['admin-attribute-external_id']
      name?: components['schemas']['admin-attribute-name']
      /**
       * @description <div class="notice"><strong>Attention.</strong> You <strong>can't create more than 6 values</strong> for each attribute. Any attempts to exceed the limit result in an error.</div>
       *
       * @example [
       *       {
       *         "external_id": "strategy",
       *         "value": {
       *           "en": "Strategy",
       *           "de": "Strategie"
       *         }
       *       },
       *       {
       *         "external_id": "action",
       *         "value": {
       *           "en": "Action",
       *           "de": "Aktion"
       *         }
       *       }
       *     ]
       */
      values: components['schemas']['attribute-value'][]
    }
    /** @description List of attributes.
     *     <div class="notice"><strong>Attention.</strong> You <strong>can't specify more than 20 attributes</strong> for the item. Any attempts to exceed the limit result in an error.</div>
     *      */
    'Bundles_admin-post-put-attributes': components['schemas']['admin-post-put-attribute-item'][]
    Bundles_vc_prices: {
      /**
       * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
       * @example gold
       */
      sku?: string
      amount: number
      is_default: boolean
      is_enabled: boolean
    }[]
    Bundles_admin_content_request: {
      sku: components['schemas']['Bundles_sku']
      /**
       * @description Quantity of the selected items in the bundle.
       * @default 1
       */
      quantity: number
    }[]
    /**
     * @description If disabled, the item can't be found and purchased.
     * @default true
     * @example true
     */
    Bundles_is_enabled: boolean
    /**
     * @description Item is available for purchase.
     * @default false
     * @example true
     */
    Bundles_is_show_in_store: boolean
    /**
     * @description Bundle's additional assets.
     * @example [
     *       {
     *         "type": "image",
     *         "url": "https://cdn3.xsolla.com/img/misc/images/71ab1e12126f2103e1868076f0acb21a.jpg"
     *       }
     *     ]
     */
    Bundles_media_list: {
      /**
       * @description Type of media: `image`/`video`.
       * @example image
       * @enum {string}
       */
      type?: 'image' | 'video'
      /**
       * @description Resource file.
       * @example https://cdn3.xsolla.com/img/misc/images/71ab1e12126f2103e1868076f0acb21a.jpg
       */
      url?: string
    }[]
    /**
     * @description Bundle's order priority in the list.
     * @default 1
     * @example 1
     */
    Bundles_order: number
    /** @description Limit refresh period. */
    recurrent_schedule: {
      per_user?:
        | {
            /**
             * @description Recurrent refresh period.
             * @enum {string}
             */
            interval_type: 'daily'
            /**
             * @description Time of limit refresh in the desired time zone (rounding to hours).
             * @example 02:00:00+03:00
             */
            time: string
          }
        | {
            /**
             * @description Recurrent refresh period.
             * @enum {string}
             */
            interval_type: 'weekly'
            /** @description Day of the week when the limits refresh. Where 1 is Monday and 7 is Sunday. */
            day_of_week: number
            /**
             * @description Time of limit refresh in the desired time zone (rounding to hours).
             * @example 11:00:00+03:00
             */
            time: string
          }
        | {
            /**
             * @description Recurrent refresh period.
             * @enum {string}
             */
            interval_type: 'monthly'
            /** @description Day of the month when limits refresh. If there's no selected day in the month as it's shorter, then the refresh will occur on the last day of the month. */
            day_of_month: number
            /**
             * @description Time of limit refresh in the desired time zone (rounding to hours).
             * @example 23:00:00+03:00
             */
            time: string
          }
    } | null
    /** @description Item limits. */
    'item-limit': {
      /** @description Item limitation for a separate user. */
      per_user?: number | null
      /** @description Global item limitation. */
      per_item?: number | null
      recurrent_schedule?: components['schemas']['recurrent_schedule']
    }
    /** @description Item sales period. */
    'item-periods':
      | {
          /**
           * Format: date-time
           * @description Date when the specified item will be available for sale.
           * @example 2020-08-11T10:00:00+03:00
           */
          date_from?: string
          /**
           * Format: date-time
           * @description Date when the specified item will become unavailable for sale. Can be `null`.
           * @example 2020-08-11T20:00:00+03:00
           */
          date_until?: string | null
        }[]
      | null
    /**
     * Format: json
     * @description A JSON object containing item attributes and values. Attributes allow you to add more info to items like the player's required level to use the item. Attributes enrich your game's internal logic and are accessible through dedicated GET methods and webhooks.
     */
    'item-custom-attributes': Record<string, never>
    /** @description The specified bundle. */
    Bundles_admin_bundle_request: {
      sku: components['schemas']['Bundles_sku']
      name: components['schemas']['Bundles_admin-name-two-letter-locale']
      groups?: components['schemas']['Bundles_groups_request']
      attributes?: components['schemas']['Bundles_admin-post-put-attributes']
      description: components['schemas']['Bundles_admin-description-two-letter-locale']
      long_description?: components['schemas']['Bundles_admin-long-description-two-letter-locale']
      image_url?: components['schemas']['Bundles_image_url']
      prices?: components['schemas']['Bundles_prices']
      vc_prices?: components['schemas']['Bundles_vc_prices'] & (unknown[] | null)
      content?: components['schemas']['Bundles_admin_content_request']
      is_free?: components['schemas']['value-is_free']
      is_enabled?: components['schemas']['Bundles_is_enabled']
      is_show_in_store?: components['schemas']['Bundles_is_show_in_store']
      media_list?: components['schemas']['Bundles_media_list'] & (unknown[] | null)
      order?: components['schemas']['Bundles_order']
      regions?: components['schemas']['Bundles_admin-regions']
      limits?: components['schemas']['item-limit']
      periods?: components['schemas']['item-periods']
      custom_attributes?: components['schemas']['item-custom-attributes']
    }
    'Bundles_422-invalid-request': {
      /** @example 422 */
      statusCode?: number
      /** @example 1102 */
      errorCode?: number
      /** @example [0401-1102]: Unprocessable Entity. The property `property_name` is required */
      errorMessage?: string
      /** @example x-x-x-x-transactionId-mock-x-x-x */
      transactionId?: string
    }
    /**
     * @description Used as an indicator that there are more pages.
     * @example true
     */
    'Pagination_has-more': boolean
    /**
     * @description Item name.
     * @example Big Rocket
     */
    Bundles_client_name: string
    /**
     * @description Groups the item belongs to.
     * @default []
     * @example [
     *       {
     *         "external_id": "horror",
     *         "name": {
     *           "en": "Horror"
     *         }
     *       }
     *     ]
     */
    Bundles_groups_response: {
      /** @example horror */
      external_id?: string
      /** @example {
       *       "en": "Horror"
       *     } */
      name?: Record<string, never>
    }[]
    /**
     * @description Item description.
     * @example Big Rocket - description.
     */
    Bundles_client_description: string | null
    /**
     * @description List of attributes and their values corresponding to the item. Can be used for catalog filtering.
     * @default []
     * @example {
     *       "value": {
     *         "external_id": "genre",
     *         "name": "Жанр",
     *         "values": [
     *           {
     *             "external_id": "genre_e3364991f92e751689a68b96598a5a5a84010b85",
     *             "value": "Casual"
     *           },
     *           {
     *             "external_id": "genre_eba07bfd0f982940773cba3744d97264dd58acd7",
     *             "value": "Strategy"
     *           },
     *           {
     *             "external_id": "genre_b8d0c6d8f0524c2b2d79ebb93aa3cd0e8b5199a8",
     *             "value": "Mobile"
     *           }
     *         ]
     *       }
     *     }
     */
    'Bundles_client-attributes': {
      external_id?: components['schemas']['admin-attribute-external_id']
      /**
       * @description Name of attribute.
       * @example Genre
       */
      name?: string
      values?: {
        external_id?: components['schemas']['value-external_id']
        /**
         * @description Value of attribute.
         * @example Strategy
         */
        value?: string
      }[]
    }[]
    /** @description Item price. */
    Bundles_price: {
      amount: components['schemas']['Bundles_amount']
      amount_without_discount: components['schemas']['Bundles_amount_without_discount']
      currency: components['schemas']['Bundles_currency']
    } | null
    /** @description Sum of the bundle content prices. */
    Bundles_total_content_price: {
      /**
       * @description Sum of the bundle content prices with a discount.
       * @example 100.99
       */
      amount?: string
      /**
       * @description Sum of the bundle content prices.
       * @example 100.99
       */
      amount_without_discount?: string
      currency?: components['schemas']['Bundles_currency']
    } | null
    /** @description Virtual prices. */
    Bundles_virtual_prices: {
      /**
       * @description Item price in virtual currency with a discount.
       * @example 100
       */
      amount?: number
      /**
       * @description Item price in virtual currency.
       * @example 200
       */
      amount_without_discount?: number
      /**
       * @description Virtual currency item SKU.
       * @example gold
       */
      sku?: string
      /**
       * @description Whether the price is default for an item.
       * @example true
       */
      is_default?: boolean
      /**
       * @description Image of virtual currency.
       * @example http://image.png
       */
      image_url?: string | null
      /**
       * @description Virtual currency name.
       * @example Gold
       */
      name?: string
      /**
       * @description Virtual currency type.
       * @example virtual_currency
       */
      type?: string
      /**
       * @description Virtual currency description.
       * @example Most popular gold
       */
      description?: string | null
    }[]
    /**
     * @description If `true`, the user can buy an item.
     * @example true
     */
    Can_be_bought: boolean
    /**
     * @description Bundle package content.
     * @example [
     *       {
     *         "description": "Big Rocket - short description.",
     *         "image_url": "https://popmedia.blob.core.windows.net/popyourself/male/outfit/male_armor_white_a-01.png",
     *         "sku": "big_rocket",
     *         "name": "Big Rocket",
     *         "type": "virtual_currency",
     *         "quantity": 100,
     *         "attributes": [],
     *         "is_free": false,
     *         "groups": [],
     *         "price": {
     *           "amount": 10.99,
     *           "currency": "USD",
     *           "amount_without_discount": 10.99
     *         }
     *       }
     *     ]
     */
    Bundles_client_content: {
      /**
       * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, dashes, and underscores.
       * @example big_rocket
       */
      sku?: string
      /**
       * @description Item name.
       * @example Big Rocket
       */
      name?: string
      /**
       * @description Type of item: `virtual_good`/`virtual_currency`/`bundle`.
       * @example virtual_currency
       */
      type?: string
      /**
       * @description Item description.
       * @example Big Rocket - description
       */
      description?: string
      /**
       * @description Image URL.
       * @example https://popmedia.blob.core.windows.net/popyourself/male/outfit/male_armor_white_a-01.png
       */
      image_url?: string
      /**
       * @description Quantity of item in a package.
       * @example 250
       */
      quantity?: number
      /** @description Item prices. */
      price?: {
        /**
         * @description Item price with a discount.
         * @example 100.99
         */
        amount?: string
        /**
         * @description Item price.
         * @example 100.99
         */
        amount_without_discount?: string
        /**
         * @description Default purchase currency. Three-letter code per [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         * @example USD
         */
        currency?: string
      } | null
      /** @description Virtual prices. */
      virtual_prices?: {
        /**
         * @description Item price in virtual currency with a discount.
         * @example 100
         */
        amount?: number
        /**
         * @description Item price.
         * @example 200
         */
        amount_without_discount?: number
        /**
         * @description Virtual currency item SKU.
         * @example vc_test
         */
        sku?: string
        /**
         * @description Whether the price is default for an item.
         * @example true
         */
        is_default?: boolean
        /**
         * @description Image of virtual currency.
         * @example http://image.png
         */
        image_url?: string
        /**
         * @description Virtual currency name.
         * @example SHOTGUN FOR TRUE RAIDERS
         */
        name?: string
        /**
         * @description Virtual currency type.
         * @example virtual_currency
         */
        type?: string
        /**
         * @description Virtual currency description.
         * @example Big Rocket - description
         */
        description?: string
      }[]
      is_free?: components['schemas']['value-is_free']
    }[]
    Catalog_item_promotions: {
      name?: string
      /** Format: date-time */
      date_start?: string | null
      /** Format: date-time */
      date_end?: string | null
      discount?: {
        percent?: string | null
        value?: string | null
      }
      bonus?: {
        sku?: string
        quantity?: number
        /**
         * @description Bonus item type.
         * @enum {string}
         */
        type?: 'virtual_good' | 'virtual_currency' | 'bundle' | 'physical_good' | 'game_key' | 'nft'
        /** @description Bonus item name. Not available for `physical_good` bonus item type. */
        name?: string
        /** @description Bonus item image URL. Not available for `physical_good` bonus item type. */
        image_url?: string
        /**
         * @description Bonus bundle item type. Available only for `bundle` bonus item type.
         * @enum {string}
         */
        bundle_type?: 'standard' | 'virtual_currency_package'
      }[]
      limits?: {
        per_user?: {
          available?: number
          total?: number
        }
      }
    }[]
    /** @description Item limits. */
    Catalog_item_limits: {
      /** @description Item limits for a user. */
      per_user?: {
        /**
         * @description Total number of items a user can purchase. You can set this number in Publisher Account or use admin endpoints for Store entities (limits object).
         * @example 5
         */
        total?: number
        /**
         * @description Available number of items for a user. The number decreases after every successful purchase. If no authorization is provided in the request,  the `available` number of items is set to match the `total` number of items.
         * @example 3
         */
        available?: number
        /** @description Item limits recurrent refresh period for a user. */
        recurrent_schedule?: {
          /**
           * @description Recurrent refresh period type.
           * @enum {string}
           */
          interval_type?: 'daily' | 'weekly' | 'monthly'
          /**
           * @description Date and time when limits reset (Unix Timestamp).
           * @example 1677553200
           */
          reset_next_date?: number
        }
      } | null
      /** @description Item limits for an item. */
      per_item?: {
        /**
         * @description Total number of items that can be purchased. You can set this number in Publisher Account or use admin endpoints for Store entities (limits object).
         * @example 5
         */
        total?: number
        /**
         * @description Available number of items for a user. The number decreases after every successful purchase. If no authorization is provided in the request,  the `available` number of items is set to match the `total` number of items.
         * @example 3
         */
        available?: number
      } | null
    } | null
    /**
     * @description Internal unique item ID.
     * @example 1
     */
    item_id: number
    /** @description Unique value point ID. */
    'value-point-sku': string
    /** @description Amount of value points. */
    'value-point-amount': number
    /** @description Value point name. */
    'value-point-name': string
    /**
     * @description Image URL.
     * @example https://image.example.com
     */
    'Common_admin-image_url': string
    /** @description Value point item reward */
    'item-value-point-reward': {
      item_id?: components['schemas']['item_id']
      sku?: components['schemas']['value-point-sku']
      amount?: components['schemas']['value-point-amount']
      name?: components['schemas']['value-point-name']
      image_url?: components['schemas']['Common_admin-image_url']
    }
    /** @description The specified bundle. */
    Bundles_client_bundle: {
      sku?: components['schemas']['Bundles_sku']
      name?: components['schemas']['Bundles_client_name']
      groups?: components['schemas']['Bundles_groups_response']
      description?: components['schemas']['Bundles_client_description']
      attributes?: components['schemas']['Bundles_client-attributes']
      type?: components['schemas']['Bundles_type']
      bundle_type?: components['schemas']['Bundles_bundle_type']
      image_url?: components['schemas']['Bundles_image_url']
      is_free?: components['schemas']['value-is_free']
      price?: components['schemas']['Bundles_price']
      total_content_price?: components['schemas']['Bundles_total_content_price']
      virtual_prices?: components['schemas']['Bundles_virtual_prices']
      can_be_bought?: components['schemas']['Can_be_bought']
      content?: components['schemas']['Bundles_client_content']
      promotions?: components['schemas']['Catalog_item_promotions']
      limits?: components['schemas']['Catalog_item_limits']
      periods?: components['schemas']['item-periods']
      custom_attributes?: components['schemas']['item-custom-attributes-response']
      vp_rewards?: components['schemas']['item-value-point-reward']
    }
    /**
     * @description If `true`, a cart is free.
     * @default false
     * @example false
     */
    'value-cart_is_free': boolean
    /**
     * @description List of attributes and their values corresponding to the item. Can be used for catalog filtering.
     * @default []
     * @example {
     *       "value": {
     *         "external_id": "genre",
     *         "name": "Жанр",
     *         "values": [
     *           {
     *             "external_id": "genre_e3364991f92e751689a68b96598a5a5a84010b85",
     *             "value": "Casual"
     *           },
     *           {
     *             "external_id": "genre_eba07bfd0f982940773cba3744d97264dd58acd7",
     *             "value": "Strategy"
     *           },
     *           {
     *             "external_id": "genre_b8d0c6d8f0524c2b2d79ebb93aa3cd0e8b5199a8",
     *             "value": "Mobile"
     *           }
     *         ]
     *       }
     *     }
     */
    'Cart-Payment_client-attributes': {
      external_id?: components['schemas']['admin-attribute-external_id']
      /**
       * @description Name of attribute.
       * @example Genre
       */
      name?: string
      values?: {
        external_id?: components['schemas']['value-external_id']
        /**
         * @description Value of attribute.
         * @example Strategy
         */
        value?: string
      }[]
    }[]
    /** @description Interface settings. */
    'Cart-Payment_settings_ui': {
      /**
       * @description Payment UI theme. Can be 63295a9a2e47fab76f7708e1 for the light theme (default) or 63295aab2e47fab76f7708e3 for the dark theme. You can also [create a custom theme](https://developers.xsolla.com/doc/pay-station/features/ui-theme-customization/#pay_station_ui_theme_customization_in_token) and pass its ID in this parameter.
       *
       * @default 63295a9a2e47fab76f7708e1
       * @enum {string}
       */
      theme: '63295a9a2e47fab76f7708e1' | '63295aab2e47fab76f7708e3'
      /** @description Interface settings for the desktop version. */
      desktop?: {
        /** @description Header settings. */
        header?: {
          /** @description Whether to show the header in the payment UI. */
          is_visible?: boolean
          /** @description If `true`, the header will show your logo (first provide the image to your account manager). */
          visible_logo?: boolean
          /** @description Whether to show the project name in the header. */
          visible_name?: boolean
          /**
           * @description Whether to show the purchase description (`purchase.description.value`) in the header. `true` by default.
           * @default true
           */
          visible_purchase: boolean
          /**
           * @description How to show the header. Can be `compact` (hides project name and user ID) or `normal` (default).
           * @default normal
           * @enum {string}
           */
          type: 'compact' | 'normal'
          /**
           * @description Whether to show a Close button in Pay Station desktop. The button closes Pay Station and redirects the user to the URL specified in the `settings.return_url` parameter. `false` by default.
           *
           * @default false
           */
          close_button: boolean
        }
      }
      /**
       * @description Interface mode in Pay Station. Can be `user_account` only: The header contains only the account navigation menu, and the user cannot select a product or make a payment. This mode is only available on the desktop.
       *
       * @enum {string}
       */
      mode?: 'user_account'
      /** @description User account details. */
      user_account?: {
        /** @description **My payment accounts** submenu.
         *      */
        payment_accounts?: {
          /**
           * @description Whether to show the submenu. `false` by default.
           * @default false
           */
          enable: boolean
        }
        /** @default Page **My account**.
         *      */
        info: {
          /**
           * @description Whether to show the submenu. `false` by default.
           * @default false
           */
          enable: boolean
          /** @description Position of the submenu in the menu. */
          order: number
        }
        /** @description **Manage subscriptions** submenu.
         *      */
        subscriptions?: {
          /**
           * @description Whether to show the submenu. `false` by default.
           * @default false
           */
          enable: boolean
          /** @description Position of the submenu in the menu. */
          order: number
        }
      }
    }
    /** @description Payment method ID. */
    'Cart-Payment_settings_payment_method': number
    /**
     * Format: uri
     * @description Page to redirect the user to after payment. Parameters `user_id`, `foreigninvoice`, `invoice_id` and `status` will be automatically added to the link.
     */
    'Cart-Payment_settings_return_url': string
    'Cart-Payment_redirect_policy': {
      /**
       * @description Payment status triggering user redirect to the return URL.
       * @example none
       * @enum {string}
       */
      redirect_conditions?: 'none' | 'successful' | 'successful_or_canceled' | 'any'
      /**
       * @description Delay after which the user will be automatically redirected to the return URL.
       * @example 0
       */
      delay?: number
      /**
       * @description Payment status triggering the display of a button clicking which redirects the user to the return URL.
       * @example none
       * @enum {string}
       */
      status_for_manual_redirection?: 'none' | 'vc' | 'successful' | 'successful_or_canceled' | 'any'
      /**
       * @description Localized redirect button captions.
       * @example Text button
       */
      redirect_button_caption?: string
    }
    /**
     * @description Set to `true` to test out the payment process. In this case, use https://sandbox-secure.xsolla.com to access the test payment UI.
     * @default false
     */
    'Cart-Payment_settings_sandbox': boolean
    'Cart-Payment_simple-checkout-user-request-body': {
      id: {
        /** @description User ID. */
        value?: string
      }
      name?: {
        /** @description User screen name. */
        value?: string
      }
      email?: {
        /**
         * Format: email
         * @description User email. Must be valid according to the RFC 822 protocol.
         */
        value?: string
      }
      country?: {
        /**
         * @description Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
         * @example US
         */
        value?: string
        /**
         * @description Whether or not user can change the country in payment UI.
         * @default false
         * @example false
         */
        allow_modify: boolean
      }
      /** @description User age. */
      age?: number
      phone?: {
        /** @description User phone number. */
        value: string
        /**
         * @description Whether or not user can change the phone in the payment UI. If `phone.value` is passed in the token, the value is `false` by default.
         * @default false
         * @example false
         */
        allow_modify: boolean
        /**
         * @default true
         * @example false
         */
        hidden: boolean
      }
      tracking_id?: {
        /** @description Unique tracking ID (used in marketing campaigns). */
        value: string
      }
      steam_id?: {
        /** @description Steam ID. */
        value: string
      }
      /** @description Traffic attributes. */
      utm?: {
        /** @description Traffic source. */
        utm_source?: string
        /** @description Traffic channel (contextual ads, media ads, email lists, etc.). */
        utm_medium?: string
        /** @description Campaign title, transliterated or translated to English. */
        utm_campaign?: string
        /** @description Campaign keyword. If set, statistics will be based on the keywords used for ad targeting rather than on specific search queries. In Google Analytics, the specified utm_term is part of the general search terms report. */
        utm_term?: string
        /** @description Campaign content. */
        utm_content?: string
      }
      /** @description Whether the user is a legal entity. */
      is_legal?: boolean
      /** @description Object with legal entity details. Object and all its parameters are required if `user.is_legal` is `true`. */
      legal?: {
        /** @description Full legal name. */
        name?: string
        /** @description Full legal address. */
        address?: string
        /** @description Individual taxpayer identifier. */
        vat_id?: string
        /** @description Country of incorporation. Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) is used. */
        country?: string
      }
      /** @description User attributes for filtering the item list, represented as a valid JSON set of key-value pairs. */
      attributes?: Record<string, never>
    }
    Cart_admin_payment: {
      shipping?: {
        /** @description Number of displayed shipping methods. */
        limit_method_count?: number
        /** @description Number of free shipping methods. */
        free_method_count?: number
      }
      items: {
        /**
         * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
         * @example t-shirt
         */
        sku: string
        /**
         * @description Quantity of the item.
         * @example 2
         */
        quantity: number
      }[]
    }
    /** @description Preferred payment currency. Three-letter currency code per [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217). */
    'Cart-Payment_settings_currency': string
    /** @description Interface language. Two-letter lowercase [language code](https://developers.xsolla.com/doc/pay-station/features/localization/). */
    'Cart-Payment_settings_locale': string
    /** @description Transaction external ID. */
    'Cart-Payment_settings_external_id': string
    /**
     * @description Your custom parameters represented as a valid JSON set of key-value pairs.<br>
     *     You can pass additional parameters through this field to configure anti-fraud filters. [See Pay Station documentation](https://developers.xsolla.com/doc/pay-station/features/antifraud/).
     * @example {
     *       "custom_parameters": {
     *         "string_param": "example",
     *         "bool_param": true,
     *         "int_param": 100,
     *         "null_param": null
     *       }
     *     }
     */
    'Cart-Payment_custom_parameters': {
      [key: string]: (string | number | boolean) | undefined
    } | null
    Cart: {
      /**
       * @description Country format should follow the [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) standard.
       * @example US
       */
      country?: string
      /**
       * @description Purchase currency. Three-letter code per [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
       * @example USD
       */
      currency?: string
      shipping?: {
        /** @description Number of displayed shipping methods. */
        limit_method_count?: number
        /** @description Number of free shipping methods. */
        free_method_count?: number
      }
      items: {
        /**
         * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
         * @example t-shirt
         */
        sku: string
        /**
         * @description Quantity of the item.
         * @example 2
         */
        quantity: number
        /**
         * @description Discounted item price. This parameter should be used to pass the discounted item price if you keep the item prices on your side. It will only work if enabled for your account. <a href="mailto:integration@xsolla.com">Contact us</a> to enable it.
         * @example 2.9900
         */
        amount?: string
        /**
         * @description Item price. This parameter should be used to pass the item price if you keep the item prices on your side. It will only work if enabled for your account. <a href="mailto:integration@xsolla.com">Contact us</a> to enable it.
         * @example 5.9900
         */
        amount_without_discount?: string
      }[]
    }
    /**
     * @description List of attributes and their values corresponding to the item. Can be used for catalog filtering.
     * @default []
     * @example {
     *       "value": {
     *         "external_id": "genre",
     *         "name": "Жанр",
     *         "values": [
     *           {
     *             "external_id": "genre_e3364991f92e751689a68b96598a5a5a84010b85",
     *             "value": "Casual"
     *           },
     *           {
     *             "external_id": "genre_eba07bfd0f982940773cba3744d97264dd58acd7",
     *             "value": "Strategy"
     *           },
     *           {
     *             "external_id": "genre_b8d0c6d8f0524c2b2d79ebb93aa3cd0e8b5199a8",
     *             "value": "Mobile"
     *           }
     *         ]
     *       }
     *     }
     */
    'Game-Keys_schemas-client-attributes': {
      external_id?: components['schemas']['admin-attribute-external_id']
      /**
       * @description Name of attribute.
       * @example Genre
       */
      name?: string
      values?: {
        external_id?: components['schemas']['value-external_id']
        /**
         * @description Value of attribute.
         * @example Strategy
         */
        value?: string
      }[]
    }[]
    /** @description Object with localizations for item's name. Two-letter lowercase [language code](https://developers.xsolla.com/doc/pay-station/features/localization/). */
    'Game-Keys_admin-name-two-letter-locale': {
      /** @example Item's name. */
      en?: string | null
      /** @example null */
      ar?: string | null
      /** @example null */
      bg?: string | null
      /** @example null */
      cn?: string | null
      /** @example null */
      cs?: string | null
      /** @example Name des Artikels. */
      de?: string | null
      /** @example Nombre del artículo. */
      es?: string | null
      /** @example Nom de l'élément. */
      fr?: string | null
      /** @example null */
      he?: string | null
      /** @example Nome dell'elemento. */
      it?: string | null
      /** @example 買い物の名前。 */
      ja?: string | null
      /** @example null */
      ko?: string | null
      /** @example null */
      pl?: string | null
      /** @example null */
      pt?: string | null
      /** @example null */
      ro?: string | null
      /** @example null */
      ru?: string | null
      /** @example null */
      th?: string | null
      /** @example null */
      tr?: string | null
      /** @example null */
      tw?: string | null
      /** @example null */
      vi?: string | null
    }
    /** @description Object with localizations for item's description. Two-letter lowercase [language code](https://developers.xsolla.com/doc/pay-station/features/localization/). */
    'Game-Keys_admin-description-two-letter-locale': {
      /** @example Item's description. */
      en?: string | null
      /** @example null */
      ar?: string | null
      /** @example null */
      bg?: string | null
      /** @example null */
      cn?: string | null
      /** @example null */
      cs?: string | null
      /** @example Artikelbeschreibung. */
      de?: string | null
      /** @example Descripción del artículo. */
      es?: string | null
      /** @example Description de l'article. */
      fr?: string | null
      /** @example null */
      he?: string | null
      /** @example Descrizione dell'oggetto. */
      it?: string | null
      /** @example 買い物の説明。 */
      ja?: string | null
      /** @example null */
      ko?: string | null
      /** @example null */
      pl?: string | null
      /** @example null */
      pt?: string | null
      /** @example null */
      ro?: string | null
      /** @example null */
      ru?: string | null
      /** @example null */
      th?: string | null
      /** @example null */
      tr?: string | null
      /** @example null */
      tw?: string | null
      /** @example null */
      vi?: string | null
    }
    /** @description Object with localizations for long description of item. Two-letter lowercase [language code](https://developers.xsolla.com/doc/pay-station/features/localization/). */
    'Game-Keys_admin-long-description-two-letter-locale': {
      /** @example Long description of item. */
      en?: string | null
      /** @example null */
      ar?: string | null
      /** @example null */
      bg?: string | null
      /** @example null */
      cn?: string | null
      /** @example null */
      cs?: string | null
      /** @example Lange Beschreibung des Artikels. */
      de?: string | null
      /** @example Descripción larga del artículo. */
      es?: string | null
      /** @example Description longue de l'article. */
      fr?: string | null
      /** @example null */
      he?: string | null
      /** @example Descrizione lunga dell'articolo. */
      it?: string | null
      /** @example アイテムの長い説明。 */
      ja?: string | null
      /** @example null */
      ko?: string | null
      /** @example null */
      pl?: string | null
      /** @example null */
      pt?: string | null
      /** @example null */
      ro?: string | null
      /** @example null */
      ru?: string | null
      /** @example null */
      th?: string | null
      /** @example null */
      tr?: string | null
      /** @example null */
      tw?: string | null
      /** @example null */
      vi?: string | null
    }
    /** @description List of attributes. */
    'Game-Keys_admin-attributes': components['schemas']['attribute'][]
    'Game-Keys_regions': {
      /** @example 1 */
      id?: number
    }[]
    /** @description List of attributes.
     *     <div class="notice"><strong>Attention.</strong> You <strong>can't specify more than 20 attributes</strong> for the item. Any attempts to exceed the limit result in an error.</div>
     *      */
    'Game-Keys_admin-post-put-attributes': components['schemas']['admin-post-put-attribute-item'][]
    'Game-Keys_422-invalid-request': {
      /** @example 422 */
      statusCode?: number
      /** @example 1102 */
      errorCode?: number
      /** @example [0401-1102]: Unprocessable Entity. The property `property_name` is required */
      errorMessage?: string
      /** @example x-x-x-x-transactionId-mock-x-x-x */
      transactionId?: string
    }
    /**
     * @description Total number of items in the system.
     * @example 10
     */
    'Pagination_total-items-count': number
    /**
     * @description Game package name.
     * @example The Greatest Game in the World
     */
    'Game-Keys_client_name': string
    /**
     * @description Game package description.
     * @example Description of the greatest game in the world.
     */
    'Game-Keys_description': string
    /**
     * @description Project ID.
     * @example 44056
     */
    'Game-Keys_project_id': number
    /**
     * @description Unique key package ID.
     * @example theGreatestGameSku
     */
    'Game-Keys_game_sku': string
    /**
     * @description Unique DRM ID.
     * @example steam
     * @enum {string}
     */
    'Game-Keys_drm_sku':
      | 'steam'
      | 'playstation'
      | 'xbox'
      | 'uplay'
      | 'origin'
      | 'drmfree'
      | 'gog'
      | 'epicgames'
      | 'nintendo_eshop'
      | 'discord_game_store'
      | 'oculus'
      | 'rockstar'
      | 'viveport'
      | 'stadia'
    /**
     * @description Image URL.
     * @example https://none
     */
    'Game-Keys_image_url': string
    /**
     * @description Unique attribute ID. The `external_id` may only contain lowercase Latin alphanumeric characters, dashes, and underscores.
     * @example attribute_1
     */
    'Game-Keys_admin-attribute-external_id': string
    /**
     * @description Unique value ID for an attribute. The `external_id` may only contain lowercase Latin alphanumeric characters, dashes, and underscores.
     * @example attribute_value
     */
    'Game-Keys_value-external_id': string
    /**
     * @description List of attributes and their values corresponding to the Game.
     *
     *     <div class="notice"><strong>Attention.</strong> This part of response is available only if you send the `additional_fields[]=attributes` query parameter.</div>
     *
     * @default []
     * @example {
     *       "value": {
     *         "external_id": "genre",
     *         "name": "Жанр",
     *         "values": [
     *           {
     *             "external_id": "genre_e3364991f92e751689a68b96598a5a5a84010b85",
     *             "value": "Casual"
     *           },
     *           {
     *             "external_id": "genre_eba07bfd0f982940773cba3744d97264dd58acd7",
     *             "value": "Strategy"
     *           },
     *           {
     *             "external_id": "genre_b8d0c6d8f0524c2b2d79ebb93aa3cd0e8b5199a8",
     *             "value": "Mobile"
     *           }
     *         ]
     *       }
     *     }
     */
    'Game-Keys_client-attributes': {
      external_id?: components['schemas']['Game-Keys_admin-attribute-external_id']
      /**
       * @description Name of attribute.
       * @example Genre
       */
      name?: string
      values?: {
        external_id?: components['schemas']['Game-Keys_value-external_id']
        /**
         * @description Value of attribute.
         * @example Strategy
         */
        value?: string
      }[]
    }[]
    'Game-Keys_entitlement_item': {
      name?: components['schemas']['Game-Keys_client_name']
      description?: components['schemas']['Game-Keys_description']
      project_id?: components['schemas']['Game-Keys_project_id']
      game_sku?: components['schemas']['Game-Keys_game_sku']
      drm?: components['schemas']['Game-Keys_drm_sku']
      image_url?: components['schemas']['Game-Keys_image_url']
      /**
       * @description Whether the game is in pre-order status or is not.
       * @example false
       */
      is_pre_order?: boolean
      attributes?: components['schemas']['Game-Keys_client-attributes']
    }
    /**
     * @description Project specific parameters.
     * @example {
     *       "array_param": [
     *         {
     *           "user_public_id": {
     *             "nickname": "player1"
     *           },
     *           "user_device_info": {
     *             "engine_version": "Unity 2020.2.0b5",
     *             "os": "windows"
     *           }
     *         },
     *         {
     *           "user_public_id": {
     *             "nickname": "player1"
     *           },
     *           "user_device_info": {
     *             "engine_version": "UE 4.25",
     *             "os": "mac"
     *           }
     *         }
     *       ],
     *       "object_param": {
     *         "key": "value"
     *       },
     *       "bool_param": true,
     *       "int_param": 100,
     *       "null_param": null
     *     }
     */
    'Player-Inventory_custom_parameters': {
      [key: string]: (unknown[] | Record<string, never> | string | number | null | boolean) | undefined
    }
    /**
     * @description List of attributes and their values corresponding to the item. Can be used for catalog filtering.
     * @default []
     * @example {
     *       "value": {
     *         "external_id": "genre",
     *         "name": "Жанр",
     *         "values": [
     *           {
     *             "external_id": "genre_e3364991f92e751689a68b96598a5a5a84010b85",
     *             "value": "Casual"
     *           },
     *           {
     *             "external_id": "genre_eba07bfd0f982940773cba3744d97264dd58acd7",
     *             "value": "Strategy"
     *           },
     *           {
     *             "external_id": "genre_b8d0c6d8f0524c2b2d79ebb93aa3cd0e8b5199a8",
     *             "value": "Mobile"
     *           }
     *         ]
     *       }
     *     }
     */
    'Player-Inventory_client-attributes': {
      external_id?: components['schemas']['admin-attribute-external_id']
      /**
       * @description Name of attribute.
       * @example Genre
       */
      name?: string
      values?: {
        external_id?: components['schemas']['value-external_id']
        /**
         * @description Value of attribute.
         * @example Strategy
         */
        value?: string
      }[]
    }[]
    /**
     * @description List of attributes and their values corresponding to the item. Can be used for catalog filtering.
     * @default []
     * @example {
     *       "value": {
     *         "external_id": "genre",
     *         "name": "Жанр",
     *         "values": [
     *           {
     *             "external_id": "genre_e3364991f92e751689a68b96598a5a5a84010b85",
     *             "value": "Casual"
     *           },
     *           {
     *             "external_id": "genre_eba07bfd0f982940773cba3744d97264dd58acd7",
     *             "value": "Strategy"
     *           },
     *           {
     *             "external_id": "genre_b8d0c6d8f0524c2b2d79ebb93aa3cd0e8b5199a8",
     *             "value": "Mobile"
     *           }
     *         ]
     *       }
     *     }
     */
    'Physical-Items_client-attributes': {
      external_id?: components['schemas']['admin-attribute-external_id']
      /**
       * @description Name of attribute.
       * @example Genre
       */
      name?: string
      values?: {
        external_id?: components['schemas']['value-external_id']
        /**
         * @description Value of attribute.
         * @example Strategy
         */
        value?: string
      }[]
    }[]
    /** @description Object with localizations for item's name. Two-letter lowercase [language code](https://developers.xsolla.com/doc/pay-station/features/localization/). */
    'Physical-Items_admin-name-two-letter-locale': {
      /** @example Item's name. */
      en?: string | null
      /** @example null */
      ar?: string | null
      /** @example null */
      bg?: string | null
      /** @example null */
      cn?: string | null
      /** @example null */
      cs?: string | null
      /** @example Name des Artikels. */
      de?: string | null
      /** @example Nombre del artículo. */
      es?: string | null
      /** @example Nom de l'élément. */
      fr?: string | null
      /** @example null */
      he?: string | null
      /** @example Nome dell'elemento. */
      it?: string | null
      /** @example 買い物の名前。 */
      ja?: string | null
      /** @example null */
      ko?: string | null
      /** @example null */
      pl?: string | null
      /** @example null */
      pt?: string | null
      /** @example null */
      ro?: string | null
      /** @example null */
      ru?: string | null
      /** @example null */
      th?: string | null
      /** @example null */
      tr?: string | null
      /** @example null */
      tw?: string | null
      /** @example null */
      vi?: string | null
    }
    /** @description Object with localizations for item's description. Two-letter lowercase [language code](https://developers.xsolla.com/doc/pay-station/features/localization/). */
    'Physical-Items_admin-description-two-letter-locale': {
      /** @example Item's description. */
      en?: string | null
      /** @example null */
      ar?: string | null
      /** @example null */
      bg?: string | null
      /** @example null */
      cn?: string | null
      /** @example null */
      cs?: string | null
      /** @example Artikelbeschreibung. */
      de?: string | null
      /** @example Descripción del artículo. */
      es?: string | null
      /** @example Description de l'article. */
      fr?: string | null
      /** @example null */
      he?: string | null
      /** @example Descrizione dell'oggetto. */
      it?: string | null
      /** @example 買い物の説明。 */
      ja?: string | null
      /** @example null */
      ko?: string | null
      /** @example null */
      pl?: string | null
      /** @example null */
      pt?: string | null
      /** @example null */
      ro?: string | null
      /** @example null */
      ru?: string | null
      /** @example null */
      th?: string | null
      /** @example null */
      tr?: string | null
      /** @example null */
      tw?: string | null
      /** @example null */
      vi?: string | null
    }
    /** @description Object with localizations for long description of item. Two-letter lowercase [language code](https://developers.xsolla.com/doc/pay-station/features/localization/). */
    'Physical-Items_admin-long-description-two-letter-locale': {
      /** @example Long description of item. */
      en?: string | null
      /** @example null */
      ar?: string | null
      /** @example null */
      bg?: string | null
      /** @example null */
      cn?: string | null
      /** @example null */
      cs?: string | null
      /** @example Lange Beschreibung des Artikels. */
      de?: string | null
      /** @example Descripción larga del artículo. */
      es?: string | null
      /** @example Description longue de l'article. */
      fr?: string | null
      /** @example null */
      he?: string | null
      /** @example Descrizione lunga dell'articolo. */
      it?: string | null
      /** @example アイテムの長い説明。 */
      ja?: string | null
      /** @example null */
      ko?: string | null
      /** @example null */
      pl?: string | null
      /** @example null */
      pt?: string | null
      /** @example null */
      ro?: string | null
      /** @example null */
      ru?: string | null
      /** @example null */
      th?: string | null
      /** @example null */
      tr?: string | null
      /** @example null */
      tw?: string | null
      /** @example null */
      vi?: string | null
    }
    /** @description List of attributes. */
    'Physical-Items_admin-attributes': components['schemas']['attribute'][]
    /** @example [
     *       {
     *         "sku": "gold",
     *         "name": {
     *           "en": "Gold"
     *         },
     *         "type": "virtual_currency",
     *         "description": null,
     *         "image_url": "https://i.pinimg.com/originals/91/ae/56/91ae5683045f6dbef16b1482bade938f.png",
     *         "amount": 1000,
     *         "is_default": true
     *       }
     *     ] */
    'Physical-Items_virtual_prices_admin': {
      /**
       * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
       * @example gold
       */
      sku?: string
      name?: components['schemas']['Physical-Items_admin-name-two-letter-locale']
      description?: components['schemas']['Physical-Items_admin-description-two-letter-locale']
      /**
       * @description Type of item. In this case it is always `virtual_currency`.
       * @example virtual_currency
       */
      type?: string
      /**
       * @description Image URL.
       * @example https://image.example.com
       */
      image_url?: string
      amount?: number
      is_default?: boolean
    }[]
    /** @description List of attributes.
     *     <div class="notice"><strong>Attention.</strong> You <strong>can't specify more than 20 attributes</strong> for the item. Any attempts to exceed the limit result in an error.</div>
     *      */
    'Physical-Items_admin-post-put-attributes': components['schemas']['admin-post-put-attribute-item'][]
    'Physical-Items_admin-prices': {
      /**
       * @description Default purchase currency. Three-letter code per [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
       * @example USD
       */
      currency: string
      /** @description Amount. */
      amount: number
      /** @default false */
      is_default: boolean
      /** @default true */
      is_enabled: boolean
      /**
       * @description Country where this price is available. Two-letter code per [ISO 3166-1 alpha 2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
       * @example US
       */
      country_iso?: string | null
    }[]
    /**
     * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
     * @example bundle_1
     */
    'Virtual-Items-Currency_schemas-sku': string
    'Physical-Items_admin-create-vc_prices': {
      sku?: components['schemas']['Virtual-Items-Currency_schemas-sku']
      amount: number
      /** @default false */
      is_default: boolean
      /**
       * @description The price is enabled.
       * @default false
       */
      is_enabled: boolean
    }[]
    'Physical-Items_admin-pre_order': {
      /** Format: date-time */
      release_date: string | null
      is_enabled: boolean
      description?: string | null
    }
    'Physical-Items_admin-regions': {
      /** @example 1 */
      id?: number
    }[]
    'Physical-Items_422-invalid-request': {
      /** @example 422 */
      statusCode?: number
      /** @example 1102 */
      errorCode?: number
      /** @example [0401-1102]: Unprocessable Entity. The property `property_name` is required */
      errorMessage?: string
      /** @example x-x-x-x-transactionId-mock-x-x-x */
      transactionId?: string
    }
    /**
     * @description Promotion ID. Unique promotion identifier within the project.
     * @example 1
     */
    Promotions_promotion_id: number
    /**
     * Format: date-time
     * @description Date when your promotion will be started.
     * @default 2020-04-15T18:16:00+05:00
     */
    Promotions_coupon_date_start: string | null
    /**
     * Format: date-time
     * @description Date when your promotion will be finished. Can be `null`.  If `date_end` is `null`, promotion will be unlimited by time.
     * @default 2020-04-15T18:16:00+05:00
     */
    Promotions_coupon_date_end: string | null
    /**
     * @description Name of promotion. Should contain key/value pairs
     *     where key is a locale with "^[a-z]{2}-[A-Z]{2}$" format, value is string.
     *
     * @default {
     *       "en-US": "Coupon title",
     *       "de-DE": "Название купона"
     *     }
     * @example {
     *       "en-US": "Coupon title",
     *       "de-DE": "Название купона"
     *     }
     */
    Promotions_coupon_name: {
      [key: string]: string | undefined
    }
    Promotions_coupon_bonus:
      | {
          /**
           * @description Item SKU.
           * @default elven_shield
           */
          sku: string
          /**
           * @description Item quantity.
           * @default 1
           */
          quantity: number
        }[]
      | null
    /**
     * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
     * @example booster_mega_1
     */
    Promotions_sku: string
    /**
     * @description Name of item. Should contain key/value pairs
     *     where key is a locale with "^[a-z]{2}-[A-Z]{2}$" format, value is string.
     *
     * @default {
     *       "en-US": "Item title",
     *       "de-DE": "Artikeltitel"
     *     }
     * @example {
     *       "en-US": "Item title",
     *       "de-DE": "Artikeltitel"
     *     }
     */
    Promotions_name: {
      [key: string]: string | undefined
    }
    /** @description Type of item: `virtual_good`/`virtual_currency`/`bundle`/`physical_good`/`unit`. */
    Promotions_type: string
    Promotions_promotion_condition:
      | {
          item?: {
            sku?: components['schemas']['Promotions_sku']
            name?: components['schemas']['Promotions_name']
            type?: components['schemas']['Promotions_type']
          }
        }[]
      | null
    /** @default true */
    'Promotions_coupon-is_enabled': boolean
    /**
     * @description Promotion type.
     * @example item_discount
     */
    Promotions_promotion_type: string
    /**
     * @description Percent discount.
     *     The price of cart will be decreased using a value calculated by using this percent and then rounded to 2 decimal places.
     * @default 10.00
     * @example 10.00
     */
    Promotions_promotion_discount_percent: string | null
    /** @description Promotion limits. */
    Promotions_promotion_limits_response: {
      /** @description Promotion limitation for a separate user. */
      per_user?: number | null
      recurrent_schedule?: components['schemas']['recurrent_schedule_response']
    }
    'Promotions_200-get-promotion-model': {
      id?: components['schemas']['Promotions_promotion_id']
      date_start?: components['schemas']['Promotions_coupon_date_start']
      date_end?: components['schemas']['Promotions_coupon_date_end']
      name?: components['schemas']['Promotions_coupon_name']
      bonus?: components['schemas']['Promotions_coupon_bonus']
      condition?: components['schemas']['Promotions_promotion_condition']
      is_enabled?: components['schemas']['Promotions_coupon-is_enabled']
      type?: components['schemas']['Promotions_promotion_type']
      /** @example {
       *       "discount": {
       *         "percent": "10.99"
       *       }
       *     } */
      discount?: {
        percent?: components['schemas']['Promotions_promotion_discount_percent']
      } | null
      limits?: components['schemas']['Promotions_promotion_limits_response']
    }
    /**
     * @description Unique promotion ID. The `external_id` may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
     * @default coupon_external_id
     * @example coupon_external_id
     */
    'Promotions_coupon-external_id': string
    /**
     * @description Limits total numbers of coupons.
     * @default 10
     * @example 10
     */
    'Promotions_coupon-redeem_total_limit': number | null
    /**
     * @description Limits total numbers of coupons redeemed by single user.
     * @default 10
     * @example 10
     */
    'Promotions_coupon-redeem_user_limit': number | null
    /**
     * @description Number of redemptions per code.
     * @default 10
     * @example 10
     */
    Promotions_redeem_code_limit: number | null
    /** @description Limits for each unique coupon code. */
    Promotions_coupon_total_limit_state: {
      /**
       * @description The remaining number of times a coupon can be used.
       * @example 3
       */
      available?: number
      /**
       * @description The reserved number of a coupon.
       * @example 3
       */
      reserved?: number
      /**
       * @description The number of times a coupon is used.
       * @example 5
       */
      used?: number
    } | null
    /**
     * @description Percent discount.
     *
     *     The price of cart item will be decreased using a value
     *     calculated by using this percent and then rounded
     *     to 2 decimal places.
     *
     * @default 10.00
     * @example 10.00
     */
    Promotions_cart_item_discount: string
    'Promotions_200-get-coupon-promotion-model': {
      external_id?: components['schemas']['Promotions_coupon-external_id']
      date_start?: components['schemas']['Promotions_coupon_date_start']
      date_end?: components['schemas']['Promotions_coupon_date_end']
      name?: components['schemas']['Promotions_coupon_name']
      bonus?: components['schemas']['Promotions_coupon_bonus']
      is_enabled?: components['schemas']['Promotions_coupon-is_enabled']
      redeem_total_limit?: components['schemas']['Promotions_coupon-redeem_total_limit']
      redeem_user_limit?: components['schemas']['Promotions_coupon-redeem_user_limit']
      redeem_code_limit?: components['schemas']['Promotions_redeem_code_limit']
      total_limit_state?: components['schemas']['Promotions_coupon_total_limit_state']
      /**
       * @description Only for promo codes.
       * @example {
       *       "discount": {
       *         "percent": "10.99"
       *       }
       *     }
       */
      discount?: {
        /**
         * @description Percent discount.
         *     The price of cart will be decreased using a value calculated by using this percent and then rounded to 2 decimal places.
         * @default 10.00
         * @example 10.00
         */
        percent: string | null
      } | null
      /** @description List of items that are discounted by a promo code. Only for promo codes. */
      discounted_items?:
        | {
            /**
             * @description Item SKU.
             * @default elven_shield
             */
            sku: string
            discount: {
              percent: components['schemas']['Promotions_cart_item_discount']
            }
          }[]
        | null
    }
    /**
     * @description The reward that is selected by a user.
     *     Object key is an SKU of a unit, and value is an SKU of one of the items in a unit.
     *
     * @example {
     *       "game_1": "game_1_steam",
     *       "game_2": "game_2_playstation"
     *     }
     */
    Promotions_selected_unit_items: {
      [key: string]: string | undefined
    }
    'Promotions_200-coupon-bonus-reward': {
      item?: {
        /**
         * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
         * @example game_01
         */
        sku?: string
        /**
         * @description Item name.
         * @example Game name
         */
        name?: string
        /**
         * @description Type of item: `virtual_good`/`virtual_currency`/`bundle`/`physical_good`/`unit`.
         * @example unit
         */
        type?: string
        /**
         * @description Item description.
         * @example Game description
         */
        description?: string
        /**
         * @description Image URL.
         * @example https://cdn.xsolla.net/img/misc/images/b79342cdf24f0f8557b63c87e8326e62.png
         */
        image_url?: string
        /** @description If the item has the unit type, it includes all items in the unit. In the most cases the user should choose one of them as a coupon bonus. */
        unit_items?: {
          /**
           * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
           * @example game_01
           */
          sku?: string
          /**
           * @description Type of item: `game_key`.
           * @example game_key
           */
          type?: string
          /**
           * @description Item name.
           * @example Game name
           */
          name?: string
          /**
           * @description DRM name.
           * @example Steam
           */
          drm_name?: string
          /**
           * @description Unique DRM ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
           * @example steam
           */
          drm_sku?: string
        }[]
      }
      /**
       * @description Item quantity.
       * @default 1
       */
      quantity: number
    }
    /**
     * @description The redemption limit is reached.
     * @example {
     *       "statusCode": 422,
     *       "errorCode": 9804,
     *       "errorMessage": "[0401-9804]: You have reached the coupon redemption limit."
     *     }
     */
    Promotions_422_limit_error: {
      /** @example 422 */
      statusCode?: number
      /** @example 9804 */
      errorCode?: number
      /** @example [0401-9804]: You have reached the coupon redemption limit. */
      errorMessage?: string
      /** @example x-x-x-x-transactionId-mock-x-x-x */
      transactionId?: string
    }
    /**
     * @description Coupon is not available in user's region.
     * @example {
     *       "statusCode": 422,
     *       "errorCode": 9804,
     *       "errorMessage": "[0401-9804]: You have reached the coupon redemption limit."
     *     }
     */
    Promotions_422_reglock_error: {
      /** @example 422 */
      statusCode?: number
      /** @example 9808 */
      errorCode?: number
      /** @example [0401-9808]: Coupon is not available in your region. */
      errorMessage?: string
      /** @example x-x-x-x-transactionId-mock-x-x-x */
      transactionId?: string
    }
    'Promotions_200-get-coupon-promotion-model-2': {
      external_id?: components['schemas']['Promotions_coupon-external_id']
      date_start?: components['schemas']['Promotions_coupon_date_start']
      date_end?: components['schemas']['Promotions_coupon_date_end']
      name?: components['schemas']['Promotions_coupon_name']
      bonus?: components['schemas']['Promotions_coupon_bonus']
      is_enabled?: components['schemas']['Promotions_coupon-is_enabled']
      redeem_total_limit?: components['schemas']['Promotions_coupon-redeem_total_limit']
      redeem_user_limit?: components['schemas']['Promotions_coupon-redeem_user_limit']
      redeem_code_limit?: components['schemas']['Promotions_redeem_code_limit']
      total_limit_state?: components['schemas']['Promotions_coupon_total_limit_state']
    }
    /**
     * @description Unique case sensitive code. Contains letters and numbers.
     * @default WINTER2021
     * @example WINTER2021
     */
    Promotions_coupon_code: string
    /** @example 10 */
    'Promotions_coupon-generate-count': number
    'Promotions_200-promo-code-bonus-reward': {
      item?: {
        /**
         * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
         * @example game_01
         */
        sku?: string
        /**
         * @description Item name.
         * @example Game name
         */
        name?: string
        /**
         * @description Type of item: `virtual_good`/`virtual_currency`/`bundle`/`physical_good`/`unit`.
         * @example unit
         */
        type?: string
        /**
         * @description Item description.
         * @example Game description
         */
        description?: string
        /**
         * @description Image URL.
         * @example https://cdn.xsolla.net/img/misc/images/b79342cdf24f0f8557b63c87e8326e62.png
         */
        image_url?: string
        /** @description If the item has the unit type, it includes all items in the unit. In the most cases the user should choose one of them as a promo code bonus. */
        unit_items?: {
          /**
           * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
           * @example game_01
           */
          sku?: string
          /**
           * @description Type of item: `game_key`.
           * @example game_key
           */
          type?: string
          /**
           * @description Item name.
           * @example Game name
           */
          name?: string
          /**
           * @description DRM name.
           * @example Steam
           */
          drm_name?: string
          /**
           * @description Unique DRM ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
           * @example steam
           */
          drm_sku?: string
        }[]
      }
      /**
       * @description Item quantity.
       * @default 1
       */
      quantity: number
    }
    /** @description Percent discount.
     *     The price of cart will be decreased using a value calculated by using this percent and then rounded to 2 decimal places. */
    'Promotions_200-coupon-discount-reward': {
      /** @example 10.00 */
      percent?: string
    } | null
    /** @description List of items that are discounted by a promo code. */
    Promotions_discounted_items:
      | {
          /**
           * @description Item SKU.
           * @default elven_shield
           */
          sku: string
          discount: {
            percent: components['schemas']['Promotions_cart_item_discount']
          }
        }[]
      | null
    Promo_code_rewards: {
      bonus?: components['schemas']['Promotions_200-promo-code-bonus-reward'][]
      discount?: components['schemas']['Promotions_200-coupon-discount-reward']
      discounted_items?: components['schemas']['Promotions_discounted_items']
      /** @description If `true`, the user should choose the bonus before redeeming a promo code. */
      is_selectable?: boolean
    }
    /** @description Limits for each unique promo code. */
    Promotions_promocode_total_limit_state: {
      /**
       * @description The remaining number of times a promo code can be used.
       * @example 3
       */
      available?: number
      /**
       * @description The reserved number of a promo code.
       * @example 3
       */
      reserved?: number
      /**
       * @description The number of times a promo code is used.
       * @example 5
       */
      used?: number
    } | null
    'Promotions_200-get-promocode-promotion-model': {
      external_id?: components['schemas']['Promotions_coupon-external_id']
      date_start?: components['schemas']['Promotions_coupon_date_start']
      date_end?: components['schemas']['Promotions_coupon_date_end']
      name?: components['schemas']['Promotions_coupon_name']
      bonus?: components['schemas']['Promotions_coupon_bonus']
      is_enabled?: components['schemas']['Promotions_coupon-is_enabled']
      redeem_total_limit?: components['schemas']['Promotions_coupon-redeem_total_limit']
      redeem_user_limit?: components['schemas']['Promotions_coupon-redeem_user_limit']
      redeem_code_limit?: components['schemas']['Promotions_redeem_code_limit']
      /** @example {
       *       "discount": {
       *         "percent": "10.99"
       *       }
       *     } */
      discount?: {
        percent?: components['schemas']['Promotions_promotion_discount_percent']
      } | null
      discounted_items?: components['schemas']['Promotions_discounted_items']
      total_limit_state?: components['schemas']['Promotions_promocode_total_limit_state']
    }
    /** @description Promotion limits. */
    Promotions_promotion_limits: {
      /** @description Promotion limitation for a separate user. */
      per_user?: number | null
      recurrent_schedule?: components['schemas']['recurrent_schedule']
    }
    'Promotions_200-get-bonus-promotion-model': {
      /** @description Promotion ID. Unique promotion identifier within the project. */
      id?: number
      /**
       * Format: date-time
       * @description Date when your promotion will be started.
       *
       * @default 2020-04-15T18:16:00+05:00
       */
      date_start: string
      /**
       * Format: date-time
       * @description Date when your promotion will be finished. Can be `null`. If `date_end` is `null`, promotion will be unlimited by time.
       * @default 2020-04-15T18:16:00+05:00
       */
      date_end: string | null
      /**
       * @description Name of promotion. Should contain key/value pairs
       *     where key is a locale with "^[a-z]{2}-[A-Z]{2}$" format, value is string.
       *
       * @example {
       *       "en-US": "Summer season bonus",
       *       "de-DE": "Sommersaison Bonus"
       *     }
       */
      name?: {
        [key: string]: string | undefined
      }
      /** @default true */
      is_enabled: boolean
      /** @description Set of items required to be included in the purchase for applying a promotion. If this parameters is `null`, a promotion will be applied to any purchases within a project. */
      condition?:
        | {
            /**
             * @description Item SKU.
             * @default elven_sword
             */
            sku: string
          }[]
        | null
      bonus?:
        | {
            /**
             * @description Item SKU.
             * @default elven_shield
             */
            sku: string
            /**
             * @description Item quantity.
             * @default 1
             */
            quantity: number
          }[]
        | null
      attribute_conditions?:
        | components['schemas']['user-attribute_conditions-string']
        | components['schemas']['user-attribute_conditions-date']
        | components['schemas']['user-attribute_conditions-number']
      limits?: components['schemas']['Promotions_promotion_limits_response']
    }
    Coupon_rewards: {
      bonus?: components['schemas']['Promotions_200-coupon-bonus-reward'][]
      /** @description If `true`, the user should select a bonus before redeeming a coupon. */
      is_selectable?: boolean
    }
    /** @description List of items that are discounted by a promo code. */
    Promotions_discounted_items_verify:
      | {
          /**
           * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
           * @example game_01
           */
          sku?: string
          /**
           * @description Item name.
           * @example Game name
           */
          name?: string
          /**
           * @description Type of item: `virtual_good`/`virtual_currency`/`bundle`/`physical_good`/`unit`.
           * @example unit
           */
          type?: string
          /**
           * @description Item description.
           * @example Game description
           */
          description?: string
          /**
           * @description Image URL.
           * @example https://cdn.xsolla.net/img/misc/images/b79342cdf24f0f8557b63c87e8326e62.png
           */
          image_url?: string
          /** @description If the item has the unit type, it includes all items in the unit. In the most cases the user should choose one of them as a promo code bonus. */
          unit_items?: {
            /**
             * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
             * @example game_01
             */
            sku?: string
            /**
             * @description Type of item: `game_key`.
             * @example game_key
             */
            type?: string
            /**
             * @description Item name.
             * @example Game name
             */
            name?: string
            /**
             * @description DRM name.
             * @example Steam
             */
            drm_name?: string
            /**
             * @description Unique DRM ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
             * @example steam
             */
            drm_sku?: string
          }[]
          discount?: {
            percent?: components['schemas']['Promotions_cart_item_discount']
          }
        }[]
      | null
    Promo_code_rewards_verify: {
      bonus?: components['schemas']['Promotions_200-promo-code-bonus-reward'][]
      discount?: components['schemas']['Promotions_200-coupon-discount-reward']
      discounted_items?: components['schemas']['Promotions_discounted_items_verify']
      /** @description If `true`, the user should choose the bonus before redeeming a promo code. */
      is_selectable?: boolean
    }
    /**
     * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
     * @example booster_mega_1
     */
    'Virtual-Items-Currency_sku': string
    /** @description List of attributes. */
    'Virtual-Items-Currency_schemas-admin-attributes': components['schemas']['attribute'][]
    'Virtual-Items-Currency_admin-attributes': components['schemas']['Virtual-Items-Currency_schemas-admin-attributes'] &
      unknown
    /** @description Object with localizations for item's name. Two-letter lowercase [language code](https://developers.xsolla.com/doc/pay-station/features/localization/). */
    'Virtual-Items-Currency_admin-name-two-letter-locale': {
      /** @example Item's name. */
      en?: string | null
      /** @example null */
      ar?: string | null
      /** @example null */
      bg?: string | null
      /** @example null */
      cn?: string | null
      /** @example null */
      cs?: string | null
      /** @example Name des Artikels. */
      de?: string | null
      /** @example Nombre del artículo. */
      es?: string | null
      /** @example Nom de l'élément. */
      fr?: string | null
      /** @example null */
      he?: string | null
      /** @example Nome dell'elemento. */
      it?: string | null
      /** @example 買い物の名前。 */
      ja?: string | null
      /** @example null */
      ko?: string | null
      /** @example null */
      pl?: string | null
      /** @example null */
      pt?: string | null
      /** @example null */
      ro?: string | null
      /** @example null */
      ru?: string | null
      /** @example null */
      th?: string | null
      /** @example null */
      tr?: string | null
      /** @example null */
      tw?: string | null
      /** @example null */
      vi?: string | null
    }
    /** @description Object with localizations for item's description. Two-letter lowercase [language code](https://developers.xsolla.com/doc/pay-station/features/localization/). */
    'Virtual-Items-Currency_admin-description-two-letter-locale': {
      /** @example Item's description. */
      en?: string | null
      /** @example null */
      ar?: string | null
      /** @example null */
      bg?: string | null
      /** @example null */
      cn?: string | null
      /** @example null */
      cs?: string | null
      /** @example Artikelbeschreibung. */
      de?: string | null
      /** @example Descripción del artículo. */
      es?: string | null
      /** @example Description de l'article. */
      fr?: string | null
      /** @example null */
      he?: string | null
      /** @example Descrizione dell'oggetto. */
      it?: string | null
      /** @example 買い物の説明。 */
      ja?: string | null
      /** @example null */
      ko?: string | null
      /** @example null */
      pl?: string | null
      /** @example null */
      pt?: string | null
      /** @example null */
      ro?: string | null
      /** @example null */
      ru?: string | null
      /** @example null */
      th?: string | null
      /** @example null */
      tr?: string | null
      /** @example null */
      tw?: string | null
      /** @example null */
      vi?: string | null
    }
    /** @description Object with localizations for long description of item. Two-letter lowercase [language code](https://developers.xsolla.com/doc/pay-station/features/localization/). */
    'Virtual-Items-Currency_admin-long-description-two-letter-locale': {
      /** @example Long description of item. */
      en?: string | null
      /** @example null */
      ar?: string | null
      /** @example null */
      bg?: string | null
      /** @example null */
      cn?: string | null
      /** @example null */
      cs?: string | null
      /** @example Lange Beschreibung des Artikels. */
      de?: string | null
      /** @example Descripción larga del artículo. */
      es?: string | null
      /** @example Description longue de l'article. */
      fr?: string | null
      /** @example null */
      he?: string | null
      /** @example Descrizione lunga dell'articolo. */
      it?: string | null
      /** @example アイテムの長い説明。 */
      ja?: string | null
      /** @example null */
      ko?: string | null
      /** @example null */
      pl?: string | null
      /** @example null */
      pt?: string | null
      /** @example null */
      ro?: string | null
      /** @example null */
      ru?: string | null
      /** @example null */
      th?: string | null
      /** @example null */
      tr?: string | null
      /** @example null */
      tw?: string | null
      /** @example null */
      vi?: string | null
    }
    'Virtual-Items-Currency_item-group': {
      id: number
      external_id: string
      name?: {
        [key: string]: (string | null) | undefined
      }
      description?: {
        [key: string]: (string | null) | undefined
      }
      image_url?: string | null
      level?: number
      order?: number
      parent_group_id?: number | null
      /** @default [] */
      children: Record<string, never>[]
      parent_external_id?: string | null
      is_enabled?: boolean
    }
    'Virtual-Items-Currency_item-groups': components['schemas']['Virtual-Items-Currency_item-group'][]
    /**
     * @description Item's additional assets such as screenshots, gameplay video and so on.
     * @example [
     *       {
     *         "type": "image",
     *         "url": "https://cdn3.xsolla.com/img/misc/images/71ab1e12126f2103e1868076f0acb21a.jpg"
     *       }
     *     ]
     */
    'Virtual-Items-Currency_admin-media_list': {
      /**
       * @description Type of media: `image`/`video`.
       * @example image
       * @enum {string}
       */
      type?: 'image' | 'video'
      /**
       * @description Resource file.
       * @example https://cdn3.xsolla.com/img/misc/images/71ab1e12126f2103e1868076f0acb21a.jpg
       */
      url?: string
    }[]
    /** @description Type of item: `virtual_good`/`virtual_currency`/`bundle`/`physical_good`/`unit`. */
    'Virtual-Items-Currency_type': string
    'Virtual-Items_admin-prices': {
      /** @description Amount. */
      amount: number
      /**
       * @description Default purchase currency. Three-letter code per [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
       * @example USD
       */
      currency: string
      /**
       * @description Format of country should follow the [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) standard.
       * @example US
       */
      country_iso?: string
      /** @default false */
      is_default: boolean
      /** @default true */
      is_enabled: boolean
    }[]
    'Virtual-Items-Currency_admin-get-vc_prices': {
      sku: components['schemas']['Virtual-Items-Currency_schemas-sku']
      /** @description Amount. */
      amount: number
      /** @default false */
      is_default: boolean
    }[]
    'Virtual-Items-Currency_admin-image_url': string
    /**
     * @description Defines arrangement order.
     * @example 1
     */
    'Virtual-Items-Currency_order': number
    'Virtual-Items-Currency_is_enabled': boolean
    'Virtual-Items-Currency_is_show_in_store': boolean
    /** @description Defines the inventory item options. */
    'Virtual-Items-Currency_inventory_options': {
      /** @description Defines the consumable properties if this is a consumable item, or `null` if this is a non-consumable item. */
      consumable?: {
        /**
         * @description Total number of remaining uses if this is a consumable item, or `null` if this is a non-consumable item.
         * @example 1
         */
        usages_count?: number | null
      } | null
      /** @description Defines the expiration properties if this is a expired item, or `null` if this is a non-expired item. */
      expiration_period?: {
        /**
         * @description Defines type of item expiration.
         * @example day
         * @enum {string}
         */
        type?: 'minute' | 'hour' | 'day' | 'week' | 'month' | 'year'
        /**
         * @description Defines value for an expiration period.
         * @example 1
         */
        value?: number
      } | null
    }
    'Virtual-Items-Currency_admin-regions': {
      /** @example 1 */
      id?: number
    }[]
    'Virtual-Items-Currency_admin-virtual-item': {
      sku?: components['schemas']['Virtual-Items-Currency_sku']
      attributes?: components['schemas']['Virtual-Items-Currency_admin-attributes']
      name?: components['schemas']['Virtual-Items-Currency_admin-name-two-letter-locale']
      description?: components['schemas']['Virtual-Items-Currency_admin-description-two-letter-locale']
      long_description?: components['schemas']['Virtual-Items-Currency_admin-long-description-two-letter-locale']
      groups?: components['schemas']['Virtual-Items-Currency_item-groups']
      media_list?: components['schemas']['Virtual-Items-Currency_admin-media_list']
      type?: components['schemas']['Virtual-Items-Currency_type']
      prices?: components['schemas']['Virtual-Items_admin-prices']
      vc_prices?: components['schemas']['Virtual-Items-Currency_admin-get-vc_prices']
      image_url?: components['schemas']['Virtual-Items-Currency_admin-image_url']
      is_free?: components['schemas']['value-is_free']
      order?: components['schemas']['Virtual-Items-Currency_order']
      is_enabled?: components['schemas']['Virtual-Items-Currency_is_enabled']
      is_show_in_store?: components['schemas']['Virtual-Items-Currency_is_show_in_store']
      inventory_options?: components['schemas']['Virtual-Items-Currency_inventory_options']
      regions?: components['schemas']['Virtual-Items-Currency_admin-regions']
      limits?: components['schemas']['item-limit-response']
      periods?: components['schemas']['item-periods-response']
      custom_attributes?: components['schemas']['item-custom-attributes-response']
    }
    /**
     * @description Image URL.
     * @example https://image.example.com
     */
    'Virtual-Items-Currency_schemas-admin-image_url': string
    /** @description Groups the item belongs to. */
    'Virtual-Items-Currency_admin-groups': {
      /** @example horror */
      external_id?: string
    }[]
    /** @description List of attributes.
     *     <div class="notice"><strong>Attention.</strong> You <strong>can't specify more than 20 attributes</strong> for the item. Any attempts to exceed the limit result in an error.</div>
     *      */
    'Virtual-Items-Currency_admin-post-put-attributes': components['schemas']['admin-post-put-attribute-item'][]
    'Virtual-Items-Currency_admin-create-vc_prices': {
      sku?: components['schemas']['Virtual-Items-Currency_schemas-sku']
      amount: number
      /** @default false */
      is_default: boolean
      /**
       * @description The price is enabled.
       * @default false
       */
      is_enabled: boolean
    }[]
    'Virtual-Items-Currency_is_deleted': boolean
    'Virtual-Items-Currency_admin-pre_order': {
      /** Format: date-time */
      release_date: string | null
      is_enabled: boolean
      description?: string | null
    }
    'Virtual-Items-Currency_admin-create-virtual-item': {
      sku?: components['schemas']['Virtual-Items-Currency_sku']
      name?: components['schemas']['Virtual-Items-Currency_admin-name-two-letter-locale']
      description?: components['schemas']['Virtual-Items-Currency_admin-description-two-letter-locale']
      long_description?: components['schemas']['Virtual-Items-Currency_admin-long-description-two-letter-locale']
      image_url?: components['schemas']['Virtual-Items-Currency_schemas-admin-image_url']
      media_list?: components['schemas']['Virtual-Items-Currency_admin-media_list']
      groups?: components['schemas']['Virtual-Items-Currency_admin-groups']
      attributes?: components['schemas']['Virtual-Items-Currency_admin-post-put-attributes']
      prices?: components['schemas']['Virtual-Items_admin-prices']
      vc_prices?: components['schemas']['Virtual-Items-Currency_admin-create-vc_prices']
      is_enabled?: components['schemas']['Virtual-Items-Currency_is_enabled']
      is_deleted?: components['schemas']['Virtual-Items-Currency_is_deleted']
      is_show_in_store?: components['schemas']['Virtual-Items-Currency_is_show_in_store']
      is_free?: components['schemas']['value-is_free']
      order?: components['schemas']['Virtual-Items-Currency_order']
      inventory_options?: components['schemas']['Virtual-Items-Currency_inventory_options']
      pre_order?: components['schemas']['Virtual-Items-Currency_admin-pre_order']
      regions?: components['schemas']['Virtual-Items-Currency_admin-regions']
      limits?: components['schemas']['item-limit']
      periods?: components['schemas']['item-periods']
      custom_attributes?: components['schemas']['item-custom-attributes']
    }
    'Virtual-Items-Currency_422-invalid-request': {
      /** @example 422 */
      statusCode?: number
      /** @example 1102 */
      errorCode?: number
      /** @example [0401-1102]: Unprocessable Entity. The property `property_name` is required */
      errorMessage?: string
      /** @example x-x-x-x-transactionId-mock-x-x-x */
      transactionId?: string
    }
    'Virtual-Items-Currency_admin-prices': {
      /**
       * @description Default purchase currency. Three-letter code per [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
       * @example USD
       */
      currency: string
      /** @description Amount. */
      amount: number
      /** @default false */
      is_default: boolean
      /** @default true */
      is_enabled: boolean
      /**
       * @description Country where this price is available. Two-letter code per [ISO 3166-1 alpha 2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
       * @example US
       */
      country_iso?: string | null
    }[]
    'Virtual-Items-Currency_is_hard': boolean
    'Virtual-Items-Currency_admin-virtual-currency': {
      sku?: components['schemas']['Virtual-Items-Currency_sku']
      name?: components['schemas']['Virtual-Items-Currency_admin-name-two-letter-locale']
      description?: components['schemas']['Virtual-Items-Currency_admin-description-two-letter-locale']
      long_description?: components['schemas']['Virtual-Items-Currency_admin-long-description-two-letter-locale']
      groups?: components['schemas']['Virtual-Items-Currency_item-groups']
      attributes?: components['schemas']['Virtual-Items-Currency_admin-attributes']
      media_list?: components['schemas']['Virtual-Items-Currency_admin-media_list']
      type?: components['schemas']['Virtual-Items-Currency_type']
      prices?: components['schemas']['Virtual-Items-Currency_admin-prices']
      vc_prices?: components['schemas']['Virtual-Items-Currency_admin-get-vc_prices']
      image_url?: components['schemas']['Virtual-Items-Currency_admin-image_url']
      is_enabled?: components['schemas']['Virtual-Items-Currency_is_enabled']
      is_free?: components['schemas']['value-is_free']
      order?: components['schemas']['Virtual-Items-Currency_order']
      is_show_in_store?: components['schemas']['Virtual-Items-Currency_is_show_in_store']
      is_hard?: components['schemas']['Virtual-Items-Currency_is_hard']
      regions?: components['schemas']['Virtual-Items-Currency_admin-regions']
      limits?: components['schemas']['item-limit-response']
      periods?: components['schemas']['item-periods-response']
      custom_attributes?: components['schemas']['item-custom-attributes-response']
    }
    'Virtual-Items-Currency_admin-create-virtual-currency': {
      sku: components['schemas']['Virtual-Items-Currency_sku']
      name: components['schemas']['Virtual-Items-Currency_admin-name-two-letter-locale']
      description?: components['schemas']['Virtual-Items-Currency_admin-description-two-letter-locale']
      long_description?: components['schemas']['Virtual-Items-Currency_admin-long-description-two-letter-locale']
      image_url?: components['schemas']['Virtual-Items-Currency_admin-image_url']
      media_list?: components['schemas']['Virtual-Items-Currency_admin-media_list']
      groups?: components['schemas']['Virtual-Items-Currency_item-groups']
      attributes?: components['schemas']['Virtual-Items-Currency_admin-post-put-attributes']
      prices?: components['schemas']['Virtual-Items-Currency_admin-prices']
      vc_prices?: components['schemas']['Virtual-Items-Currency_admin-create-vc_prices']
      is_enabled?: components['schemas']['Virtual-Items-Currency_is_enabled']
      is_deleted?: components['schemas']['Virtual-Items-Currency_is_deleted']
      is_show_in_store?: components['schemas']['Virtual-Items-Currency_is_show_in_store']
      is_free?: components['schemas']['value-is_free']
      is_hard?: components['schemas']['Virtual-Items-Currency_is_hard']
      order?: components['schemas']['Virtual-Items-Currency_order']
      pre_order?: components['schemas']['Virtual-Items-Currency_admin-pre_order']
      regions?: components['schemas']['Virtual-Items-Currency_admin-regions']
      limits?: components['schemas']['item-limit']
      periods?: components['schemas']['item-periods']
      custom_attributes?: components['schemas']['item-custom-attributes']
    }
    'Virtual-Items-Currency_admin-virtual-currency-package': {
      sku?: components['schemas']['Virtual-Items-Currency_sku']
      name?: components['schemas']['Virtual-Items-Currency_admin-name-two-letter-locale']
      description?: components['schemas']['Virtual-Items-Currency_admin-description-two-letter-locale']
      long_description?: components['schemas']['Virtual-Items-Currency_admin-long-description-two-letter-locale']
      type?: components['schemas']['Virtual-Items-Currency_type']
      image_url?: components['schemas']['Virtual-Items-Currency_admin-image_url']
      attributes?: components['schemas']['Virtual-Items-Currency_admin-attributes']
      is_free?: components['schemas']['value-is_free']
      order?: components['schemas']['Virtual-Items-Currency_order']
      groups?: components['schemas']['Virtual-Items-Currency_item-groups']
      prices?: components['schemas']['Virtual-Items-Currency_admin-prices']
      media_list?: components['schemas']['Virtual-Items-Currency_admin-media_list']
      vc_prices?: components['schemas']['Virtual-Items-Currency_admin-get-vc_prices']
      is_enabled?: components['schemas']['Virtual-Items-Currency_is_enabled']
      /**
       * @default virtual_currency_package
       * @example virtual_currency_package
       */
      bundle_type: string
      content?: {
        sku?: components['schemas']['Virtual-Items-Currency_sku']
        name?: components['schemas']['Virtual-Items-Currency_admin-name-two-letter-locale']
        image_url?: components['schemas']['Virtual-Items-Currency_admin-image_url']
        quantity?: number
      }[]
      is_show_in_store?: components['schemas']['Virtual-Items-Currency_is_show_in_store']
      regions?: components['schemas']['Virtual-Items-Currency_admin-regions']
      limits?: components['schemas']['item-limit-response']
      periods?: components['schemas']['item-periods-response']
      custom_attributes?: components['schemas']['item-custom-attributes']
    }
    'Virtual-Items-Currency_admin-create-virtual-currency-package':
      | {
          sku: components['schemas']['Virtual-Items-Currency_sku']
          name: components['schemas']['Virtual-Items-Currency_admin-name-two-letter-locale']
          description: components['schemas']['Virtual-Items-Currency_admin-description-two-letter-locale']
          long_description?: components['schemas']['Virtual-Items-Currency_admin-long-description-two-letter-locale']
          image_url?: components['schemas']['Virtual-Items-Currency_admin-image_url']
          media_list?: components['schemas']['Virtual-Items-Currency_admin-media_list']
          groups?: components['schemas']['Virtual-Items-Currency_item-groups']
          attributes?: components['schemas']['Virtual-Items-Currency_admin-post-put-attributes']
          prices?: components['schemas']['Virtual-Items-Currency_admin-prices']
          vc_prices?: components['schemas']['Virtual-Items-Currency_admin-create-vc_prices']
          is_enabled?: components['schemas']['Virtual-Items-Currency_is_enabled']
          is_deleted?: components['schemas']['Virtual-Items-Currency_is_deleted']
          is_show_in_store?: components['schemas']['Virtual-Items-Currency_is_show_in_store']
          is_free?: components['schemas']['value-is_free']
          order?: components['schemas']['Virtual-Items-Currency_order']
          /** @description Virtual currency package should contain only 1 position of virtual currency. */
          content: {
            sku?: components['schemas']['Virtual-Items-Currency_sku']
            quantity?: number
          }[]
          pre_order?: components['schemas']['Virtual-Items-Currency_admin-pre_order']
          regions?: components['schemas']['Virtual-Items-Currency_admin-regions']
          limits?: components['schemas']['item-limit']
          periods?: components['schemas']['item-periods']
          custom_attributes?: components['schemas']['item-custom-attributes']
        }
      | unknown
      | unknown
    /**
     * @description List of attributes and their values corresponding to the item. Can be used for catalog filtering.
     * @default []
     * @example {
     *       "value": {
     *         "external_id": "genre",
     *         "name": "Жанр",
     *         "values": [
     *           {
     *             "external_id": "genre_e3364991f92e751689a68b96598a5a5a84010b85",
     *             "value": "Casual"
     *           },
     *           {
     *             "external_id": "genre_eba07bfd0f982940773cba3744d97264dd58acd7",
     *             "value": "Strategy"
     *           },
     *           {
     *             "external_id": "genre_b8d0c6d8f0524c2b2d79ebb93aa3cd0e8b5199a8",
     *             "value": "Mobile"
     *           }
     *         ]
     *       }
     *     }
     */
    'Virtual-Items-Currency_client-attributes': {
      external_id?: components['schemas']['admin-attribute-external_id']
      /**
       * @description Name of attribute.
       * @example Genre
       */
      name?: string
      values?: {
        external_id?: components['schemas']['value-external_id']
        /**
         * @description Value of attribute.
         * @example Strategy
         */
        value?: string
      }[]
    }[]
    'Virtual-Items-Currency_item': {
      /**
       * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
       * @example big_rocket
       */
      sku?: string
      /**
       * @description Item name.
       * @example Big Rocket
       */
      name?: string
      /**
       * @description Groups the item belongs to.
       * @example [
       *       {
       *         "external_id": "accessory",
       *         "name": "Accessory"
       *       }
       *     ]
       */
      groups?: {
        /** @example accessory */
        external_id?: string
        /** @example Accessory */
        name?: string
      }[]
      attributes?: components['schemas']['Virtual-Items-Currency_client-attributes']
      /**
       * @description Type of item: `virtual_good`/`virtual_currency`/`bundle`.
       * @example virtual_good
       */
      type?: string
      /**
       * @description Item description.
       * @example Big Rocket - description
       */
      description?: string
      /**
       * @description Image URL.
       * @example https://popmedia.blob.core.windows.net/popyourself/male/outfit/male_armor_white_a-01.png
       */
      image_url?: string
      is_free?: components['schemas']['value-is_free']
      /** @description Item prices. */
      price?: {
        /**
         * @description Discounted item price.
         * @example 100.99
         */
        amount?: string
        /**
         * @description Item price.
         * @example 100.99
         */
        amount_without_discount?: string
        /**
         * @description Default purchase currency. Three-letter code per [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         * @example USD
         */
        currency?: string
      }
      /** @description Virtual prices. */
      virtual_prices?: {
        /**
         * @description Discounted item price in virtual currency.
         * @example 100
         */
        amount?: number
        /**
         * @description Item price.
         * @example 200
         */
        amount_without_discount?: number
        /**
         * @description Virtual currency item SKU.
         * @example vc_test
         */
        sku?: string
        /**
         * @description Whether price is default for item.
         * @example true
         */
        is_default?: boolean
        /**
         * @description Image of virtual currency.
         * @example http://image.png
         */
        image_url?: string
        /**
         * @description Virtual currency name.
         * @example SHOTGUN FOR TRUE RAIDERS
         */
        name?: string
        /**
         * @description Virtual currency type.
         * @example virtual_currency
         */
        type?: string
        /**
         * @description Virtual currency description.
         * @example Big Rocket - description
         */
        description?: string
      }[]
      can_be_bought?: components['schemas']['Can_be_bought']
      /** @description Defines the inventory item options. */
      inventory_options?: {
        /** @description Defines the consumable properties if this is a consumable item, or `null` if this is a non-consumable item. */
        consumable?: {
          /**
           * @description Total number of remaining uses if this is a consumable item, or `null` if this is a non-consumable item.
           * @example 1
           */
          usages_count?: number | null
        } | null
        /** @description Defines the expiration properties if this is a expired item, or `null` if this is a non-expired item. */
        expiration_period?: {
          /**
           * @description Defines type of item expiration.
           * @example day
           * @enum {string}
           */
          type?: 'minute' | 'hour' | 'day' | 'week' | 'month' | 'year'
          /**
           * @description Defines value for an expiration period.
           * @example 1
           */
          value?: number
        } | null
      }
      /**
       * @description Type of virtual item.
       * @example non-consumable
       * @enum {string}
       */
      virtual_item_type?: 'consumable' | 'non_consumable' | 'non_renewing_subscription'
      promotions?: components['schemas']['Catalog_item_promotions']
      limits?: components['schemas']['Catalog_item_limits']
      periods?: components['schemas']['item-periods-response']
      custom_attributes?: components['schemas']['item-custom-attributes-response']
    }
    'Virtual-Items-Currency_item-list': {
      has_more?: components['schemas']['Pagination_has-more']
      items?: components['schemas']['Virtual-Items-Currency_item'][]
    }
    'Virtual-Items-Currency_virtual-currency': {
      /**
       * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
       * @example big_rocket
       */
      sku?: string
      /**
       * @description Item name.
       * @example Big Rocket
       */
      name?: string
      /**
       * @description Groups the item belongs to.
       * @example [
       *       {
       *         "external_id": "accessory",
       *         "name": "Accessory"
       *       }
       *     ]
       */
      groups?: {
        /** @example accessory */
        external_id?: string
        /** @example Accessory */
        name?: string
      }[]
      attributes?: components['schemas']['Virtual-Items-Currency_client-attributes']
      /**
       * @description Type of item: `virtual_good`/`virtual_currency`/`bundle`.
       * @example virtual_currency
       */
      type?: string
      /**
       * @description Item description.
       * @example Crystals - description
       */
      description?: string
      /**
       * @description Image URL.
       * @example https://popmedia.blob.core.windows.net/popyourself/male/outfit/male_armor_white_a-01.png
       */
      image_url?: string
      is_free?: components['schemas']['value-is_free']
      /** @description Item prices. */
      prices?: {
        /**
         * @description Discounted item price.
         * @example 100.99
         */
        amount?: string
        /**
         * @description Item price.
         * @example 100.99
         */
        amount_without_discount?: string
        /**
         * @description Default purchase currency. Three-letter code per [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         * @example USD
         */
        currency?: string
      }
      /**
       * @description Virtual prices.
       * @example [
       *       {
       *         "amount": 100,
       *         "sku": "crystals",
       *         "is_default": true,
       *         "amount_without_discount": 100,
       *         "image_url": "http://image.png"
       *       }
       *     ]
       */
      virtual_prices?: {
        /**
         * @description Discounted item price in virtual currency.
         * @example 100
         */
        amount?: number
        /**
         * @description Item price.
         * @example 200
         */
        amount_without_discount?: number
        /**
         * @description Virtual currency item SKU.
         * @example vc_test
         */
        sku?: string
        /**
         * @description Whether price is default for item.
         * @example true
         */
        is_default?: boolean
        /**
         * @description Image of virtual currency.
         * @example http://image.png
         */
        image_url?: string
        /**
         * @description Virtual currency name.
         * @example Crystals
         */
        name?: string
        /**
         * @description Virtual currency type.
         * @example virtual_currency
         */
        type?: string
        /**
         * @description Virtual currency description.
         * @example Crystals - description
         */
        description?: string
      }[]
      can_be_bought?: components['schemas']['Can_be_bought']
      /** @description Defines the inventory item options. */
      inventory_options?: {
        /** @description Defines the consumable properties if this is a consumable item, or `null` if this is a non-consumable item. */
        consumable?: {
          /**
           * @description Total number of remaining uses if this is a consumable item, or `null` if this is a non-consumable item.
           * @example 1
           */
          usages_count?: number | null
        } | null
        /** @description Defines the expiration properties if this is a expired item, or `null` if this is a non-expired item. */
        expiration_period?: {
          /**
           * @description Defines type of item expiration.
           * @example day
           * @enum {string}
           */
          type?: 'minute' | 'hour' | 'day' | 'week' | 'month' | 'year'
          /**
           * @description Defines value for an expiration period.
           * @example 1
           */
          value?: number
        } | null
      }
      promotions?: components['schemas']['Catalog_item_promotions']
      limits?: components['schemas']['Catalog_item_limits']
      periods?: components['schemas']['item-periods-response']
      custom_attributes?: components['schemas']['item-custom-attributes-response']
    }
    'Virtual-Items-Currency_virtual-currency-list': {
      has_more?: components['schemas']['Pagination_has-more']
      items?: components['schemas']['Virtual-Items-Currency_virtual-currency'][]
    }
    'Virtual-Items-Currency_virtual-currency-package': {
      /**
       * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
       * @example crystal-pack
       */
      sku?: string
      /**
       * @description Item name.
       * @example Crystal Pack
       */
      name?: string
      /**
       * @description Groups the item belongs to.
       * @example [
       *       {
       *         "external_id": "accessory",
       *         "name": "Accessory"
       *       }
       *     ]
       */
      groups?: {
        /** @example accessory */
        external_id?: string
        /** @example Accessory */
        name?: string
      }[]
      attributes?: components['schemas']['Virtual-Items-Currency_client-attributes']
      /**
       * @description Type of item: `virtual_good`/`virtual_currency`/`bundle`.
       * @example bundle
       */
      type?: string
      /**
       * @description Type of bundle: `standard`/`virtual_currency_package`.
       * @example virtual_currency_package
       */
      bundle_type?: string
      /**
       * @description Item description.
       * @example Crystal Pack Description
       */
      description?: string
      /**
       * @description Image URL.
       * @example https://popmedia.blob.core.windows.net/popyourself/male/outfit/male_armor_white_a-01.png
       */
      image_url?: string
      is_free?: components['schemas']['value-is_free']
      /** @description Item prices. */
      price?: {
        /**
         * @description Discounted item price.
         * @example 100.99
         */
        amount?: string
        /**
         * @description Item price.
         * @example 100.99
         */
        amount_without_discount?: string
        /**
         * @description Default purchase currency. Three-letter code per [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         * @example USD
         */
        currency?: string
      }
      /** @description Virtual prices. */
      virtual_prices?: {
        /**
         * @description Discounted item price in virtual currency.
         * @example 100
         */
        amount?: number
        /**
         * @description Item price.
         * @example 200
         */
        amount_without_discount?: number
        /**
         * @description Virtual currency item SKU.
         * @example vc_test
         */
        sku?: string
        /**
         * @description Whether price is default for item.
         * @example true
         */
        is_default?: boolean
        /**
         * @description Image of virtual currency.
         * @example http://image.png
         */
        image_url?: string
        /**
         * @description Virtual currency name.
         * @example SHOTGUN FOR TRUE RAIDERS
         */
        name?: string
        /**
         * @description Virtual currency type.
         * @example virtual_currency
         */
        type?: string
        /**
         * @description Virtual currency description.
         * @example Big Rocket - description
         */
        description?: string
      }[]
      can_be_bought?: components['schemas']['Can_be_bought']
      /**
       * @description Virtual currency package content.
       * @example [
       *       {
       *         "description": "Crystal Pack - short description",
       *         "image_url": "https://popmedia.blob.core.windows.net/popyourself/male/outfit/male_armor_white_a-01.png",
       *         "sku": "crystal_pack",
       *         "name": "Crystal Pack",
       *         "type": "virtual_currency",
       *         "quantity": 100,
       *         "inventory_options": {
       *           "consumable": {
       *             "usages_count": 1
       *           },
       *           "expiration_period": null
       *         }
       *       }
       *     ]
       */
      content?: {
        /**
         * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, dashes, and underscores.
         * @example big_rocket
         */
        sku?: string
        /**
         * @description Item name.
         * @example Big Rocket
         */
        name?: string
        /**
         * @description Type of item: `virtual_good`/`virtual_currency`/`bundle`.
         * @example virtual_currency
         */
        type?: string
        /**
         * @description Item description.
         * @example Big Rocket - description
         */
        description?: string
        /**
         * @description Image URL.
         * @example https://popmedia.blob.core.windows.net/popyourself/male/outfit/male_armor_white_a-01.png
         */
        image_url?: string
        /**
         * @description Quantity of virtual currency in package.
         * @example 250
         */
        quantity?: number
        /** @description Defines the inventory item options. */
        inventory_options?: {
          /** @description Defines the consumable properties if this is a consumable item, or `null` if this is a non-consumable item. */
          consumable?: {
            /**
             * @description Total number of remaining uses if this is a consumable item, or `null` if this is a non-consumable item.
             * @example 1
             */
            usages_count?: number | null
          } | null
          /** @description Defines the expiration properties if this is a expired item, or `null` if this is a non-expired item. */
          expiration_period?: {
            /**
             * @description Defines type of expiration of an item.
             * @example day
             * @enum {string}
             */
            type?: 'minute' | 'hour' | 'day' | 'week' | 'month' | 'year'
            /**
             * @description Defines value for expiration period.
             * @example 1
             */
            value?: number
          } | null
        }
      }[]
      promotions?: components['schemas']['Catalog_item_promotions']
      limits?: components['schemas']['Catalog_item_limits']
      periods?: components['schemas']['item-periods-response']
      custom_attributes?: components['schemas']['item-custom-attributes-response']
    }
    'Virtual-Items-Currency_virtual-currency-packages': {
      has_more?: components['schemas']['Pagination_has-more']
      items?: components['schemas']['Virtual-Items-Currency_virtual-currency-package'][]
    }
    /**
     * @description Region ID. Unique region identifier within the project.
     * @example 42
     */
    Regions_region_id: number
    /**
     * @description Name of region. Should contain key/value pairs where key is a locale with the "^[a-z]{2}-[A-Z]{2}$" format, the value is string.
     *
     * @default {
     *       "en-US": "Asia",
     *       "de-DE": "Asien"
     *     }
     * @example {
     *       "en-US": "Asia",
     *       "de-DE": "Asien"
     *     }
     */
    Regions_name: {
      [key: string]: string | undefined
    }
    'Regions_200-region-short-model': {
      id?: components['schemas']['Regions_region_id']
      name?: components['schemas']['Regions_name']
    }
    /** @example [
     *       "JP",
     *       "CN",
     *       "VN"
     *     ] */
    Regions_countries: (
      | 'AU'
      | 'US'
      | 'MX'
      | 'EU'
      | 'CS'
      | 'CA'
      | 'GL'
      | 'GI'
      | 'BM'
      | 'YU'
      | 'RE'
      | 'FK'
      | 'AN'
      | 'AX'
      | 'MQ'
      | 'GP'
      | 'JE'
      | 'VG'
      | 'GG'
      | 'YT'
      | 'IM'
      | 'GF'
      | 'AQ'
      | 'AS'
      | 'AW'
      | 'AI'
      | 'IO'
      | 'VI'
      | 'MS'
      | 'VU'
      | 'SJ'
      | 'SH'
      | 'BV'
      | 'CC'
      | 'CK'
      | 'EH'
      | 'GS'
      | 'CX'
      | 'TK'
      | 'NU'
      | 'TF'
      | 'NF'
      | 'MP'
      | 'PR'
      | 'BY'
      | 'BO'
      | 'BS'
      | 'NL'
      | 'UY'
      | 'GB'
      | 'IN'
      | 'BZ'
      | 'AR'
      | 'ZA'
      | 'EG'
      | 'MU'
      | 'CI'
      | 'GH'
      | 'MW'
      | 'AO'
      | 'ZM'
      | 'KE'
      | 'GA'
      | 'NG'
      | 'TZ'
      | 'ML'
      | 'BJ'
      | 'MG'
      | 'TD'
      | 'BW'
      | 'LY'
      | 'CV'
      | 'RW'
      | 'MZ'
      | 'GM'
      | 'LS'
      | 'CG'
      | 'UG'
      | 'BF'
      | 'SL'
      | 'SO'
      | 'ZW'
      | 'CD'
      | 'SD'
      | 'NE'
      | 'CF'
      | 'SZ'
      | 'TG'
      | 'GN'
      | 'SN'
      | 'MA'
      | 'CM'
      | 'DZ'
      | 'MR'
      | 'NA'
      | 'DJ'
      | 'LR'
      | 'SC'
      | 'KM'
      | 'KY'
      | 'IS'
      | 'SA'
      | 'UA'
      | 'GQ'
      | 'TN'
      | 'JP'
      | 'RU'
      | 'DE'
      | 'FR'
      | 'TH'
      | 'CN'
      | 'MY'
      | 'PK'
      | 'NZ'
      | 'KR'
      | 'HK'
      | 'SG'
      | 'BD'
      | 'ID'
      | 'PH'
      | 'TW'
      | 'AF'
      | 'VN'
      | 'NC'
      | 'BN'
      | 'IL'
      | 'GR'
      | 'CH'
      | 'SE'
      | 'PL'
      | 'ME'
      | 'CZ'
      | 'BE'
      | 'IE'
      | 'IT'
      | 'DK'
      | 'IQ'
      | 'AE'
      | 'CY'
      | 'AT'
      | 'ES'
      | 'TJ'
      | 'PT'
      | 'TR'
      | 'IR'
      | 'GE'
      | 'AM'
      | 'LB'
      | 'MD'
      | 'BG'
      | 'FI'
      | 'OM'
      | 'LV'
      | 'EE'
      | 'SK'
      | 'BA'
      | 'HU'
      | 'KW'
      | 'AL'
      | 'LT'
      | 'KZ'
      | 'LU'
      | 'MK'
      | 'RS'
      | 'RO'
      | 'MT'
      | 'BH'
      | 'UZ'
      | 'AZ'
      | 'GU'
      | 'FM'
      | 'EC'
      | 'CO'
      | 'PE'
      | 'HN'
      | 'YE'
      | 'HT'
      | 'SY'
      | 'BR'
      | 'VE'
      | 'CR'
      | 'AG'
      | 'PA'
      | 'CL'
      | 'BB'
      | 'DO'
      | 'SV'
      | 'JM'
      | 'MN'
      | 'TC'
      | 'GT'
      | 'TT'
      | 'GY'
      | 'LK'
      | 'SI'
      | 'PY'
      | 'KP'
      | 'HR'
    )[]
    /** @example {
     *       "value": {
     *         "id": 44,
     *         "name": {
     *           "en-US": "Asia",
     *           "de-DE": "Asien"
     *         },
     *         "countries": [
     *           "JP",
     *           "CN",
     *           "VN"
     *         ]
     *       }
     *     } */
    'Regions_200-region-model': {
      id?: components['schemas']['Regions_region_id']
      name?: components['schemas']['Regions_name']
      countries?: components['schemas']['Regions_countries']
    }
    /**
     * @description Internal unique item ID.
     * @example 1
     */
    'Virtual-Items-Currency_item_id': number
    /**
     * @description Type of an item. Always `nft` here.
     * @example nft
     */
    'Nft-Items_type': string
    /**
     * @default false
     * @example false
     */
    'Nft-Items_is_minted': boolean
    /**
     * @description Name of blockchain.
     * @default null
     * @example Blockchain name
     */
    'Nft-Items_blockchain': string
    /**
     * @description Unique NFT token ID.
     * @default null
     * @example 1.157920892373162e+77
     */
    'Nft-Items_token_id': string
    /**
     * @description Smart contract address.
     * @default null
     * @example t1qskq33nssskznn0118oh355qjigmkpn8vekye6mctcgstrtrkibj2v7cf3tyk4ls05bdxr8nha02
     */
    'Nft-Items_smart_contract_address': string
    /**
     * @description Name of crypto account.
     * @default null
     * @example Cryptoaccount name
     */
    'Nft-Items_cryptoaccount': string
    /**
     * @description If `true`, the item is sold.
     * @example false
     */
    'Nft-Items_is_sales_exist': boolean
    'Nft-Items_admin-nft-item': {
      item_id?: components['schemas']['Virtual-Items-Currency_item_id']
      sku?: components['schemas']['Virtual-Items-Currency_sku']
      attributes?: components['schemas']['Virtual-Items-Currency_admin-attributes']
      name?: components['schemas']['Virtual-Items-Currency_admin-name-two-letter-locale']
      description?: components['schemas']['Virtual-Items-Currency_admin-description-two-letter-locale']
      long_description?: components['schemas']['Virtual-Items-Currency_admin-long-description-two-letter-locale']
      groups?: components['schemas']['Virtual-Items-Currency_item-groups']
      media_list?: components['schemas']['Virtual-Items-Currency_admin-media_list']
      type?: components['schemas']['Nft-Items_type']
      prices?: components['schemas']['Virtual-Items_admin-prices']
      vc_prices?: components['schemas']['Virtual-Items-Currency_admin-get-vc_prices']
      image_url?: components['schemas']['Virtual-Items-Currency_admin-image_url']
      is_free?: components['schemas']['value-is_free']
      order?: components['schemas']['Virtual-Items-Currency_order']
      is_enabled?: components['schemas']['Virtual-Items-Currency_is_enabled']
      is_show_in_store?: components['schemas']['Virtual-Items-Currency_is_show_in_store']
      regions?: components['schemas']['Virtual-Items-Currency_admin-regions']
      limits?: components['schemas']['item-limit-response']
      is_minted?: components['schemas']['Nft-Items_is_minted']
      blockchain?: components['schemas']['Nft-Items_blockchain']
      token_id?: components['schemas']['Nft-Items_token_id']
      smart_contract_address?: components['schemas']['Nft-Items_smart_contract_address']
      cryptoaccount?: components['schemas']['Nft-Items_cryptoaccount']
      is_sales_exist?: components['schemas']['Nft-Items_is_sales_exist']
    }
    /** @description Item limits. */
    'Nft-Items_admin-item-limit': {
      /** @description Item limitation for a separate user. */
      per_user?: number | null
      /**
       * @description Global item limitation. Always `1` for an `nft` item type.
       * @default 1
       */
      per_item: number | null
    }
    'Nft-Items_admin-create-nft-item': {
      sku?: components['schemas']['Virtual-Items-Currency_sku']
      name?: components['schemas']['Virtual-Items-Currency_admin-name-two-letter-locale']
      description?: components['schemas']['Virtual-Items-Currency_admin-description-two-letter-locale']
      long_description?: components['schemas']['Virtual-Items-Currency_admin-long-description-two-letter-locale']
      image_url?: components['schemas']['Virtual-Items-Currency_schemas-admin-image_url']
      media_list?: components['schemas']['Virtual-Items-Currency_admin-media_list']
      groups?: components['schemas']['Virtual-Items-Currency_admin-groups']
      attributes?: components['schemas']['Virtual-Items-Currency_admin-post-put-attributes']
      prices?: components['schemas']['Virtual-Items_admin-prices']
      vc_prices?: components['schemas']['Virtual-Items-Currency_admin-create-vc_prices']
      is_enabled?: components['schemas']['Virtual-Items-Currency_is_enabled']
      is_deleted?: components['schemas']['Virtual-Items-Currency_is_deleted']
      is_show_in_store?: components['schemas']['Virtual-Items-Currency_is_show_in_store']
      is_free?: components['schemas']['value-is_free']
      order?: components['schemas']['Virtual-Items-Currency_order']
      pre_order?: components['schemas']['Virtual-Items-Currency_admin-pre_order']
      regions?: components['schemas']['Virtual-Items-Currency_admin-regions']
      limits?: components['schemas']['Nft-Items_admin-item-limit']
      is_minted?: components['schemas']['Nft-Items_is_minted']
      blockchain?: components['schemas']['Nft-Items_blockchain']
      token_id?: components['schemas']['Nft-Items_token_id']
      smart_contract_address?: components['schemas']['Nft-Items_smart_contract_address']
      cryptoaccount?: components['schemas']['Nft-Items_cryptoaccount']
    }
    /** @description User external ID. */
    'User-limit_user-external-id': string
    'User-limit_user': {
      user_external_id: components['schemas']['User-limit_user-external-id']
    }
    'User-limit_user_flexible': {
      user_external_id?: components['schemas']['User-limit_user-external-id']
    } | null
    'User-limit-item': {
      per_user?: {
        /**
         * @description The maximum number of items a user can buy.
         * @example 10
         */
        total?: number
        /**
         * @description The remaining number of items available for the user to purchase.
         * @example 9
         */
        available?: number
      }
    }
    /** @description Remaining number of items or promotion uses available to the user within the limit applied. */
    'User-limit_available_flexible': number
    /** @description Remaining number of items or promotion uses available to the user within the limit applied. */
    'User-limit_available': number
    'User-limit-promotion': {
      per_user?: {
        /**
         * @description The maximum number of times a user can use a promotion.
         * @example 10
         */
        total?: number
        /**
         * @description The remaining number of times a user can use a promotion.
         * @example 9
         */
        available?: number
      }
    }
    'User-limit-promo-code': {
      per_user?: {
        /**
         * @description The maximum number of times a user can use a promo code.
         * @example 10
         */
        total?: number
        /**
         * @description The remaining number of times a user can use a promo code.
         * @example 9
         */
        available?: number
      }
    }
    /** @description Remaining number of the promo code uses available to the user within the limit applied. */
    'Promo-code-user-limit_available_flexible': number
    /** @description Remaining number of the promo code uses available to the user within the limit applied. */
    'Promo-code-user-limit_available': number
    'User-limit-coupon': {
      per_user?: {
        /**
         * @description The maximum number of times a user can use a coupon.
         * @example 10
         */
        total?: number
        /**
         * @description The remaining number of times a user can use a coupon.
         * @example 9
         */
        available?: number
      }
    }
    /** @description Remaining number of the coupon uses available to the user within the limit applied. */
    'Coupon-user-limit_available_flexible': number
    /** @description Remaining number of the coupon uses available to the user within the limit applied. */
    'Coupon-user-limit_available': number
    'Code-limit-promo-code': {
      code?: components['schemas']['Promotions_coupon_code']
      per_code?: {
        /** @description The maximum number of times a promo code can be used. */
        total?: number
        /** @description The remaining number of times promo code can be used. */
        available?: number
        /** @description The number of times a promo code is used. */
        used?: number
        /** @description The number of times a promo code is reserved. */
        reserved?: number
      }
    }
    'Value-points-item-model': {
      /**
       * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
       * @example booster_mega_1
       */
      sku?: string
      /** @description Object with localizations for item's name. Two-letter lowercase [language code](https://developers.xsolla.com/doc/pay-station/features/localization/). */
      name?: {
        /** @example Item's name. */
        en?: string | null
        /** @example null */
        ar?: string | null
        /** @example null */
        bg?: string | null
        /** @example null */
        cn?: string | null
        /** @example null */
        cs?: string | null
        /** @example Name des Artikels. */
        de?: string | null
        /** @example Nombre del artículo. */
        es?: string | null
        /** @example Nom de l'élément. */
        fr?: string | null
        /** @example null */
        he?: string | null
        /** @example Nome dell'elemento. */
        it?: string | null
        /** @example 買い物の名前。 */
        ja?: string | null
        /** @example null */
        ko?: string | null
        /** @example null */
        pl?: string | null
        /** @example null */
        pt?: string | null
        /** @example null */
        ro?: string | null
        /** @example null */
        ru?: string | null
        /** @example null */
        th?: string | null
        /** @example null */
        tr?: string | null
        /** @example null */
        tw?: string | null
        /** @example null */
        vi?: string | null
      }
      /** @description Object with localizations for item's description. Two-letter lowercase [language code](https://developers.xsolla.com/doc/pay-station/features/localization/). */
      description?: {
        /** @example Item's description. */
        en?: string | null
        /** @example null */
        ar?: string | null
        /** @example null */
        bg?: string | null
        /** @example null */
        cn?: string | null
        /** @example null */
        cs?: string | null
        /** @example Artikelbeschreibung. */
        de?: string | null
        /** @example Descripción del artículo. */
        es?: string | null
        /** @example Description de l'article. */
        fr?: string | null
        /** @example null */
        he?: string | null
        /** @example Descrizione dell'oggetto. */
        it?: string | null
        /** @example 買い物の説明。 */
        ja?: string | null
        /** @example null */
        ko?: string | null
        /** @example null */
        pl?: string | null
        /** @example null */
        pt?: string | null
        /** @example null */
        ro?: string | null
        /** @example null */
        ru?: string | null
        /** @example null */
        th?: string | null
        /** @example null */
        tr?: string | null
        /** @example null */
        tw?: string | null
        /** @example null */
        vi?: string | null
      }
      /** @description Object with localizations for long description of item. Two-letter lowercase [language code](https://developers.xsolla.com/doc/pay-station/features/localization/). */
      long_description?: {
        /** @example Long description of item. */
        en?: string | null
        /** @example null */
        ar?: string | null
        /** @example null */
        bg?: string | null
        /** @example null */
        cn?: string | null
        /** @example null */
        cs?: string | null
        /** @example Lange Beschreibung des Artikels. */
        de?: string | null
        /** @example Descripción larga del artículo. */
        es?: string | null
        /** @example Description longue de l'article. */
        fr?: string | null
        /** @example null */
        he?: string | null
        /** @example Descrizione lunga dell'articolo. */
        it?: string | null
        /** @example アイテムの長い説明。 */
        ja?: string | null
        /** @example null */
        ko?: string | null
        /** @example null */
        pl?: string | null
        /** @example null */
        pt?: string | null
        /** @example null */
        ro?: string | null
        /** @example null */
        ru?: string | null
        /** @example null */
        th?: string | null
        /** @example null */
        tr?: string | null
        /** @example null */
        tw?: string | null
        /** @example null */
        vi?: string | null
      }
      /**
       * @description Item's additional assets such as screenshots, gameplay video and so on.
       * @example [
       *       {
       *         "type": "image",
       *         "url": "https://cdn3.xsolla.com/img/misc/images/71ab1e12126f2103e1868076f0acb21a.jpg"
       *       }
       *     ]
       */
      media_list?: {
        /**
         * @description Type of media: `image`/`video`.
         * @example image
         * @enum {string}
         */
        type?: 'image' | 'video'
        /**
         * @description Resource file.
         * @example https://cdn3.xsolla.com/img/misc/images/71ab1e12126f2103e1868076f0acb21a.jpg
         */
        url?: string
      }[]
      /** @description Type of item. */
      type?: string
      image_url?: string
      is_enabled?: boolean
      /**
       * @description Defines arrangement order.
       * @example 1
       */
      order?: number
    }
    /** @description Object with localizations for item's description. Two-letter lowercase [language code](https://developers.xsolla.com/doc/pay-station/features/localization/). */
    'description-two-letter-locale': {
      /** @example Item's description. */
      en?: string | null
      /** @example null */
      ar?: string | null
      /** @example null */
      bg?: string | null
      /** @example null */
      cn?: string | null
      /** @example null */
      cs?: string | null
      /** @example Artikelbeschreibung. */
      de?: string | null
      /** @example Descripción del artículo. */
      es?: string | null
      /** @example Description de l'article. */
      fr?: string | null
      /** @example null */
      he?: string | null
      /** @example Descrizione dell'oggetto. */
      it?: string | null
      /** @example 買い物の説明。 */
      ja?: string | null
      /** @example null */
      ko?: string | null
      /** @example null */
      pl?: string | null
      /** @example null */
      pt?: string | null
      /** @example null */
      ro?: string | null
      /** @example null */
      ru?: string | null
      /** @example null */
      th?: string | null
      /** @example null */
      tr?: string | null
      /** @example null */
      tw?: string | null
      /** @example null */
      vi?: string | null
    }
    /** @example true */
    is_enabled: boolean
    /** @description Object with localizations for long description of item. Two-letter lowercase [language code](https://developers.xsolla.com/doc/pay-station/features/localization/). */
    'long-description-two-letter-locale': {
      /** @example Long description of item. */
      en?: string | null
      /** @example null */
      ar?: string | null
      /** @example null */
      bg?: string | null
      /** @example null */
      cn?: string | null
      /** @example null */
      cs?: string | null
      /** @example Lange Beschreibung des Artikels. */
      de?: string | null
      /** @example Descripción larga del artículo. */
      es?: string | null
      /** @example Description longue de l'article. */
      fr?: string | null
      /** @example null */
      he?: string | null
      /** @example Descrizione lunga dell'articolo. */
      it?: string | null
      /** @example アイテムの長い説明。 */
      ja?: string | null
      /** @example null */
      ko?: string | null
      /** @example null */
      pl?: string | null
      /** @example null */
      pt?: string | null
      /** @example null */
      ro?: string | null
      /** @example null */
      ru?: string | null
      /** @example null */
      th?: string | null
      /** @example null */
      tr?: string | null
      /** @example null */
      tw?: string | null
      /** @example null */
      vi?: string | null
    }
    /**
     * @description Item's additional assets such as screenshots, gameplay video and so on.
     * @example [
     *       {
     *         "type": "image",
     *         "url": "https://cdn3.xsolla.com/img/misc/images/71ab1e12126f2103e1868076f0acb21a.jpg"
     *       }
     *     ]
     */
    media_list: {
      /**
       * @description Type of media: `image`/`video`.
       * @example image
       * @enum {string}
       */
      type?: 'image' | 'video'
      /**
       * @description Resource file.
       * @example https://cdn3.xsolla.com/img/misc/images/71ab1e12126f2103e1868076f0acb21a.jpg
       */
      url?: string
    }[]
    /** @description Object with localizations for item's name. Two-letter lowercase [language code](https://developers.xsolla.com/doc/pay-station/features/localization/). */
    'name-two-letter-locale': {
      /** @example Item's name. */
      en?: string | null
      /** @example null */
      ar?: string | null
      /** @example null */
      bg?: string | null
      /** @example null */
      cn?: string | null
      /** @example null */
      cs?: string | null
      /** @example Name des Artikels. */
      de?: string | null
      /** @example Nombre del artículo. */
      es?: string | null
      /** @example Nom de l'élément. */
      fr?: string | null
      /** @example null */
      he?: string | null
      /** @example Nome dell'elemento. */
      it?: string | null
      /** @example 買い物の名前。 */
      ja?: string | null
      /** @example null */
      ko?: string | null
      /** @example null */
      pl?: string | null
      /** @example null */
      pt?: string | null
      /** @example null */
      ro?: string | null
      /** @example null */
      ru?: string | null
      /** @example null */
      th?: string | null
      /** @example null */
      tr?: string | null
      /** @example null */
      tw?: string | null
      /** @example null */
      vi?: string | null
    }
    /**
     * @description Defines arrangement order.
     * @example 1
     */
    order: number
    /**
     * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
     * @example booster_mega_1
     */
    sku: string
    'admin_value_points-create': {
      description?: components['schemas']['description-two-letter-locale']
      image_url?: components['schemas']['Common_admin-image_url']
      is_enabled?: components['schemas']['is_enabled']
      long_description?: components['schemas']['long-description-two-letter-locale']
      media_list?: components['schemas']['media_list']
      name: components['schemas']['name-two-letter-locale']
      order?: components['schemas']['order']
      sku: components['schemas']['sku']
    }
    '422-invalid-request-2': {
      /** @example 422 */
      statusCode?: number
      /** @example 1102 */
      errorCode?: number
      /** @example [0401-1102]: Unprocessable Entity. The property `property_name` is required */
      errorMessage?: string
      /** @example x-x-x-x-transactionId-mock-x-x-x */
      transactionId?: string
    }
    'item-value-point-reward-2': {
      item_id?: components['schemas']['item_id']
      sku?: components['schemas']['sku']
      /** @description Amount of value points. */
      amount?: number
      name?: components['schemas']['name-two-letter-locale']
      image_url?: components['schemas']['Common_admin-image_url']
    }
    'item-value-point-reward-set': {
      sku: components['schemas']['sku']
      /** @description Amount of value points. */
      amount: number
    }[]
    /**
     * @description Image URL.
     * @example https://image.example.com
     */
    image_url: string | null
    /**
     * Format: date-time
     * @description Date when your reward chain starts.
     * @example 2020-04-15T18:16:00+05:00
     */
    date_start: string
    /**
     * Format: date-time
     * @description Date when your reward chain promotion ends. Can be `null`. If `date_end` is `null`, the reward chain will be unlimited by time.
     * @example 2020-04-15T18:16:00+05:00
     */
    date_end: string | null
    /** @description Value point description. */
    'value-point-description': string | null
    /** @description Value point long description. */
    'value-point-long-description': string | null
    'reward-chain-item-model': {
      /**
       * @description Unique reward chain ID.
       * @example 9
       */
      reward_chain_id?: number
      /**
       * @description Reward chain name.
       * @example Weekly quest
       */
      name?: string
      /**
       * @description Reward chain description.
       * @example Big weekly quest
       */
      description?: string | null
      /**
       * @description Reward chain long description.
       * @example You can get a lot of additional items just by shopping during the week
       */
      long_description?: string | null
      image_url?: components['schemas']['image_url']
      order?: components['schemas']['order']
      date_start?: components['schemas']['date_start']
      date_end?: components['schemas']['date_end']
      value_point?: {
        sku?: components['schemas']['value-point-sku']
        name?: components['schemas']['value-point-name']
        image_url?: components['schemas']['Common_admin-image_url']
        description?: components['schemas']['value-point-description']
        long_description?: components['schemas']['value-point-long-description']
        amount?: components['schemas']['value-point-amount']
      }
      steps?: {
        /**
         * @description Unique step ID.
         * @example 10
         */
        step_id?: number
        /**
         * @description Step name
         * @example Level 1
         */
        name?: string
        /**
         * @description If true, the step reward is claimed.
         * @example false
         */
        is_claimed?: boolean
        price?: {
          /**
           * @description Step price in value points.
           * @example 100
           */
          amount?: number
        }
        reward?: {
          sku?: components['schemas']['sku']
          /**
           * @description Item name.
           * @example Super box
           */
          name?: string
          /**
           * @description Type of item.
           * @example bundle
           */
          type?: string
          /**
           * @description Item description.
           * @example Super box with items
           */
          description?: string
          image_url?: components['schemas']['Common_admin-image_url']
          /**
           * @description Item quantity.
           * @example 2
           */
          quantity?: number
        }[]
      }[]
    }
    /**
     * @description Unique reward chain ID.
     * @example 9
     */
    reward_chain_id: number
    'get-reward-chain-item-basic-model': {
      reward_chain_id?: components['schemas']['reward_chain_id']
      name?: components['schemas']['name-two-letter-locale']
      order?: components['schemas']['order']
      description?: components['schemas']['description-two-letter-locale']
      long_description?: components['schemas']['long-description-two-letter-locale']
      image_url?: components['schemas']['image_url']
      date_start?: components['schemas']['date_start']
      date_end?: components['schemas']['date_end']
      is_enabled?: components['schemas']['is_enabled']
      value_point?: {
        sku?: components['schemas']['sku']
      }
    }
    /**
     * @description Step price in value points.
     * @example 100
     */
    step_price_amount: number
    reward_step_price: {
      amount: components['schemas']['step_price_amount']
    }
    /**
     * @description Item quantity.
     * @example 2
     */
    reward_item_quantity: number
    /** @description Reward chain step. */
    create_reward_step: {
      name: components['schemas']['name-two-letter-locale']
      price: components['schemas']['reward_step_price']
      image_url?: components['schemas']['image_url']
      reward: {
        sku: components['schemas']['sku']
        quantity: components['schemas']['reward_item_quantity']
      }[]
    }
    'create-reward-chain-model': {
      name: components['schemas']['name-two-letter-locale']
      description?: components['schemas']['description-two-letter-locale']
      long_description?: components['schemas']['long-description-two-letter-locale']
      image_url?: components['schemas']['image_url']
      order?: components['schemas']['order']
      date_start: components['schemas']['date_start']
      date_end?: components['schemas']['date_end']
      is_enabled: components['schemas']['is_enabled']
      value_point: {
        sku: components['schemas']['sku']
      }
      steps: components['schemas']['create_reward_step'][]
    }
    /**
     * @description Unique step ID.
     * @example 10
     */
    step_id: number | null
    /** @description Reward chain step. */
    reward_step_short: {
      step_id?: components['schemas']['step_id']
      name?: components['schemas']['name-two-letter-locale']
      price?: components['schemas']['reward_step_price']
      image_url?: components['schemas']['image_url']
      reward?: {
        sku?: components['schemas']['sku']
        quantity?: components['schemas']['reward_item_quantity']
      }[]
    }
    'get-reward-chain-item-full-model': {
      reward_chain_id?: components['schemas']['reward_chain_id']
      name?: components['schemas']['name-two-letter-locale']
      order?: components['schemas']['order']
      description?: components['schemas']['description-two-letter-locale']
      long_description?: components['schemas']['long-description-two-letter-locale']
      image_url?: components['schemas']['image_url']
      date_start?: components['schemas']['date_start']
      date_end?: components['schemas']['date_end']
      is_enabled?: components['schemas']['is_enabled']
      value_point?: {
        sku?: components['schemas']['sku']
      }
      steps?: components['schemas']['reward_step_short'][]
    }
    /** @description Reward chain step. */
    modify_reward_step: {
      step_id: components['schemas']['step_id']
      name: components['schemas']['name-two-letter-locale']
      price: components['schemas']['reward_step_price']
      image_url?: components['schemas']['image_url']
      reward: {
        sku: components['schemas']['sku']
        quantity: components['schemas']['reward_item_quantity']
      }[]
    }
    'update-reward-chain-model': {
      name: components['schemas']['name-two-letter-locale']
      description?: components['schemas']['description-two-letter-locale']
      long_description?: components['schemas']['long-description-two-letter-locale']
      image_url?: components['schemas']['image_url']
      order?: components['schemas']['order']
      date_start: components['schemas']['date_start']
      date_end?: components['schemas']['date_end']
      is_enabled: components['schemas']['is_enabled']
      steps: components['schemas']['modify_reward_step'][]
    }
    /** @description A list of items SKU that are available after using the unique catalog offer. */
    Promotions_unique_catalog_offer_items: components['schemas']['sku'][]
    'Promotions_200-get-unique-catalog-offer-promotion-model': {
      external_id?: components['schemas']['Promotions_coupon-external_id']
      date_start?: components['schemas']['Promotions_coupon_date_start']
      date_end?: components['schemas']['Promotions_coupon_date_end']
      name?: components['schemas']['Promotions_coupon_name']
      items?: components['schemas']['Promotions_unique_catalog_offer_items']
      is_enabled?: components['schemas']['Promotions_coupon-is_enabled']
      redeem_total_limit?: components['schemas']['Promotions_coupon-redeem_total_limit']
      redeem_user_limit?: components['schemas']['Promotions_coupon-redeem_user_limit']
      redeem_code_limit?: components['schemas']['Promotions_redeem_code_limit']
      total_limit_state?: components['schemas']['Promotions_coupon_total_limit_state']
    }
  }
  responses: {
    /** @description List of attributes was successfully received. */
    '200-admin-get-attribute-list-response': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          attributes?: components['schemas']['admin_attribute_response'][]
          total_count?: number
        }
      }
    }
    /** @description Basic authentication not passed or wrong. Make sure you used basic authentication or correct credentials. */
    '401-invalid-basic-auth': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 401 */
          statusCode?: number
          /** @example 1020 */
          errorCode?: number
          /** @example [0401-1020]: Error in Authentication method occurred */
          errorMessage?: string
        }
      }
    }
    /** @description Attribute was successfully created. */
    '201-admin-create-attribute': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          external_id?: components['schemas']['admin-attribute-external_id']
        }
      }
    }
    /** @description Invalid request. */
    '422-validation-failed': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['schemas-422-invalid-request']
      }
    }
    /** @description Specified attribute was successfully received. */
    '200-admin-get-attribute': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['admin_attribute_response']
      }
    }
    /** @description Attribute not found. */
    '404-attribute-not-found': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 404 */
          statusCode?: number
          /** @example 9901 */
          errorCode?: number
          /** @example [0401-9901]: Attribute not found. */
          errorMessage?: string
        }
      }
    }
    /** @description Attribute was successfully updated. */
    '204-admin-update-attribute': {
      headers: {
        [name: string]: unknown
      }
      content?: never
    }
    /** @description Attribute value was successfully created. */
    '201-admin-create-attribute-value': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          external_id?: components['schemas']['value-external_id']
        }
      }
    }
    /** @description Authorization header not sent. */
    '403-auth-header-not-sent': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 403 */
          statusCode?: number
          /** @example 0 */
          errorCode?: number
          /** @example Authorization header not sent. */
          errorMessage?: string
          /** @example x-x-x-x-transactionId-mock-x-x-x */
          transactionId?: string
        }
      }
    }
    /** @description Invalid request. */
    '422-create-update-attribute-value': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['schemas-422-invalid-request']
      }
    }
    /** @description Attribute value not found. */
    '404-attribute-value-not-found': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['404-not-found']
      }
    }
    /** @description Authentication not passed or wrong. Make sure you used authentication or correct credentials. */
    'Common_401-complex': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 401 */
          statusCode?: number
          /** @example 1501 */
          errorCode?: number
          /** @example [0401-1501]: Authorization failed: Authorization header not sent */
          errorMessage?: string
        }
      }
    }
    /** @description Request validation error. */
    'Common_422-body-validation': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['422-invalid-request']
      }
    }
    /** @description The list of bundles was successfully received. */
    'Bundles_200-admin-get-bundle-list': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          items?: components['schemas']['Bundles_admin_bundle_response'][]
        }
      }
    }
    /** @description Basic authentication not passed or wrong. Make sure you used basic authentication or correct credentials. */
    'Bundles_401-invalid-basic-auth': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 401 */
          statusCode?: number
          /** @example 1020 */
          errorCode?: number
          /** @example [0401-1020]: Error in Authentication method occurred */
          errorMessage?: string
        }
      }
    }
    /** @description Bundle was successfully created. */
    'Bundles_201-admin-create-bundle': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          sku?: components['schemas']['Bundles_sku']
        }
      }
    }
    /** @description Invalid request. */
    'Bundles_422-invalid-request': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['Bundles_422-invalid-request']
      }
    }
    /** @description The list of bundles was successfully received. */
    'Bundles_200-admin-get-bundle-list-in-group': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          items?: components['schemas']['Bundles_admin_bundle_response'][]
        }
      }
    }
    /** @description The specified bundle was successfully received. */
    'Bundles_200-admin-get-bundle': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['Bundles_admin_bundle_response']
      }
    }
    /** @description Bundle was successfully updated. */
    'Bundles_204-admin-update-bundle': {
      headers: {
        [name: string]: unknown
      }
      content?: never
    }
    /** @description Bundle was successfully deleted. */
    'Bundles_204-admin-delete-bundle': {
      headers: {
        [name: string]: unknown
      }
      content?: never
    }
    /** @description Bundle was successfully displayed. */
    'Bundles_204-admin-show-bundle': {
      headers: {
        [name: string]: unknown
      }
      content?: never
    }
    /** @description Bundle was successfully hidden. */
    'Bundles_204-admin-hide-bundle': {
      headers: {
        [name: string]: unknown
      }
      content?: never
    }
    /** @description The list of bundles was successfully received. */
    'Bundles_200-get-bundle-list': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          has_more?: components['schemas']['Pagination_has-more']
          items?: components['schemas']['Bundles_client_bundle'][]
        }
      }
    }
    /** @description The cart with items was successfully returned. */
    'Cart-Payment_200-get-cart-json-model': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /**
           * @description Cart ID.
           * @example cart_id
           */
          cart_id?: string
          /**
           * @description Cart price.
           * @example {
           *       "amount": "6150.0000000000000000",
           *       "amount_without_discount": "6150.0000000000000000",
           *       "currency": "USD"
           *     }
           */
          price?: {
            /** @default 50.0000000000000000 */
            amount: string
            /** @default 100.0000000000000000 */
            amount_without_discount: string
            /** @default USD */
            currency: string
          } | null
          is_free?: components['schemas']['value-cart_is_free']
          items?: {
            sku?: string
            groups?: {
              external_id?: string
              name?: string
            }[]
            name?: string | null
            attributes?: components['schemas']['Cart-Payment_client-attributes']
            type?: string
            description?: string
            image_url?: string
            quantity?: number
            /**
             * @description Item price.
             * @example {
             *       "amount": "6150.0000000000000000",
             *       "amount_without_discount": "6150.0000000000000000",
             *       "currency": "USD"
             *     }
             */
            price?: {
              amount?: string
              amount_without_discount?: string
              currency?: string
            } | null
            is_free?: components['schemas']['value-is_free']
            is_bonus?: boolean
            promotions?: components['schemas']['Catalog_item_promotions']
          }[]
          promotions?: components['schemas']['Catalog_item_promotions']
        }
      }
    }
    /** @description The cart with items was successfully returned. */
    'Cart-Payment_200-fill-cart-json-model': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /**
           * @description Cart ID.
           * @example cart_id
           */
          cart_id?: string
          /**
           * @description Cart price.
           * @example {
           *       "amount": "6150.0000000000000000",
           *       "amount_without_discount": "6150.0000000000000000",
           *       "currency": "USD"
           *     }
           */
          price?: {
            /** @default 50.0000000000000000 */
            amount: string
            /** @default 100.0000000000000000 */
            amount_without_discount: string
            /** @default USD */
            currency: string
          } | null
          is_free?: components['schemas']['value-cart_is_free']
          items?: {
            sku?: string
            groups?: {
              external_id?: string
              name?: string
            }[]
            name?: string | null
            attributes?: components['schemas']['Cart-Payment_client-attributes']
            type?: string
            description?: string
            image_url?: string
            quantity?: number
            /**
             * @description Item price.
             * @example {
             *       "amount": "6150.0000000000000000",
             *       "amount_without_discount": "6150.0000000000000000",
             *       "currency": "USD"
             *     }
             */
            price?: {
              amount?: string
              amount_without_discount?: string
              currency?: string
            } | null
            is_free?: components['schemas']['value-is_free']
            is_bonus?: boolean
            promotions?: components['schemas']['Catalog_item_promotions']
          }[]
          promotions?: components['schemas']['Catalog_item_promotions']
          warnings?: {
            sku?: string
            quantity?: number
            errorCode?: number
            errorMessage?: string
          }[]
        }
      }
    }
    /** @description The item was not found. Make sure the `project_id` and the `item_sku` are correct. */
    'Cart-Payment_404-item': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 404 */
          statusCode?: number
          /** @example 4001 */
          errorCode?: number
          /** @example [0401-4001]: Item with Project Id = 44056 and Sku = booster_mega_12222 not found */
          errorMessage?: string
        }
      }
    }
    /** @description Item quantity must be non-negative integer. */
    'Cart-Payment_422-non-negative-quantity': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 422 */
          statusCode?: number
          /** @example Item quantity must be non-negative integer. */
          errorMessage?: string
          /** @example 1102 */
          errorCode?: number
        }
      }
    }
    /** @description This type of item cannot be put to the cart. Select another type of item. */
    'Cart-Payment_422-can-put-only-virtual-good-to-cart': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 422 */
          statusCode?: number
          /** @example 1421 */
          errorCode?: number
          /** @example This type of item cannot be put to the cart. Select another type of item. */
          errorMessage?: string
        }
      }
    }
    /** @description Order was successfully created. */
    'Cart-Payment_200-order-created': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @description Order ID. */
          order_id?: number
          /** @description Payment token. */
          token?: string
        }
      }
    }
    /** @description Invalid cart. Check that cart exists, not empty, and all items in it are not free. */
    'Cart-Payment_422-invalid-cart': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 1401 */
          errorCode?: number
          /** @example 422 */
          statusCode?: number
          /** @example [0401-1401]: Invalid cart */
          errorMessage?: string
        }
      }
    }
    /** @description Item or coupon not found. Make sure the used data is correct. */
    'Cart-Payment_404-create-order-with-item-not-found-errors': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          statusCode?: number
          errorCode?: number
          errorMessage?: string
          transactionId?: string
        }
      }
    }
    /** @description Invalid error. */
    'Cart-Payment_422-create-order-with-item-invalid': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 1411 */
          errorCode?: number
          /** @example 422 */
          statusCode?: number
          /** @example [0401-1411]: Invalid item */
          errorMessage?: string
        }
      }
    }
    /** @description Free order was successfully created. */
    'Cart-Free_200-order-created': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @description Order ID. */
          order_id?: number
        }
      }
    }
    /** @description Invalid item. Check that item exists, not turned off, deleted, and not free. */
    'Cart-Payment_422-invalid-item': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 1411 */
          errorCode?: number
          /** @example 422 */
          statusCode?: number
          /** @example [0401-1411]: Invalid item */
          errorMessage?: string
        }
      }
    }
    /** @description Successful order request. */
    'Cart-Payment_200-get-order': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /**
           * @description Order ID.
           * @default Order ID.
           * @example 1
           */
          order_id: number
          /**
           * @description Order status: `new`/`paid`/`done`/`canceled`.
           * @example paid
           */
          status?: string
          /** @description Order details. */
          content?: {
            /** @description Order price. */
            price?: {
              /**
               * @description Order discount price.
               * @example 30
               */
              amount?: string
              /**
               * @description Order price.
               * @example 30
               */
              amount_without_discount?: string
              /**
               * @description Default purchase currency. Three-letter code per [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
               * @example USD
               */
              currency?: string
            }
            /** @description Order price in virtual currency. */
            virtual_price?: {
              /**
               * @description Order discount price.
               * @example 100
               */
              amount?: string
              /**
               * @description Order price.
               * @example 150
               */
              amount_without_discount?: string
              /**
               * @description Virtual currency SKU used in order.
               * @example test_vc
               */
              currency?: string
            }
            /**
             * @description If `true`, the order is free.
             * @example false
             */
            is_free?: string
            /**
             * @description Items list.
             * @example [
             *       {
             *         "sku": "some_sku",
             *         "quantity": 1,
             *         "is_free": false,
             *         "price": {
             *           "amount": "30",
             *           "amount_without_discount": "30",
             *           "currency": "USD"
             *         }
             *       }
             *     ]
             */
            items?: {
              /**
               * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
               * @example some_sku
               */
              sku?: string
              /**
               * @description Item quantity.
               * @example 1
               */
              quantity?: number
              is_free?: components['schemas']['value-is_free']
              /** @description Item price. */
              price?: {
                /**
                 * @description Discounted item price.
                 * @example 30
                 */
                amount?: string
                /**
                 * @description Item price.
                 * @example 30
                 */
                amount_without_discount?: string
                /**
                 * @description Default purchase currency. Three-letter code per [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
                 * @example USD
                 */
                currency?: string
              }
            }[]
          }
        }
      }
    }
    /** @description Order not found. Make sure the `project_id` and the `order_id` are correct. */
    'Cart-Payment_404-get-order': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 404 */
          statusCode?: number
          /** @example 9001 */
          errorCode?: number
          /** @example [0401-9001]: Order not found */
          errorMessage?: string
        }
      }
    }
    /** @description Successfully created payment token and order. */
    'Cart-Payment_200-admin-create-payment-token': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @description Payment token. */
          token?: string
          /**
           * @description Order ID.
           * @example 1
           */
          order_id?: number
        }
      }
    }
    /** @description Basic authentication not passed or wrong. Make sure you used basic authentication or correct credentials. */
    'Cart-Payment_401-invalid-basic-auth': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 401 */
          statusCode?: number
          /** @example 1020 */
          errorCode?: number
          /** @example [0401-1020]: Error in Authentication method occurred */
          errorMessage?: string
        }
      }
    }
    /** @description Request body and creating cart validation error.
     *     - Invalid cart, created from passed items. Checks that the cart is not empty and that all items are not free.
     *     - Invalid request body. */
    'Cart-Payment_422-admin-create-payment-token': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['422-invalid-request']
      }
    }
    /** @description The cart with items was successfully returned. */
    'Cart-Payment_200-admin-fill-cart-json-model': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /**
           * @description Cart ID. Pass it to query for buy page or payment API endpoints.
           * @example cart_id
           */
          cart_id?: string
          /** @description Cart price. */
          price?: {
            amount?: string
            amount_without_discount?: string
            currency?: string
          } | null
          is_free?: components['schemas']['value-cart_is_free']
          items?: {
            sku?: string
            groups?: {
              external_id?: string
              name?: string
            }[]
            name?: string | null
            attributes?: components['schemas']['Cart-Payment_client-attributes']
            type?: string
            description?: string
            image_url?: string
            quantity?: number
            is_free?: components['schemas']['value-is_free']
            is_bonus?: boolean
            promotions?: components['schemas']['Catalog_item_promotions']
          }[]
          promotions?: components['schemas']['Catalog_item_promotions']
          warnings?: {
            sku?: string
            quantity?: number
            errorCode?: number
            errorMessage?: string
          }[]
        }
      }
    }
    /** @description The user was not found. Make sure the `x-user-for` or `x-user-id` token is correct. */
    'Cart-Payment_404-user': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 404 */
          statusCode?: number
          /** @example 5008 */
          errorCode?: number
          /** @example [0401-5008]: Could not find User */
          errorMessage?: string
        }
      }
    }
    /** @description Basic authentication not passed or wrong. Make sure you used basic authentication or correct credentials. */
    'Common_401-invalid-basic-auth': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 401 */
          statusCode?: number
          /** @example 1020 */
          errorCode?: number
          /** @example [0401-1020]: Error in Authentication method occurred */
          errorMessage?: string
        }
      }
    }
    /** @description The list of games was successfully received. */
    'Game-Keys_200-get-games-catalog': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          has_more?: components['schemas']['Pagination_has-more']
          /** @example [
           *       {
           *         "sku": "game_1",
           *         "name": "Game name",
           *         "groups": [
           *           {
           *             "external_id": "all",
           *             "name": "All games"
           *           },
           *           {
           *             "external_id": "Xsolla",
           *             "name": "Xsolla games"
           *           }
           *         ],
           *         "type": "unit",
           *         "unit_type": "game",
           *         "description": "Game description",
           *         "image_url": "https://cdn.xsolla.net/img/misc/images/b79342cdf24f0f8557b63c87e8326e62.png",
           *         "attributes": [
           *           {
           *             "external_id": "genre",
           *             "name": "Genre",
           *             "values": [
           *               {
           *                 "external_id": "23fda05111c125608af8f1fa0e99db45a10ea1cc",
           *                 "value": "Horror"
           *               }
           *             ]
           *           }
           *         ],
           *         "promotions": [],
           *         "unit_items": [
           *           {
           *             "sku": "game_key_01",
           *             "type": "game_key",
           *             "is_free": false,
           *             "price": {
           *               "amount": "30.5",
           *               "amount_without_discount": "30.5",
           *               "currency": "USD"
           *             },
           *             "virtual_prices": [],
           *             "can_be_bought": true,
           *             "drm_name": "Steam",
           *             "drm_sku": "steam",
           *             "has_keys": true,
           *             "is_pre_order": true,
           *             "release_date": "2020-08-11T10:00:00+03:00",
           *             "promotions": [],
           *             "periods": [
           *               {
           *                 "date_from": "2020-08-11T10:00:00+03:00",
           *                 "date_until": "2020-08-11T20:00:00+03:00"
           *               }
           *             ]
           *           },
           *           {
           *             "sku": "game_key_02",
           *             "type": "game_key",
           *             "is_free": false,
           *             "price": {
           *               "amount": "30.5",
           *               "amount_without_discount": "30.5",
           *               "currency": "USD"
           *             },
           *             "virtual_prices": [],
           *             "can_be_bought": true,
           *             "drm_name": "Origin",
           *             "drm_sku": "origin",
           *             "has_keys": false,
           *             "is_pre_order": false,
           *             "release_date": null,
           *             "promotions": [],
           *             "periods": []
           *           }
           *         ]
           *       },
           *       {
           *         "sku": "game_2",
           *         "name": "Game name",
           *         "groups": [
           *           {
           *             "external_id": "all",
           *             "name": "All games"
           *           }
           *         ],
           *         "type": "unit",
           *         "unit_type": "game",
           *         "description": "Game description",
           *         "image_url": "https://cdn.xsolla.net/img/misc/images/b79342cdf24f0f8557b63c87e8326e62.png",
           *         "attributes": [
           *           {
           *             "external_id": "OS",
           *             "name": "OS",
           *             "values": [
           *               {
           *                 "external_id": "9d5c5efb7c0f00a00fe4e3583f1215b0050bc723",
           *                 "value": "Windows"
           *               }
           *             ]
           *           }
           *         ],
           *         "promotions": [],
           *         "unit_items": [
           *           {
           *             "sku": "game_key_01",
           *             "type": "game_key",
           *             "is_free": false,
           *             "price": {
           *               "amount": "30.5",
           *               "amount_without_discount": "30.5",
           *               "currency": "USD"
           *             },
           *             "virtual_prices": [],
           *             "can_be_bought": true,
           *             "drm_name": "Steam",
           *             "drm_sku": "steam",
           *             "has_keys": false,
           *             "is_pre_order": false,
           *             "release_date": null,
           *             "promotions": [],
           *             "periods": [
           *               {
           *                 "date_from": null,
           *                 "date_until": "2020-08-11T20:00:00+03:00"
           *               }
           *             ]
           *           }
           *         ]
           *       }
           *     ] */
          items?: {
            /**
             * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
             * @example game_01
             */
            sku?: string
            /**
             * @description Item name.
             * @example Game name
             */
            name?: string
            /**
             * @description Groups the item belongs to.
             * @example [
             *       {
             *         "external_id": "all",
             *         "name": "All games"
             *       },
             *       {
             *         "external_id": "Xsolla",
             *         "name": "Xsolla game"
             *       }
             *     ]
             */
            groups?: {
              /** @example accessory */
              external_id?: string
              /** @example Accessory */
              name?: string
            }[]
            attributes?: components['schemas']['Game-Keys_schemas-client-attributes']
            /**
             * @description Type of item: `virtual_good`/`virtual_currency`/`bundle`/`physical_good`/`unit`.
             * @example unit
             */
            type?: string
            /**
             * @description Type of unit: `game`.
             * @example game
             */
            unit_type?: string
            /**
             * @description Item description.
             * @example Game description
             */
            description?: string
            /**
             * @description Image URL.
             * @example https://cdn.xsolla.net/img/misc/images/b79342cdf24f0f8557b63c87e8326e62.png
             */
            image_url?: string
            promotions?: components['schemas']['Catalog_item_promotions']
            unit_items?: {
              /**
               * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
               * @example game_01
               */
              sku?: string
              /**
               * @description Type of item: `game_key`.
               * @example game_key
               */
              type?: string
              is_free?: components['schemas']['value-is_free']
              /** @description Item prices. */
              price?: {
                /**
                 * @description Discounted item price.
                 * @example 2.9900
                 */
                amount?: string
                /**
                 * @description Item price.
                 * @example 2.9900
                 */
                amount_without_discount?: string
                /**
                 * @description Default purchase currency. Three-letter code per [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
                 * @example USD
                 */
                currency?: string
              }
              /** @description Virtual prices. */
              virtual_prices?: {
                /**
                 * @description Discounted item price in virtual currency.
                 * @example 100
                 */
                amount?: number
                /**
                 * @description Item price.
                 * @example 200
                 */
                amount_without_discount?: number
                /**
                 * @description Virtual currency item SKU.
                 * @example vc_test
                 */
                sku?: string
                /**
                 * @description Whether price is default for item.
                 * @example true
                 */
                is_default?: boolean
                /**
                 * @description Image of virtual currency.
                 * @example http://image.png
                 */
                image_url?: string
                /**
                 * @description Virtual currency name.
                 * @example SHOTGUN FOR TRUE RAIDERS
                 */
                name?: string
                /**
                 * @description Virtual currency type.
                 * @example virtual_currency
                 */
                type?: string
                /**
                 * @description Virtual currency description.
                 * @example Big Rocket - description
                 */
                description?: string
              }[]
              can_be_bought?: components['schemas']['Can_be_bought']
              /**
               * @description DRM name.
               * @example Steam
               */
              drm_name?: string
              /**
               * @description Unique DRM ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
               * @example steam
               */
              drm_sku?: string
              /**
               * @description If `true`, the game key has keys for sale.
               * @example false
               */
              has_keys?: boolean
              /**
               * @description If `true`, the game key is pre-order and the release date hasn't passed.
               * @example true
               */
              is_pre_order?: boolean
              /**
               * @description Game key release date in the ISO 8601 format.
               * @example 2020-08-11T10:00:00+03:00
               */
              release_date?: string
              promotions?: components['schemas']['Catalog_item_promotions']
              periods?: components['schemas']['item-periods']
              vp_rewards?: components['schemas']['item-value-point-reward'][]
            }[]
          }[]
        }
      }
    }
    /** @description The list of game keys was successfully received. */
    'Game-Keys_200-get-game-keys-by-group-catalog': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          has_more?: components['schemas']['Pagination_has-more']
          /** @example [
           *       {
           *         "sku": "game_1",
           *         "name": "Game name",
           *         "groups": [
           *           {
           *             "external_id": "all",
           *             "name": "All games"
           *           },
           *           {
           *             "external_id": "Xsolla",
           *             "name": "Xsolla games"
           *           }
           *         ],
           *         "type": "game_key",
           *         "description": "Game description",
           *         "image_url": "https://cdn.xsolla.net/img/misc/images/b79342cdf24f0f8557b63c87e8326e62.png",
           *         "attributes": [
           *           {
           *             "external_id": "OS",
           *             "name": "OS",
           *             "values": [
           *               {
           *                 "external_id": "9d5c5efb7c0f00a00fe4e3583f1215b0050bc723",
           *                 "value": "Windows"
           *               }
           *             ]
           *           },
           *           {
           *             "external_id": "genre",
           *             "name": "Genre",
           *             "values": [
           *               {
           *                 "external_id": "23fda05111c125608af8f1fa0e99db45a10ea1cc",
           *                 "value": "Horror"
           *               }
           *             ]
           *           }
           *         ],
           *         "is_free": false,
           *         "price": {
           *           "amount": "30.5",
           *           "amount_without_discount": "30.5",
           *           "currency": "USD"
           *         },
           *         "virtual_prices": [],
           *         "drm_name": "Steam",
           *         "drm_sku": "steam",
           *         "has_keys": true,
           *         "is_pre_order": true,
           *         "release_date": "2020-08-11T10:00:00+03:00",
           *         "periods": [
           *           {
           *             "date_from": "2020-08-11T10:00:00+03:00",
           *             "date_until": "2020-08-11T20:00:00+03:00"
           *           }
           *         ]
           *       },
           *       {
           *         "sku": "game_2",
           *         "name": "Game name",
           *         "groups": [
           *           {
           *             "external_id": "all",
           *             "name": "All games"
           *           }
           *         ],
           *         "type": "game_key",
           *         "description": "Game description",
           *         "image_url": "https://cdn.xsolla.net/img/misc/images/b79342cdf24f0f8557b63c87e8326e62.png",
           *         "attributes": [
           *           {
           *             "external_id": "OS",
           *             "name": "OS",
           *             "values": [
           *               {
           *                 "external_id": "9d5c5efb7c0f00a00fe4e3583f1215b0050bc723",
           *                 "value": "Windows"
           *               }
           *             ]
           *           },
           *           {
           *             "external_id": "genre",
           *             "name": "Genre",
           *             "values": [
           *               {
           *                 "external_id": "23fda05111c125608af8f1fa0e99db45a10ea1cc",
           *                 "value": "Horror"
           *               }
           *             ]
           *           }
           *         ],
           *         "is_free": false,
           *         "price": {
           *           "amount": "30.5",
           *           "amount_without_discount": "30.5",
           *           "currency": "USD"
           *         },
           *         "virtual_prices": [],
           *         "drm_name": "Steam",
           *         "drm_sku": "steam",
           *         "has_keys": true,
           *         "is_pre_order": false,
           *         "release_date": null,
           *         "periods": []
           *       }
           *     ] */
          items?: {
            /**
             * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
             * @example game_01
             */
            sku?: string
            /**
             * @description Item name.
             * @example Game name
             */
            name?: string
            /**
             * @description Groups the item belongs to.
             * @example [
             *       {
             *         "external_id": "all",
             *         "name": "All games"
             *       },
             *       {
             *         "external_id": "Xsolla",
             *         "name": "Xsolla game"
             *       }
             *     ]
             */
            groups?: {
              /** @example accessory */
              external_id?: string
              /** @example Accessory */
              name?: string
            }[]
            attributes?: components['schemas']['Game-Keys_schemas-client-attributes']
            /**
             * @description Type of item: `game_key`.
             * @example game_key
             */
            type?: string
            /**
             * @description Item description.
             * @example Game description
             */
            description?: string
            /**
             * @description Image URL.
             * @example https://cdn.xsolla.net/img/misc/images/b79342cdf24f0f8557b63c87e8326e62.png
             */
            image_url?: string
            is_free?: components['schemas']['value-is_free']
            /** @description Item prices. */
            price?: {
              /**
               * @description Discounted item price.
               * @example 2.9900
               */
              amount?: string
              /**
               * @description Item price.
               * @example 2.9900
               */
              amount_without_discount?: string
              /**
               * @description Default purchase currency. Three-letter code per [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
               * @example USD
               */
              currency?: string
            }
            /** @description Virtual prices. */
            virtual_prices?: {
              /**
               * @description Discounted item price in virtual currency.
               * @example 100
               */
              amount?: number
              /**
               * @description Item price.
               * @example 200
               */
              amount_without_discount?: number
              /**
               * @description Virtual currency item SKU.
               * @example vc_test
               */
              sku?: string
              /**
               * @description Whether price is default for item.
               * @example true
               */
              is_default?: boolean
              /**
               * @description Image of virtual currency.
               * @example http://image.png
               */
              image_url?: string
              /**
               * @description Virtual currency name.
               * @example SHOTGUN FOR TRUE RAIDERS
               */
              name?: string
              /**
               * @description Virtual currency type.
               * @example virtual_currency
               */
              type?: string
              /**
               * @description Virtual currency description.
               * @example Big Rocket - description
               */
              description?: string
            }[]
            /**
             * @description DRM name.
             * @example Steam
             */
            drm_name?: string
            /**
             * @description Unique DRM ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
             * @example steam
             */
            drm_sku?: string
            /**
             * @description If `true`, the game key has keys for sale.
             * @example false
             */
            has_keys?: boolean
            /**
             * @description If `true`, the game key is pre-order and the release date hasn't passed.
             * @example true
             */
            is_pre_order?: boolean
            /**
             * @description Game key release date in the ISO 8601 format.
             * @example 2020-08-11T10:00:00+03:00
             */
            release_date?: string
            periods?: components['schemas']['item-periods-response']
          }[]
        }
      }
    }
    /** @description The list of DRMs was successfully received. */
    'Game-Keys_200-get-drm-list': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example [
           *       {
           *         "sku": "steam",
           *         "name": "Steam",
           *         "image": "https://cdn.xsolla.net/img/misc/images/b79342cdf24f0f8557b63c87e8326e62.png",
           *         "link": "https://support.steampowered.com",
           *         "redeem_instruction_link": "https://support.steampowered.com",
           *         "drm_id": 1
           *       },
           *       {
           *         "sku": "playstation",
           *         "name": "Playstation",
           *         "image": "https://cdn.xsolla.net/img/misc/images/b79342cdf24f0f8557b63c87e8326e62.png",
           *         "link": null,
           *         "redeem_instruction_link": "https://support.us.playstation.com",
           *         "drm_id": 2
           *       }
           *     ] */
          drm?: {
            /**
             * @description Unique DRM ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
             * @example steam
             */
            sku?: string
            /**
             * @description DRM name.
             * @example Steam
             */
            name?: string
            /**
             * @description Image URL.
             * @example https://cdn.xsolla.net/img/misc/images/b79342cdf24f0f8557b63c87e8326e62.png
             */
            image?: string
            /**
             * @description Redeem link.
             * @example https://support.us.playstation.com
             */
            link?: string
            /**
             * @description Redeem instruction link.
             * @example https://support.us.playstation.com
             */
            redeem_instruction_link?: string
            /**
             * @description DRM ID.
             * @example 1
             */
            drm_id?: number
          }[]
        }
      }
    }
    /** @description The list of games was successfully received. */
    'Game-Keys_200-admin-get-games-list': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          items?: {
            /**
             * @description Internal unique item ID that is provided upon item creation.
             * @example 1
             */
            item_id?: number
            /**
             * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
             * @example game_1
             */
            sku?: string
            /**
             * @description Type of item. In this case it is always `unit`.
             * @example unit
             */
            type?: string
            name?: components['schemas']['Game-Keys_admin-name-two-letter-locale']
            description?: components['schemas']['Game-Keys_admin-description-two-letter-locale']
            long_description?: components['schemas']['Game-Keys_admin-long-description-two-letter-locale']
            /**
             * @description Image URL.
             * @example https://image.example.com
             */
            image_url?: string
            /**
             * @description Game additional assets such as screenshots, gameplay video and so on.
             * @example [
             *       {
             *         "type": "image",
             *         "url": "https://cdn3.xsolla.com/img/misc/images/71ab1e12126f2103e1868076f0acb21a.jpg"
             *       }
             *     ]
             */
            media_list?: {
              /**
               * @description Type of media: `image`/`video`.
               * @example image
               * @enum {string}
               */
              type?: 'image' | 'video'
              /**
               * @description Resource file.
               * @example https://cdn3.xsolla.com/img/misc/images/71ab1e12126f2103e1868076f0acb21a.jpg
               */
              url?: string
            }[]
            /**
             * @description Game order priority in the list.
             * @example 1
             */
            order?: number
            /**
             * @description Groups the item belongs to.
             * @example [
             *       {
             *         "external_id": "horror",
             *         "name": {
             *           "en": "Horror"
             *         }
             *       }
             *     ]
             */
            groups?: {
              /** @example horror */
              external_id?: string
              /** @example {
               *       "en": "Horror"
               *     } */
              name?: Record<string, never>
            }[]
            attributes?: components['schemas']['Game-Keys_admin-attributes']
            is_free?: components['schemas']['value-is_free']
            /** @description Game keys for different DRMs. */
            unit_items?: {
              /**
               * @description Internal unique item ID that is provided upon item creation.
               * @example 1
               */
              item_id?: number
              /**
               * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
               * @example game_1
               */
              sku?: string
              /**
               * @description Type of item. In this case it is always `game_key`.
               * @example game_key
               */
              type?: string
              is_free?: components['schemas']['value-is_free']
              /**
               * @description Prices in real currencies.
               * @example [
               *       {
               *         "amount": 1299.99,
               *         "currency": "RUB",
               *         "is_default": true,
               *         "is_enabled": true
               *       }
               *     ]
               */
              prices?: {
                /** @example 1299.99 */
                amount?: number
                /**
                 * @description Default purchase currency. Three-letter code per [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
                 * @example RUB
                 */
                currency?: string
                /** @description Default price is used to build catalog if no price in user's currency is specified. */
                is_default?: boolean
                is_enabled?: boolean
                /**
                 * @description Country where this price is available. Two-letter code per [ISO 3166-1 alpha 2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
                 * @example US
                 */
                country_iso?: string | null
              }[]
              /** @example [
               *       {
               *         "sku": "gold",
               *         "name": {
               *           "en": "Gold"
               *         },
               *         "type": "virtual_currency",
               *         "description": null,
               *         "image_url": "https://i.pinimg.com/originals/91/ae/56/91ae5683045f6dbef16b1482bade938f.png",
               *         "amount": 1000,
               *         "is_default": true
               *       }
               *     ] */
              virtual_prices?: {
                /**
                 * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
                 * @example gold
                 */
                sku?: string
                /**
                 * @description Object with localizations for virtual currency's name. Keys are specified in ISO 3166-1.
                 * @example {
                 *       "en": "Gold"
                 *     }
                 */
                name?: {
                  [key: string]: unknown
                }
                /**
                 * @description Type of item. In this case it is always `virtual_currency`.
                 * @example virtual_currency
                 */
                type?: string
                /**
                 * @description Object with localizations for game description. Keys are specified in ISO 3166-1.
                 * @example {
                 *       "en": "Game 1 Example"
                 *     }
                 */
                description?: {
                  [key: string]: unknown
                }
                /**
                 * @description Image URL.
                 * @example https://image.example.com
                 */
                image_url?: string
                amount?: number
                is_default?: boolean
              }[]
              /**
               * @description Game order priority in the list.
               * @example 1
               */
              order?: number
              /** @description If disabled, item cannot be purchased and accessed through inventory. */
              is_enabled?: boolean
              /** @description Item is available for purchase. */
              is_show_in_store?: boolean
              /**
               * @description Game key DRM name.
               * @example Steam
               */
              drm_name?: string
              /**
               * @description DRM unique ID.
               * @example steam
               */
              drm_sku?: string
              /**
               * @description Game key DRM icon.
               * @example https://upload.wikimedia.org/wikipedia/en/4/48/Steam_Icon_2014.png
               */
              drm_image?: string
              /**
               * @description DRM internal unique ID.
               * @example 1
               */
              drm_id?: number
              keys?: {
                /** @description Number of keys available for purchase. */
                available?: number
                /** @description Total number of uploaded keys. */
                total?: number
                /** @description Number of sold keys. */
                used?: number
              }
              /** @description If `true`, the game key was purchased by users. */
              is_sales_exist?: boolean
              /** @description Pre-order settings. */
              pre_order?: {
                /** @description Game key release date in the ISO 8601 format. */
                release_date?: string
                /** @description If disabled, the item is not a pre-order. */
                is_enabled?: boolean
                /** @description Additional information for the pre-order which will be emailed. */
                description?: string
              }
              regions?: components['schemas']['Game-Keys_regions']
              limits?: components['schemas']['item-limit-response']
              periods?: components['schemas']['item-periods-response']
            }[]
          }[]
        }
      }
    }
    /** @description Basic authentication not passed or wrong. Make sure you used basic authentication or correct credentials. */
    'Game-Keys_401-invalid-basic-auth': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 401 */
          statusCode?: number
          /** @example 1020 */
          errorCode?: number
          /** @example [0401-1020]: Error in Authentication method occurred */
          errorMessage?: string
        }
      }
    }
    /** @description Invalid request. */
    'Game-Keys_422-invalid-request': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['Game-Keys_422-invalid-request']
      }
    }
    /** @description Game was successfully received. */
    'Game-Keys_200-admin-get-game-by-sku': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /**
           * @description Internal unique item ID that is provided upon item creation.
           * @example 1
           */
          item_id?: number
          /**
           * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
           * @example game_1
           */
          sku?: string
          /**
           * @description Type of item. In this case it is always `unit`.
           * @example unit
           */
          type?: string
          name?: components['schemas']['Game-Keys_admin-name-two-letter-locale']
          description?: components['schemas']['Game-Keys_admin-description-two-letter-locale']
          long_description?: components['schemas']['Game-Keys_admin-long-description-two-letter-locale']
          /**
           * @description Image URL.
           * @example https://image.example.com
           */
          image_url?: string
          /**
           * @description Game additional assets such as screenshots, gameplay video and so on.
           * @example [
           *       {
           *         "type": "image",
           *         "url": "https://cdn3.xsolla.com/img/misc/images/71ab1e12126f2103e1868076f0acb21a.jpg"
           *       }
           *     ]
           */
          media_list?: {
            /**
             * @description Type of media: `image`/`video`.
             * @example image
             * @enum {string}
             */
            type?: 'image' | 'video'
            /**
             * @description Resource file.
             * @example https://cdn3.xsolla.com/img/misc/images/71ab1e12126f2103e1868076f0acb21a.jpg
             */
            url?: string
          }[]
          /**
           * @description Game order priority in the list.
           * @example 1
           */
          order?: number
          /**
           * @description Groups the item belongs to.
           * @example [
           *       {
           *         "external_id": "horror",
           *         "name": {
           *           "en": "Horror"
           *         }
           *       }
           *     ]
           */
          groups?: {
            /** @example horror */
            external_id?: string
            /** @example {
             *       "en": "Horror"
             *     } */
            name?: Record<string, never>
          }[]
          attributes?: components['schemas']['Game-Keys_admin-attributes']
          is_free?: components['schemas']['value-is_free']
          /** @description Game keys for different DRMs. */
          unit_items?: {
            /**
             * @description Internal unique item ID that is provided upon item creation.
             * @example 1
             */
            item_id?: number
            /**
             * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
             * @example game_1
             */
            sku?: string
            /**
             * @description Type of item. In this case it is always `game_key`.
             * @example game_key
             */
            type?: string
            is_free?: components['schemas']['value-is_free']
            /**
             * @description Prices in real currencies.
             * @example [
             *       {
             *         "amount": 1299.99,
             *         "currency": "RUB",
             *         "is_default": true,
             *         "is_enabled": true,
             *         "country_is": "RU"
             *       }
             *     ]
             */
            prices?: {
              /** @example 1299.99 */
              amount?: number
              /**
               * @description Default purchase currency. Three-letter code per [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
               * @example RUB
               */
              currency?: string
              /** @description Default price is used to build catalog if no price in user's currency is specified. */
              is_default?: boolean
              is_enabled?: boolean
              /**
               * @description Country where this price is available. Two-letter code per [ISO 3166-1 alpha 2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
               * @example US
               */
              country_iso?: string | null
            }[]
            /** @example [
             *       {
             *         "sku": "gold",
             *         "name": {
             *           "en": "Gold"
             *         },
             *         "type": "virtual_currency",
             *         "description": null,
             *         "image_url": "https://i.pinimg.com/originals/91/ae/56/91ae5683045f6dbef16b1482bade938f.png",
             *         "amount": 1000,
             *         "is_default": true
             *       }
             *     ] */
            virtual_prices?: {
              /**
               * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
               * @example gold
               */
              sku?: string
              /**
               * @description Object with localizations for virtual currency's name. Keys are specified in ISO 3166-1.
               * @example {
               *       "en": "Gold"
               *     }
               */
              name?: {
                [key: string]: unknown
              }
              /**
               * @description Type of item. In this case it is always `virtual_currency`.
               * @example virtual_currency
               */
              type?: string
              /**
               * @description Object with localizations for game description. Keys are specified in ISO 3166-1.
               * @example {
               *       "en": "Game 1 Example"
               *     }
               */
              description?: {
                [key: string]: unknown
              }
              /**
               * @description Image URL.
               * @example https://image.example.com
               */
              image_url?: string
              amount?: number
              is_default?: boolean
            }[]
            /**
             * @description Game order priority in the list.
             * @example 1
             */
            order?: number
            /** @description If disabled, item cannot be purchased and accessed through inventory. */
            is_enabled?: boolean
            /** @description Item is available for purchase. */
            is_show_in_store?: boolean
            /**
             * @description Game key DRM name.
             * @example Steam
             */
            drm_name?: string
            /**
             * @description DRM unique ID.
             * @example steam
             */
            drm_sku?: string
            /**
             * @description Game key DRM icon.
             * @example https://upload.wikimedia.org/wikipedia/en/4/48/Steam_Icon_2014.png
             */
            drm_image?: string
            /**
             * @description DRM internal unique ID.
             * @example 1
             */
            drm_id?: number
            keys?: {
              /** @description Number of keys available for purchase. */
              available?: number
              /** @description Total number of uploaded keys. */
              total?: number
              /** @description Number of sold keys. */
              used?: number
            }
            /** @description If `true`, the game key was purchased by users. */
            is_sales_exist?: boolean
            /** @description Pre-order settings. */
            pre_order?: {
              /** @description Game key release date in the ISO 8601 format. */
              release_date?: string
              /** @description If disabled, the item is not a pre-order. */
              is_enabled?: boolean
              /** @description Additional information for the pre-order which will be emailed. */
              description?: string
            }
            limits?: components['schemas']['item-limit-response']
            periods?: components['schemas']['item-periods-response']
          }[]
        }
      }
    }
    /** @description Codes loading session information was successfully received. */
    'Game-Keys_200-session-information': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example fc7105b6e8ee01339582970b37697242 */
          session_id?: string
          /** @example 0 */
          count_uploaded?: number
          /** @example 100 */
          count_total?: number
          /** @example 10 */
          count_skipped?: number
          /** @example processing */
          status?: string
        }
      }
    }
    /** @description Codes were successfully received. */
    'Game-Keys_200-get-codes': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'text/plain': string
      }
    }
    /** @description Successfully received a list of game keys owned by the user. */
    'Game-Keys_200-user-entitlement-list': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          has_more?: components['schemas']['Pagination_has-more']
          total_items_count?: components['schemas']['Pagination_total-items-count']
          items?: components['schemas']['Game-Keys_entitlement_item'][]
        }
      }
    }
    /** @description Authorization header not sent. */
    'Game-Keys_403-auth-header-not-sent': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 403 */
          statusCode?: number
          /** @example 0 */
          errorCode?: number
          /** @example Authorization header not sent. */
          errorMessage?: string
          /** @example x-x-x-x-transactionId-mock-x-x-x */
          transactionId?: string
        }
      }
    }
    /** @description Basic authentication not passed or wrong. Make sure you used basic authentication or correct credentials. */
    'Player-Inventory_401-invalid-basic-auth': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 401 */
          statusCode?: number
          /** @example 1020 */
          errorCode?: number
          /** @example [0401-1020]: Error in Authentication method occurred */
          errorMessage?: string
        }
      }
    }
    /** @description The list of physical goods was successfully received. */
    'Physical-Items_200-admin-get-physical-item-list': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          items?: {
            /** @example 101 */
            id?: number
            /** @example physical_good_1 */
            sku?: string
            name?: components['schemas']['Physical-Items_admin-name-two-letter-locale']
            description?: components['schemas']['Physical-Items_admin-description-two-letter-locale']
            long_description?: components['schemas']['Physical-Items_admin-long-description-two-letter-locale']
            /** @example [
             *       {
             *         "external_id": "accessory"
             *       },
             *       {
             *         "external_id": "hair"
             *       }
             *     ] */
            groups?: {
              /** @example accessory */
              external_id?: string
              /** @example null */
              name?: string
            }[]
            attributes?: components['schemas']['Physical-Items_admin-attributes']
            /** @example [
             *       {
             *         "type": "image",
             *         "url": "https://steamcommunity.com/linkfilter/?url=https://steamcdn-a.akamaihd.net/steam/apps/570/ss_7ab506679d42bfc0c0e40639887176494e0466d9.1920x1080.jpg?t=1534807984"
             *       },
             *       {
             *         "type": "video",
             *         "url": "https://steamcommunity.com/linkfilter/?url=https://steamcdn-a.akamaihd.net/steam/apps/570/ss_f9ebafedaf2d5cfb80ef1f74baa18eb08cad6494.1920x1080.jpg?t=1534807985"
             *       }
             *     ] */
            media_list?: {
              /** @example image */
              type?: string
              /** @example https://steamcommunity.com/linkfilter/?url=https://steamcdn-a.akamaihd.net/steam/apps/570/ss_7ab506679d42bfc0c0e40639887176494e0466d9.1920x1080.jpg?t=1534807984 */
              url?: string
            }[]
            /** @example physical_good */
            type?: string
            /** @example [
             *       {
             *         "amount": 1199.99,
             *         "currency": "RUB",
             *         "is_default": false,
             *         "is_enabled": true
             *       },
             *       {
             *         "amount": 19.99,
             *         "currency": "USD",
             *         "is_default": true,
             *         "is_enabled": true
             *       }
             *     ] */
            prices?: {
              /** @example 1199.99 */
              amount?: string
              /** @example RUB */
              currency?: string
              /** @example false */
              is_default?: string
              /** @example true */
              is_enabled?: string
            }[]
            virtual_prices?: components['schemas']['Physical-Items_virtual_prices_admin']
            /** @example http://image2_1.png */
            image_url?: string
            is_free?: components['schemas']['value-is_free']
            /** @example 1 */
            order?: number
            /** @example true */
            is_enabled?: string
            /** @example false */
            is_show_in_store?: string
            /** @example [
             *       "PG00001",
             *       "PG00002"
             *     ] */
            tax_categories?: string[]
            /** @description Weight of the item. */
            weight?: {
              /**
               * @description Weight of the item in grams.
               * @example 874.5
               */
              grams?: string
              /**
               * @description Weight of the item in ounces.
               * @example 3
               */
              ounces?: string
            }
            /** @description Pre-order settings. */
            pre_order?: {
              /** @description Item release date in the ISO 8601 format. */
              release_date?: string
              /** @description If disabled, the item is not a pre-order. */
              is_enabled?: boolean
              /** @description Additional information for the pre-order which will be emailed. */
              description?: string
            }
            limits?: components['schemas']['item-limit-response']
          }[]
        }
      }
    }
    /** @description Basic authentication not passed or wrong. Make sure you used basic authentication or correct credentials. */
    'Physical-Items_401-invalid-basic-auth': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 401 */
          statusCode?: number
          /** @example 1020 */
          errorCode?: number
          /** @example [0401-1020]: Error in Authentication method occurred */
          errorMessage?: string
        }
      }
    }
    /** @description Invalid request. */
    'Physical-Items_422-invalid-request': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['Physical-Items_422-invalid-request']
      }
    }
    /** @description Physical item was successfully received. */
    'Physical-Items_200-admin-get-physical-item': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 101 */
          id?: number
          /** @example physical_item_1 */
          sku?: string
          name?: components['schemas']['Physical-Items_admin-name-two-letter-locale']
          description?: components['schemas']['Physical-Items_admin-description-two-letter-locale']
          long_description?: components['schemas']['Physical-Items_admin-long-description-two-letter-locale']
          /** @example [
           *       {
           *         "external_id": "accessory"
           *       },
           *       {
           *         "external_id": "hair"
           *       }
           *     ] */
          groups?: {
            /** @example accessory */
            external_id?: string
            /** @example null */
            name?: string
          }[]
          attributes?: components['schemas']['Physical-Items_admin-attributes']
          /** @example [
           *       {
           *         "type": "image",
           *         "url": "https://steamcommunity.com/linkfilter/?url=https://steamcdn-a.akamaihd.net/steam/apps/570/ss_7ab506679d42bfc0c0e40639887176494e0466d9.1920x1080.jpg?t=1534807984"
           *       },
           *       {
           *         "type": "video",
           *         "url": "https://steamcommunity.com/linkfilter/?url=https://steamcdn-a.akamaihd.net/steam/apps/570/ss_f9ebafedaf2d5cfb80ef1f74baa18eb08cad6494.1920x1080.jpg?t=1534807985"
           *       }
           *     ] */
          media_list?: {
            /** @example image */
            type?: string
            /** @example https://steamcommunity.com/linkfilter/?url=https://steamcdn-a.akamaihd.net/steam/apps/570/ss_7ab506679d42bfc0c0e40639887176494e0466d9.1920x1080.jpg?t=1534807984 */
            url?: string
          }[]
          /** @example physical_good */
          type?: string
          /** @example [
           *       {
           *         "amount": 1199.99,
           *         "currency": "RUB",
           *         "is_default": false,
           *         "is_enabled": true
           *       },
           *       {
           *         "amount": 19.99,
           *         "currency": "USD",
           *         "is_default": true,
           *         "is_enabled": true
           *       }
           *     ] */
          prices?: {
            /** @example 1199.99 */
            amount?: string
            /** @example RUB */
            currency?: string
            /** @example false */
            is_default?: string
            /** @example true */
            is_enabled?: string
          }[]
          virtual_prices?: components['schemas']['Physical-Items_virtual_prices_admin']
          /** @example http://image2_1.png */
          image_url?: string
          is_free?: components['schemas']['value-is_free']
          /** @example 1 */
          order?: number
          /** @example true */
          is_enabled?: string
          /** @example false */
          is_show_in_store?: string
          /** @example [
           *       "PG00001",
           *       "PG00002"
           *     ] */
          tax_categories?: string[]
          /** @description Weight of the item. */
          weight?: {
            /**
             * @description Weight of the item in grams.
             * @example 874.5
             */
            grams?: string
            /**
             * @description Weight of the item in ounces.
             * @example 3
             */
            ounces?: string
          }
          /** @description Pre-order settings. */
          pre_order?: {
            /** @description Item release date in the ISO 8601 format. */
            release_date?: string
            /** @description If disabled, the item is not a pre-order. */
            is_enabled?: boolean
            /** @description Additional information for the pre-order which will be emailed. */
            description?: string
          }
          limits?: components['schemas']['item-limit-response']
        }
      }
    }
    /** @description Physical item was successfully updated. */
    'Physical-Items_204-admin-update-physical-item': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 200 */
          statusCode?: number
          /** @example Physical item was successfully updated. */
          message?: string
        }
      }
    }
    /** @description Physical item not found. */
    'Physical-Items_404-admin-physical-item': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 4001 */
          errorCode?: number
          /** @example [0401-4001]: Can't find item with sku = not_existing_sku and project_id = 17558 */
          errorMessage?: string
          /** @example 404 */
          statusCode?: number
        }
      }
    }
    /** @description Physical item was successfully deleted. */
    'Physical-Items_204-admin-delete-physical-item': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 200 */
          statusCode?: number
          /** @example Physical item was successfully deleted. */
          message?: string
        }
      }
    }
    /** @description List of promotions was successfully received. */
    'Promotions_200-get-promotions': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          promotions?: components['schemas']['Promotions_200-get-promotion-model'][]
          /** @description Total number of promotions. */
          total_promotions_count?: number
        }
      }
    }
    /** @description Basic authentication not passed or wrong. Make sure you used basic authentication or correct credentials. */
    'Promotions_401-invalid-basic-auth': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 401 */
          statusCode?: number
          /** @example 1020 */
          errorCode?: number
          /** @example [0401-1020]: Error in Authentication method occurred */
          errorMessage?: string
        }
      }
    }
    /** @description Invalid request. */
    'Promotions_422-activate-deactivate-promotion': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 422 */
          statusCode?: number
          /** @example 1102 */
          errorCode?: number
          /** @example [0401-9505]: Error was occurred while promotion was being updated */
          errorMessage?: string
          /** @example da145238620011eb8e24fe6913ff226a */
          transactionId?: string
        }
      }
    }
    /** @description Promotion was successfully received. */
    '200-admin-get-redeemable-by-code': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['Promotions_200-get-coupon-promotion-model']
      }
    }
    /** @description Redeemable code not found. Make sure the provided code value is correct. */
    '404-code-not-found': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 404 */
          statusCode?: number
          /** @example 9811 */
          errorCode?: number
          /** @example [0401-9811]: Code not found. */
          errorMessage?: string
        }
      }
    }
    /** @description Incorrect redeemable code format. The code can contain only letters and numerals. */
    '405-method-not-found': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 405 */
          statusCode?: number
          /** @example 0 */
          errorCode?: number
          /** @example Method is not allowed. Method must be one of: OPTIONS */
          errorMessage?: string
        }
      }
    }
    /** @description Coupon was successfully redeemed. */
    'Promotions_200-coupon-redeemed': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example [
           *       {
           *         "attributes": [],
           *         "description": "Take it, take it all! All of Xsolla's riches in one Mega Booster.",
           *         "groups": [
           *           {
           *             "external_id": "powerups",
           *             "name": "Power Ups"
           *           }
           *         ],
           *         "image_url": "https://cdn.xsolla.net/img/misc/images/e9f2f4a634bc96ea03b5d5ceadd7c55f.png",
           *         "inventory_options": {
           *           "consumable": {
           *             "usages_count": 1
           *           },
           *           "expiration_period": null
           *         },
           *         "is_free": false,
           *         "name": "Xsolla Booster Mega",
           *         "price": {
           *           "amount": "50.0000000000000000",
           *           "amount_without_discount": "100.0000000000000000",
           *           "currency": "USD"
           *         },
           *         "quantity": 1,
           *         "sku": "booster_mega_1",
           *         "type": "virtual_good",
           *         "virtual_item_type": "consumable",
           *         "virtual_prices": []
           *       }
           *     ] */
          items?: {
            sku?: string
            groups?: {
              external_id?: string
              name?: string
            }[]
            name?: string | null
            type?: string
            description?: string
            image_url?: string
            quantity?: number
            is_free?: boolean
          }[]
        }
      }
    }
    /** @description Authentication not passed or wrong. */
    'Promotions_401-invalid-client-auth': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 401 */
          statusCode?: number
          /** @example 1501 */
          errorCode?: number
          /** @example [0401-1501]: Authorization failed: Provide authorization */
          errorMessage?: string
        }
      }
    }
    /** @description Authorization header not sent. */
    'Promotions_403-auth-header': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 403 */
          statusCode?: number
          /** @example 0 */
          errorCode?: number
          /** @example Authorization header not sent. */
          errorMessage?: string
          /** @example x-x-x-x-transactionId-mock-x-x-x */
          transactionId?: string
        }
      }
    }
    /** @description Enter valid coupon code. */
    'Promotions_404-coupon': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 404 */
          statusCode?: number
          /** @example 4001 */
          errorCode?: number
          /** @example [0401-9807]: Enter valid coupon code. */
          errorMessage?: string
        }
      }
    }
    /** @description Invalid request. */
    'Promotions_422-redeem-coupon': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 422 */
          statusCode?: number
          /** @example 1102 */
          errorCode?: number
          /** @example [0401-1102]: Unprocessable Entity. The property `coupon_code` is required */
          errorMessage?: string
          /** @example x-x-x-x-transactionId-mock-x-x-x */
          transactionId?: string
        }
      }
    }
    /** @description List of coupon rewards was successfully received. */
    'Promotions_200-coupon-rewards': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          bonus?: components['schemas']['Promotions_200-coupon-bonus-reward'][]
          /** @description If `true`, the user should choose the bonus before redeeming a coupon. */
          is_selectable?: boolean
        }
      }
    }
    /** @description Invalid request. */
    'Promotions_422-rewards': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json':
          | components['schemas']['Promotions_422_limit_error']
          | components['schemas']['Promotions_422_reglock_error']
      }
    }
    /** @description List of coupons was successfully received. */
    'Promotions_200-get-coupons': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          coupons?: components['schemas']['Promotions_200-get-coupon-promotion-model-2'][]
        }
      }
    }
    /** @description Invalid request. */
    'Promotions_422-invalid-coupon': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 422 */
          statusCode?: number
          /** @example 1102 */
          errorCode?: number
          /** @example [0401-1102]: Unprocessable Entity. The property `external_id` is required */
          errorMessage?: string
        }
      }
    }
    /** @description Coupon not found. Make sure the `external_id` is correct. */
    'Promotions_404-admin-coupon': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 404 */
          statusCode?: number
          /** @example 4001 */
          errorCode?: number
          /** @example [0401-9802]: Coupon not found */
          errorMessage?: string
          /** @example x-x-x-x-transactionId-mock-x-x-x */
          transactionId?: string
        }
      }
    }
    /** @description Error occurred while receiving the promotion from the promotion service. */
    'Promotions_422-admin-promotion-error': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 422 */
          statusCode?: number
          /** @example 9502 */
          errorCode?: number
          /** @example [0401-9502]: Error occurred while receiving the promotion from the promotion service */
          errorMessage?: string
          /** @example x-x-x-x-transactionId-mock-x-x-x */
          transactionId?: string
        }
      }
    }
    /** @description List of codes for a coupon was successfully received. */
    'Promotions_200-coupon-code-list': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          codes?: {
            code?: components['schemas']['Promotions_coupon_code']
          }[]
          /** @description Total count of coupon codes. */
          total_count?: number
        }
      }
    }
    /** @description Code was successfully created. */
    'Promotions_201-coupon-promocode-code-created': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          code?: components['schemas']['Promotions_coupon_code']
        }
      }
    }
    /** @description Invalid request. The code already exists. */
    'Promotions_422-coupon-promocode-same-code-exists': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 422 */
          statusCode?: number
          /** @example 9803 */
          errorCode?: number
          /** @example [0401-9803]: The code already exists. */
          errorMessage?: string
          /** @example x-x-x-x-transactionId-mock-x-x-x */
          transactionId?: string
        }
      }
    }
    /** @description Promo code not found. Make sure the `external_id` is correct. */
    'Promotions_404-admin-promocode': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 404 */
          statusCode?: number
          /** @example 4001 */
          errorCode?: number
          /** @example [0401-9802]: Promocode not found */
          errorMessage?: string
          /** @example x-x-x-x-transactionId-mock-x-x-x */
          transactionId?: string
        }
      }
    }
    /** @description Promo code was successfully redeemed. */
    'Promotions_200-promo-code-redeemed': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /**
           * @description Cart ID.
           * @example cart_id
           */
          cart_id?: string
          /**
           * @description Cart price.
           * @example {
           *       "amount": "6150.0000000000000000",
           *       "amount_without_discount": "6150.0000000000000000",
           *       "currency": "USD"
           *     }
           */
          price?: {
            /** @example 50.0000000000000000 */
            amount?: string
            /** @example 100.0000000000000000 */
            amount_without_discount?: string
            /** @example USD */
            currency?: string
          } | null
          is_free?: components['schemas']['value-is_free']
          /** @example [
           *       {
           *         "attributes": [],
           *         "description": "Take it, take it all! All of Xsolla's riches in one Mega Booster.",
           *         "groups": [
           *           {
           *             "external_id": "powerups",
           *             "name": "Power Ups"
           *           }
           *         ],
           *         "image_url": "https://cdn.xsolla.net/img/misc/images/e9f2f4a634bc96ea03b5d5ceadd7c55f.png",
           *         "inventory_options": {
           *           "consumable": {
           *             "usages_count": 1
           *           },
           *           "expiration_period": null
           *         },
           *         "is_free": false,
           *         "name": "Xsolla Booster Mega",
           *         "price": {
           *           "amount": "50.0000000000000000",
           *           "amount_without_discount": "100.0000000000000000",
           *           "currency": "USD"
           *         },
           *         "quantity": 123,
           *         "sku": "booster_mega_1",
           *         "type": "virtual_good",
           *         "virtual_item_type": "consumable",
           *         "virtual_prices": []
           *       }
           *     ] */
          items?: {
            sku?: string
            groups?: {
              external_id?: string
              name?: string
            }[]
            name?: string | null
            type?: string
            description?: string
            image_url?: string
            quantity?: number
            is_free?: components['schemas']['value-is_free']
          }[]
          rewards?: components['schemas']['Promo_code_rewards']
        }
      }
    }
    /** @description Enter valid promo code. */
    'Promotions_404-promo-code': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 404 */
          statusCode?: number
          /** @example 4001 */
          errorCode?: number
          /** @example [0401-9807]: Enter valid promo code. */
          errorMessage?: string
        }
      }
    }
    /** @description Promo code is successfully canceled. */
    'Promotions_200-promo-code-canceled': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /**
           * @description Cart ID.
           * @example cart_id
           */
          cart_id?: string
          /**
           * @description Cart price.
           * @example {
           *       "amount": "6150.0000000000000000",
           *       "amount_without_discount": "6150.0000000000000000",
           *       "currency": "USD"
           *     }
           */
          price?: {
            /** @default 50.0000000000000000 */
            amount: string
            /** @default 100.0000000000000000 */
            amount_without_discount: string
            /** @default USD */
            currency: string
          } | null
          is_free?: components['schemas']['value-is_free']
          /** @example [
           *       {
           *         "attributes": [],
           *         "description": "Take it, take it all! All of Xsolla's riches in one Mega Booster.",
           *         "groups": [
           *           {
           *             "external_id": "powerups",
           *             "name": "Power Ups"
           *           }
           *         ],
           *         "image_url": "https://cdn.xsolla.net/img/misc/images/e9f2f4a634bc96ea03b5d5ceadd7c55f.png",
           *         "inventory_options": {
           *           "consumable": {
           *             "usages_count": 1
           *           },
           *           "expiration_period": null
           *         },
           *         "is_free": false,
           *         "name": "Xsolla Booster Mega",
           *         "price": {
           *           "amount": "50.0000000000000000",
           *           "amount_without_discount": "100.0000000000000000",
           *           "currency": "USD"
           *         },
           *         "quantity": 123,
           *         "sku": "booster_mega_1",
           *         "type": "virtual_good",
           *         "virtual_item_type": "consumable",
           *         "virtual_prices": []
           *       }
           *     ] */
          items?: {
            sku?: string
            groups?: {
              external_id?: string
              name?: string
            }[]
            name?: string | null
            type?: string
            description?: string
            image_url?: string
            quantity?: number
            is_free?: components['schemas']['value-is_free']
          }[]
        }
      }
    }
    /** @description Invalid request. */
    'Promotions_422-cancel-promo-code': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 422 */
          statusCode?: number
          /** @example 1102 */
          errorCode?: number
          /** @example [0401-1102]: Unprocessable Entity. The property `id` is required */
          errorMessage?: string
          /** @example x-x-x-x-transactionId-mock-x-x-x */
          transactionId?: string
        }
      }
    }
    /** @description List of promo code rewards was successfully received. */
    'Promotions_200-promocode-rewards': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['Promo_code_rewards']
      }
    }
    /** @description List of promo codes was successfully received. */
    'Promotions_200-get-promocodes': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          coupons?: components['schemas']['Promotions_200-get-promocode-promotion-model'][]
        }
      }
    }
    /** @description List of codes for a promo code was successfully received. */
    'Promotions_200-promocode-code-list': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          codes?: {
            code?: components['schemas']['Promotions_coupon_code']
          }[]
          /** @description Total number of codes for a promo code. */
          total_count?: number
        }
      }
    }
    /** @description Promotion was successfully created. */
    'Promotions_201-create-promotion': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @description Promotion ID. Unique promotion identifier within the project. */
          promotion_id?: number
        }
      }
    }
    /** @description Invalid request. */
    'Promotions_422-admin-promotion-missed-items-property': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 422 */
          statusCode?: number
          /** @example 1102 */
          errorCode?: number
          /** @example [0401-1102]:  Unprocessable Entity. The property `items` is required */
          errorMessage?: string
          /** @example x-x-x-x-transactionId-mock-x-x-x */
          transactionId?: string
        }
      }
    }
    /** @description Promotion not found. Make sure `promotion_id` is correct. */
    'Promotions_404-admin-promotion': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 404 */
          statusCode?: number
          /** @example 9502 */
          errorCode?: number
          /** @example [0401-9502]: Can not find promotion with ID = 111425 in project 59080 */
          errorMessage?: string
        }
      }
    }
    /** @description Invalid request. */
    'Promotions_422-admin-promotion-missed-bonus-property': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 422 */
          statusCode?: number
          /** @example 1102 */
          errorCode?: number
          /** @example [0401-1102]:  Unprocessable Entity. The property `bonus` is required */
          errorMessage?: string
          /** @example x-x-x-x-transactionId-mock-x-x-x */
          transactionId?: string
        }
      }
    }
    /** @description Bonus promotion was successfully received. */
    'Promotions_200-admin-get-bonus-promotion': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['Promotions_200-get-bonus-promotion-model']
      }
    }
    /** @description Information about the code. */
    'Promotions_200-verify-promo-code': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @description Type of code: `promocode`/`coupon`. */
          type?: string
          code?: components['schemas']['Promotions_coupon_code']
          rewards?: components['schemas']['Coupon_rewards'] | components['schemas']['Promo_code_rewards_verify']
        }
      }
    }
    /** @description Code not found. Make sure the `code` value is correct. */
    'Promotions_404-verify-promo-code': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 404 */
          statusCode?: number
          /** @example 9811 */
          errorCode?: number
          /** @example [0401-9811]: Code not found. */
          errorMessage?: string
          /** @example x-x-x-x-transactionId-mock-x-x-x */
          transactionId?: string
        }
      }
    }
    /** @description Invalid code promotion. */
    'Promotions_422-verify-promo-code': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          errorCode?: number
          statusCode?: number
          errorMessage?: string
        }
      }
    }
    /** @description The list of virtual items was successfully received. */
    'Virtual-Items-Currency_200-admin-get-virtual-items': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          items?: components['schemas']['Virtual-Items-Currency_admin-virtual-item'][]
        }
      }
    }
    /** @description Basic authentication not passed or wrong. Make sure you used basic authentication or correct credentials. */
    'Virtual-Items-Currency_401-invalid-basic-auth': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 401 */
          statusCode?: number
          /** @example 1020 */
          errorCode?: number
          /** @example [0401-1020]: Error in Authentication method occurred */
          errorMessage?: string
        }
      }
    }
    /** @description Virtual item was successfully created. */
    'Virtual-Items-Currency_201-created': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example new-sku */
          sku?: string
        }
      }
    }
    /** @description Invalid request. */
    'Virtual-Items-Currency_422-invalid-request': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['Virtual-Items-Currency_422-invalid-request']
      }
    }
    /** @description The list of virtual items was successfully received. */
    'Virtual-Items-Currency_200-admin-get-virtual-items-by-group': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          items?: components['schemas']['Virtual-Items-Currency_admin-virtual-item'][]
        }
      }
    }
    /** @description The specified virtual item was successfully received. */
    'Virtual-Items-Currency_200-admin-get-item': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['Virtual-Items-Currency_admin-virtual-item']
      }
    }
    /** @description The list of virtual currencies was successfully received. */
    'Virtual-Items-Currency_200-admin-get-virtual-currencies': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          items?: components['schemas']['Virtual-Items-Currency_admin-virtual-currency'][]
        }
      }
    }
    /** @description The specified virtual currency was successfully received. */
    'Virtual-Items-Currency_200-admin-get-virtual-currency': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['Virtual-Items-Currency_admin-virtual-currency']
      }
    }
    /** @description The item was not found. Make sure the `project_id` and the `item_sku` are correct. */
    'Virtual-Items-Currency_404-item': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 404 */
          statusCode?: number
          /** @example 4001 */
          errorCode?: number
          /** @example [0401-4001]: Item with Project Id = 44056 and Sku = booster_mega_12222 not found */
          errorMessage?: string
        }
      }
    }
    /** @description The list of virtual currency packages was successfully received. */
    'Virtual-Items-Currency_200-admin-get-virtual-currency-packages': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          items?: components['schemas']['Virtual-Items-Currency_admin-virtual-currency-package'][]
        }
      }
    }
    /** @description The specified virtual currency package was successfully received. */
    'Virtual-Items-Currency_200-admin-get-virtual-currency-package': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['Virtual-Items-Currency_admin-virtual-currency-package']
      }
    }
    /** @description The list of virtual items was successfully received. */
    'Virtual-Items-Currency_200-get-items-list': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['Virtual-Items-Currency_item-list']
      }
    }
    /** @description The virtual item was successfully received. */
    'Virtual-Items-Currency_200-get-item-by-sku': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['Virtual-Items-Currency_item']
      }
    }
    /** @description The list of all virtual items was successfully received. */
    'Virtual-Items-Currency_200-get-all-items-list': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example [
           *       {
           *         "sku": "big_rocket",
           *         "name": "Big Rocket",
           *         "description": "Big Rocket - description",
           *         "groups": [
           *           {
           *             "external_id": "accessory",
           *             "name": "Accessory"
           *           }
           *         ]
           *       },
           *       {
           *         "sku": "shotgun_raider",
           *         "name": "SHOTGUN FOR TRUE RAIDERS",
           *         "description": "description",
           *         "groups": [
           *           {
           *             "external_id": "hair",
           *             "name": "Hair"
           *           }
           *         ]
           *       },
           *       {
           *         "sku": "shotgun_raider_2",
           *         "name": "SHOTGUN FOR TRUE RAIDERS",
           *         "description": "description",
           *         "groups": []
           *       }
           *     ] */
          items?: {
            /**
             * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
             * @example big_rocket
             */
            sku?: string
            /**
             * @description Item name.
             * @example Big Rocket
             */
            name?: string
            /**
             * @description Groups the item belongs to.
             * @example [
             *       {
             *         "external_id": "accessory",
             *         "name": "Accessory"
             *       }
             *     ]
             */
            groups?: {
              /** @example accessory */
              external_id?: string
              /** @example Accessory */
              name?: string
            }[]
            /**
             * @description Item description.
             * @example Big Rocket - description
             */
            description?: string
          }[]
        }
      }
    }
    /** @description The list of virtual currency was successfully received. */
    'Virtual-Items-Currency_200-get-virtual-currency-list': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['Virtual-Items-Currency_virtual-currency-list']
      }
    }
    /** @description The virtual currency was successfully received. */
    'Virtual-Items-Currency_200-get-virtual-currency': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['Virtual-Items-Currency_virtual-currency']
      }
    }
    /** @description The list of virtual currency packages was successfully received. */
    'Virtual-Items-Currency_200-get-virtual-currency-packages-list': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['Virtual-Items-Currency_virtual-currency-packages']
      }
    }
    /** @description The virtual currency package was successfully received. */
    'Virtual-Items-Currency_200-get-virtual-currency-package': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['Virtual-Items-Currency_virtual-currency-package']
      }
    }
    /** @description The list of items from the specified group was successfully received. */
    'Virtual-Items-Currency_200-get-items-by-group-id': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          has_more?: components['schemas']['Pagination_has-more']
          /** @example [
           *       {
           *         "sku": "big_rocket",
           *         "name": "Big Rocket",
           *         "groups": [
           *           {
           *             "external_id": "accessory",
           *             "name": "Accessory"
           *           }
           *         ],
           *         "attributes": [
           *           {
           *             "external_id": "stack_size",
           *             "name": "Stack size",
           *             "values": [
           *               {
           *                 "value": "5"
           *               }
           *             ]
           *           }
           *         ],
           *         "type": "virtual_good",
           *         "description": "Big Rocket - description",
           *         "image_url": "https://popmedia.blob.core.windows.net/popyourself/male/outfit/male_armor_white_a-01.png",
           *         "is_free": false,
           *         "price": {
           *           "amount": "100.99",
           *           "amount_without_discount": "100.99",
           *           "currency": "USD"
           *         },
           *         "virtual_prices": [
           *           {
           *             "amount": 100,
           *             "sku": "vc_test",
           *             "is_default": true,
           *             "amount_without_discount": 100,
           *             "image_url": "http://image.png",
           *             "name": "SHOTGUN FOR TRUE RAIDERS",
           *             "type": "virtual_currency",
           *             "description": "description"
           *           }
           *         ],
           *         "can_be_bought": true,
           *         "inventory_options": {
           *           "consumable": {
           *             "usages_count": 1
           *           },
           *           "expiration_period": {
           *             "type": "day",
           *             "value": 1
           *           }
           *         },
           *         "virtual_item_type": "non_renewing_subscription",
           *         "promotions": [
           *           {
           *             "name": "Bonus promotion",
           *             "date_start": "2020-04-15T16:16:00+03:00",
           *             "date_end": "2026-04-15T16:16:00+03:00",
           *             "discount": {
           *               "percent": "50.00"
           *             },
           *             "bonus": [
           *               {
           *                 "quantity": 1,
           *                 "name": "Xsolla Minigun",
           *                 "image_url": "https://cdn.xsolla.net/img/misc/images/2fc5c491a47413a8e8000447889093c2.png",
           *                 "sku": "minigun_1",
           *                 "type": "virtual_good"
           *               }
           *             ]
           *           }
           *         ],
           *         "limits": {
           *           "per_user": {
           *             "total": 5,
           *             "available": 3,
           *             "recurrent_schedule": {
           *               "interval_type": "weekly",
           *               "reset_next_date": 1746057600
           *             }
           *           }
           *         },
           *         "periods": [
           *           {
           *             "date_from": "2020-08-11T10:00:00+03:00",
           *             "date_until": "2020-08-11T20:00:00+03:00"
           *           }
           *         ]
           *       },
           *       {
           *         "sku": "shotgun_raider",
           *         "name": "SHOTGUN FOR TRUE RAIDERS",
           *         "groups": [
           *           {
           *             "external_id": "accessory",
           *             "name": "Accessory"
           *           }
           *         ],
           *         "attributes": [
           *           {
           *             "external_id": "stack_size",
           *             "name": "Stack size",
           *             "values": [
           *               {
           *                 "value": "5"
           *               }
           *             ]
           *           },
           *           {
           *             "external_id": "rating",
           *             "name": "Rating",
           *             "values": [
           *               {
           *                 "value": "3.9"
           *               }
           *             ]
           *           },
           *           {
           *             "external_id": "genre",
           *             "name": "Genre",
           *             "values": [
           *               {
           *                 "value": "Strategy"
           *               },
           *               {
           *                 "value": "Tactical"
           *               },
           *               "Turn-based"
           *             ]
           *           }
           *         ],
           *         "type": "virtual_good",
           *         "description": "description",
           *         "image_url": "http://image.png",
           *         "is_free": false,
           *         "price": {
           *           "amount": "101.0",
           *           "amount_without_discount": "101.0",
           *           "currency": "USD"
           *         },
           *         "virtual_prices": [
           *           {
           *             "amount": 100,
           *             "sku": "vc_test",
           *             "is_default": true,
           *             "amount_without_discount": 100,
           *             "image_url": "http://image.png",
           *             "name": "SHOTGUN FOR TRUE RAIDERS",
           *             "type": "virtual_currency",
           *             "description": "description"
           *           },
           *           {
           *             "amount": 200,
           *             "sku": "vc_test_2",
           *             "is_default": false,
           *             "amount_without_discount": 200,
           *             "image_url": "http://image.png",
           *             "name": "SHOTGUN FOR TRUE RAIDERS",
           *             "type": "virtual_currency",
           *             "description": "description"
           *           }
           *         ],
           *         "can_be_bought": true,
           *         "inventory_options": {
           *           "consumable": {
           *             "usages_count": 1
           *           },
           *           "expiration_period": {
           *             "type": "day",
           *             "value": 1
           *           }
           *         },
           *         "virtual_item_type": "non_renewing_subscription",
           *         "promotions": [],
           *         "limits": null,
           *         "periods": []
           *       }
           *     ] */
          items?: {
            /**
             * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
             * @example big_rocket
             */
            sku?: string
            /**
             * @description Item name.
             * @example Big Rocket
             */
            name?: string
            /**
             * @description Groups the item belongs to.
             * @example [
             *       {
             *         "external_id": "accessory",
             *         "name": "Accessory"
             *       }
             *     ]
             */
            groups?: {
              /** @example accessory */
              external_id?: string
              /** @example Accessory */
              name?: string
            }[]
            attributes?: components['schemas']['Virtual-Items-Currency_client-attributes']
            /**
             * @description Type of item: `consumable`/`expiration`/`permanent`/`lootboxes`/`physical`.
             * @example virtual_good
             */
            type?: string
            /**
             * @description Item description.
             * @example Big Rocket - description
             */
            description?: string
            /**
             * @description Image URL.
             * @example https://popmedia.blob.core.windows.net/popyourself/male/outfit/male_armor_white_a-01.png
             */
            image_url?: string
            is_free?: components['schemas']['value-is_free']
            /** @description Item prices. */
            price?: {
              /**
               * @description Discounted item price.
               * @example 100.99
               */
              amount?: string
              /**
               * @description Item price.
               * @example 100.99
               */
              amount_without_discount?: string
              /**
               * @description Default purchase currency. Three-letter code per [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
               * @example USD
               */
              currency?: string
            }
            /** @description Virtual prices. */
            virtual_prices?: {
              /**
               * @description Discounted item price in virtual currency.
               * @example 100
               */
              amount?: number
              /**
               * @description Item price.
               * @example 200
               */
              amount_without_discount?: number
              /**
               * @description Virtual currency item SKU.
               * @example vc_test
               */
              sku?: string
              /**
               * @description Whether price is default for item.
               * @example true
               */
              is_default?: boolean
              /** @example http://image.png */
              image_url?: string
              /**
               * @description Virtual currency name.
               * @example SHOTGUN FOR TRUE RAIDERS
               */
              name?: string
              /**
               * @description Virtual currency type.
               * @example virtual_currency
               */
              type?: string
              /**
               * @description Virtual currency description.
               * @example Big Rocket - description
               */
              description?: string
            }[]
            can_be_bought?: components['schemas']['Can_be_bought']
            /** @description Defines the inventory item options. */
            inventory_options?: {
              /** @description Defines the consumable properties if this is a consumable item, or `null` if this is a non-consumable item. */
              consumable?: {
                /**
                 * @description Total number of remaining uses if this is a consumable item, or `null` if this is a non-consumable item.
                 * @example 1
                 */
                usages_count?: number | null
              } | null
              /** @description Defines the expiration properties if this is a expired item, or `null` if this is a non-expired item. */
              expiration_period?: {
                /**
                 * @description Defines type of expiration of an item.
                 * @example day
                 * @enum {string}
                 */
                type?: 'minute' | 'hour' | 'day' | 'week' | 'month' | 'year'
                /**
                 * @description Defines value for expiration period.
                 * @example 1
                 */
                value?: number
              } | null
            }
            /**
             * @description Type of virtual item.
             * @example non_consumable
             * @enum {string}
             */
            virtual_item_type?: 'consumable' | 'non_consumable' | 'non_renewing_subscription'
            promotions?: components['schemas']['Catalog_item_promotions']
            limits?: components['schemas']['Catalog_item_limits']
            periods?: components['schemas']['item-periods-response']
            custom_attributes?: components['schemas']['item-custom-attributes-response']
            vp_rewards?: components['schemas']['item-value-point-reward'][]
          }[]
        }
      }
    }
    /** @description The group wasn’t found. Make sure that the `external_id` is correct and the group isn’t turned off or deleted. */
    'Virtual-Items-Currency_404-item-group': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 404 */
          statusCode?: number
          /** @example 4403 */
          errorCode?: number
          /** @example [0401-4403]: Item group not found */
          errorMessage?: string
        }
      }
    }
    /** @description The list of groups was successfully received. */
    'Virtual-Items-Currency_200-get-items-groups': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example [
           *       {
           *         "external_id": "hair",
           *         "name": "Hair",
           *         "description": "Hair description",
           *         "image_url": null,
           *         "order": 1,
           *         "level": 0,
           *         "children": [
           *           {
           *             "external_id": "background",
           *             "name": "Background",
           *             "description": "Background description",
           *             "image_url": null,
           *             "order": 1,
           *             "level": 1,
           *             "children": [
           *               {
           *                 "external_id": "accessory",
           *                 "name": "Accessory",
           *                 "description": "Accessory",
           *                 "image_url": null,
           *                 "order": 1,
           *                 "level": 2,
           *                 "children": [],
           *                 "parent_external_id": "background"
           *               }
           *             ],
           *             "parent_external_id": "hair"
           *           }
           *         ],
           *         "parent_external_id": null
           *       },
           *       {
           *         "external_id": "group_external_id",
           *         "name": "Super",
           *         "description": "Super description",
           *         "image_url": null,
           *         "order": 1,
           *         "level": 0,
           *         "children": [],
           *         "parent_external_id": null
           *       }
           *     ] */
          groups?: {
            /**
             * @description External group ID.
             * @example hair
             */
            external_id?: string
            /**
             * @description Group name.
             * @example Hair
             */
            name?: string
            /**
             * @description Group description.
             * @example Hair description
             */
            description?: string
            /**
             * @description Image URL.
             * @example null
             */
            image_url?: string
            /**
             * @description Defines arrangement order.
             * @example 1
             */
            order?: number
            /**
             * @description Group nesting level.
             * @example 0
             */
            level?: number
            /**
             * @description Child groups.
             * @example [
             *       {
             *         "external_id": "background",
             *         "name": "Background",
             *         "description": "Background description",
             *         "image_url": null,
             *         "order": 1,
             *         "level": 1,
             *         "children": [
             *           {
             *             "external_id": "accessory",
             *             "name": "Accessory",
             *             "description": "Accessory",
             *             "image_url": null,
             *             "order": 1,
             *             "level": 2,
             *             "children": [],
             *             "parent_external_id": "background"
             *           }
             *         ],
             *         "parent_external_id": "hair"
             *       }
             *     ]
             */
            children?: {
              /**
               * @description External group ID.
               * @example background
               */
              external_id?: string
              /**
               * @description Group name.
               * @example Background
               */
              name?: string
              /**
               * @description Group description.
               * @example Background description
               */
              description?: string
              /**
               * @description Group image URL.
               * @example null
               */
              image_url?: string
              /**
               * @description Defines arrangement order.
               * @example 1
               */
              order?: number
              /**
               * @description Group nesting level.
               * @example 1
               */
              level?: number
              /**
               * @description Child groups.
               * @example [
               *       {
               *         "external_id": "accessory",
               *         "name": "Accessory",
               *         "description": "Accessory",
               *         "image_url": null,
               *         "order": 1,
               *         "level": 2,
               *         "children": [],
               *         "parent_external_id": "background"
               *       }
               *     ]
               */
              children?: {
                /**
                 * @description External group ID.
                 * @example accessory
                 */
                external_id?: string
                /**
                 * @description Group name.
                 * @example Accessory
                 */
                name?: string
                /**
                 * @description Group description.
                 * @example Accessory
                 */
                description?: string
                /**
                 * @description Image URL.
                 * @example null
                 */
                image_url?: string
                /**
                 * @description Defines arrangement order.
                 * @example 1
                 */
                order?: number
                /**
                 * @description Group nesting level.
                 * @example 2
                 */
                level?: number
                /**
                 * @description Child groups.
                 * @example []
                 */
                children?: string[]
                /**
                 * @description Parent external group ID.
                 * @example background
                 */
                parent_external_id?: string
              }[]
              /**
               * @description Parent external group ID.
               * @example hair
               */
              parent_external_id?: string
            }[]
            /**
             * @description Parent external group ID.
             * @example null
             */
            parent_external_id?: string
          }[]
        }
      }
    }
    /** @description Successful quick virtual purchase. */
    'Virtual-Items-Currency_200-quick-purchase': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @description Order ID. */
          order_id?: number
        }
      }
    }
    /** @description Not enough virtual currency. */
    'Virtual-Items-Currency_422-not-enough-virtual-currency': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 5006 */
          errorCode?: number
          /** @example 422 */
          statusCode?: number
          /** @example [0401-5006]: Not enough virtual currency */
          errorMessage?: string
        }
      }
    }
    /** @description The list of sellable items was successfully received. */
    'sellable_items_200-get-items-list': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          has_more?: components['schemas']['Pagination_has-more']
          /** @example [
           *       {
           *         "item_id": 259765,
           *         "sku": "gold",
           *         "type": "virtual_currency",
           *         "name": "Gold",
           *         "description": null,
           *         "image_url": "https://cdn3.xsolla.com/img/misc/images/e2e9ce8b00eb0190c161c4258b899101.png",
           *         "price": {
           *           "amount": "1.00",
           *           "amount_without_discount": "1.00",
           *           "currency": "USD"
           *         },
           *         "virtual_prices": [],
           *         "can_be_bought": true,
           *         "attributes": [],
           *         "is_free": false,
           *         "groups": [],
           *         "inventory_options": {
           *           "consumable": {
           *             "usages_count": 1
           *           },
           *           "expiration_period": null
           *         },
           *         "limits": {
           *           "per_user": {
           *             "total": 5,
           *             "available": 3,
           *             "recurrent_schedule": {
           *               "interval_type": "weekly",
           *               "reset_next_date": 1746057600
           *             }
           *           }
           *         },
           *         "vp_rewards": [
           *           {
           *             "item_id": 175232,
           *             "sku": "value_point_1",
           *             "amount": 130,
           *             "name": "Value point",
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/54c0cf9d345817cdacfdde198db178e0.jpg"
           *           }
           *         ]
           *       },
           *       {
           *         "item_id": 259766,
           *         "sku": "silver",
           *         "type": "virtual_currency",
           *         "name": "Silver",
           *         "description": null,
           *         "image_url": "https://cdn3.xsolla.com/img/misc/images/015e4f4ea4deb1e2c92d5c21a4d58309.png",
           *         "price": {
           *           "amount": "0.50",
           *           "amount_without_discount": "0.50",
           *           "currency": "USD"
           *         },
           *         "virtual_prices": [],
           *         "can_be_bought": true,
           *         "attributes": [],
           *         "is_free": false,
           *         "groups": [],
           *         "inventory_options": {
           *           "consumable": {
           *             "usages_count": 1
           *           },
           *           "expiration_period": null
           *         },
           *         "limits": null,
           *         "vp_rewards": []
           *       },
           *       {
           *         "item_id": 259767,
           *         "sku": "bronze",
           *         "type": "virtual_currency",
           *         "name": "Bronze",
           *         "description": null,
           *         "image_url": "https://cdn3.xsolla.com/img/misc/images/b0beedd5763b612bd3a5631e6cb1d1ff.png",
           *         "price": {
           *           "amount": "0.10",
           *           "amount_without_discount": "0.10",
           *           "currency": "USD"
           *         },
           *         "virtual_prices": [],
           *         "can_be_bought": true,
           *         "attributes": [],
           *         "is_free": false,
           *         "groups": [],
           *         "inventory_options": {
           *           "consumable": {
           *             "usages_count": 1
           *           },
           *           "expiration_period": null
           *         },
           *         "limits": null,
           *         "vp_rewards": []
           *       },
           *       {
           *         "item_id": 259768,
           *         "sku": "gold_chest",
           *         "type": "bundle",
           *         "name": "Chest of gold",
           *         "bundle_type": "virtual_currency_package",
           *         "description": "Chest of gold",
           *         "image_url": "https://cdn3.xsolla.com/img/misc/images/61b8d0785093017ce1f50ebed55c42a9.png",
           *         "price": {
           *           "amount": "7.99",
           *           "amount_without_discount": "7.99",
           *           "currency": "USD"
           *         },
           *         "virtual_prices": [],
           *         "can_be_bought": true,
           *         "attributes": [],
           *         "is_free": false,
           *         "groups": [],
           *         "content": [
           *           {
           *             "item_id": 259765,
           *             "sku": "gold",
           *             "type": "virtual_currency",
           *             "name": "Gold",
           *             "description": null,
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/e2e9ce8b00eb0190c161c4258b899101.png",
           *             "inventory_options": {
           *               "consumable": {
           *                 "usages_count": 1
           *               },
           *               "expiration_period": null
           *             },
           *             "quantity": 10
           *           }
           *         ],
           *         "limits": null,
           *         "vp_rewards": []
           *       },
           *       {
           *         "item_id": 259769,
           *         "sku": "silver_chest",
           *         "type": "bundle",
           *         "name": "Chest of silver",
           *         "bundle_type": "virtual_currency_package",
           *         "description": "Chest of silver",
           *         "image_url": "https://cdn3.xsolla.com/img/misc/images/f0b59a3370404e8881107249051b70bd.png",
           *         "price": {
           *           "amount": "19.99",
           *           "amount_without_discount": "19.99",
           *           "currency": "USD"
           *         },
           *         "virtual_prices": [],
           *         "can_be_bought": true,
           *         "attributes": [],
           *         "is_free": false,
           *         "groups": [],
           *         "content": [
           *           {
           *             "item_id": 259766,
           *             "sku": "silver",
           *             "type": "virtual_currency",
           *             "name": "Silver",
           *             "description": null,
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/015e4f4ea4deb1e2c92d5c21a4d58309.png",
           *             "inventory_options": {
           *               "consumable": {
           *                 "usages_count": 1
           *               },
           *               "expiration_period": null
           *             },
           *             "quantity": 50
           *           }
           *         ],
           *         "limits": null,
           *         "vp_rewards": []
           *       },
           *       {
           *         "item_id": 259770,
           *         "sku": "bronze_chest",
           *         "type": "bundle",
           *         "name": "Chest of bronze",
           *         "bundle_type": "virtual_currency_package",
           *         "description": "Chest of bronze",
           *         "image_url": "https://cdn3.xsolla.com/img/misc/images/b32eb5b1f4f0c202ea6ac4e21c2eae18.png",
           *         "price": {
           *           "amount": "5.99",
           *           "amount_without_discount": "5.99",
           *           "currency": "USD"
           *         },
           *         "virtual_prices": [],
           *         "can_be_bought": true,
           *         "attributes": [],
           *         "is_free": false,
           *         "groups": [],
           *         "content": [
           *           {
           *             "item_id": 259767,
           *             "sku": "bronze",
           *             "type": "virtual_currency",
           *             "name": "Bronze",
           *             "description": null,
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/b0beedd5763b612bd3a5631e6cb1d1ff.png",
           *             "inventory_options": {
           *               "consumable": {
           *                 "usages_count": 1
           *               },
           *               "expiration_period": null
           *             },
           *             "quantity": 100
           *           }
           *         ],
           *         "limits": null,
           *         "vp_rewards": []
           *       },
           *       {
           *         "item_id": 259771,
           *         "sku": "sword",
           *         "type": "virtual_good",
           *         "name": "Sword",
           *         "description": "Sword",
           *         "image_url": "https://cdn3.xsolla.com/img/misc/images/a558727a420cad609556e4449b9ecb12.png",
           *         "price": {
           *           "amount": "1.99",
           *           "amount_without_discount": "1.99",
           *           "currency": "USD"
           *         },
           *         "virtual_prices": [
           *           {
           *             "description": null,
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/e2e9ce8b00eb0190c161c4258b899101.png",
           *             "item_id": 259765,
           *             "sku": "gold",
           *             "name": "Gold",
           *             "type": "virtual_currency",
           *             "amount": 2,
           *             "amount_without_discount": 2,
           *             "calculated_price": {
           *               "amount": "2.00",
           *               "amount_without_discount": "2.00"
           *             },
           *             "is_default": true
           *           },
           *           {
           *             "description": null,
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/015e4f4ea4deb1e2c92d5c21a4d58309.png",
           *             "item_id": 259766,
           *             "sku": "silver",
           *             "name": "Silver",
           *             "type": "virtual_currency",
           *             "amount": 5,
           *             "amount_without_discount": 5,
           *             "calculated_price": {
           *               "amount": "5.00",
           *               "amount_without_discount": "5.00"
           *             },
           *             "is_default": false
           *           },
           *           {
           *             "description": null,
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/b0beedd5763b612bd3a5631e6cb1d1ff.png",
           *             "item_id": 259767,
           *             "sku": "bronze",
           *             "name": "Bronze",
           *             "type": "virtual_currency",
           *             "amount": 50,
           *             "amount_without_discount": 50,
           *             "calculated_price": {
           *               "amount": "50.00",
           *               "amount_without_discount": "50.00"
           *             },
           *             "is_default": false
           *           }
           *         ],
           *         "can_be_bought": true,
           *         "attributes": [],
           *         "is_free": false,
           *         "groups": [
           *           {
           *             "external_id": "swords",
           *             "name": "Swords"
           *           }
           *         ],
           *         "virtual_item_type": "non_consumable",
           *         "inventory_options": {
           *           "consumable": null,
           *           "expiration_period": null
           *         },
           *         "limits": null,
           *         "vp_rewards": []
           *       },
           *       {
           *         "item_id": 259772,
           *         "sku": "saber",
           *         "type": "virtual_good",
           *         "name": "Saber",
           *         "description": "Saber",
           *         "image_url": "https://cdn3.xsolla.com/img/misc/images/edd914d60301d77b94926478d253fcb6.png",
           *         "price": {
           *           "amount": "3.99",
           *           "amount_without_discount": "3.99",
           *           "currency": "USD"
           *         },
           *         "virtual_prices": [
           *           {
           *             "description": null,
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/e2e9ce8b00eb0190c161c4258b899101.png",
           *             "item_id": 259765,
           *             "sku": "gold",
           *             "name": "Gold",
           *             "type": "virtual_currency",
           *             "amount": 3,
           *             "amount_without_discount": 3,
           *             "calculated_price": {
           *               "amount": "3.00",
           *               "amount_without_discount": "3.00"
           *             },
           *             "is_default": true
           *           },
           *           {
           *             "description": null,
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/015e4f4ea4deb1e2c92d5c21a4d58309.png",
           *             "item_id": 259766,
           *             "sku": "silver",
           *             "name": "Silver",
           *             "type": "virtual_currency",
           *             "amount": 7,
           *             "amount_without_discount": 7,
           *             "calculated_price": {
           *               "amount": "7.00",
           *               "amount_without_discount": "7.00"
           *             },
           *             "is_default": false
           *           },
           *           {
           *             "description": null,
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/b0beedd5763b612bd3a5631e6cb1d1ff.png",
           *             "item_id": 259767,
           *             "sku": "bronze",
           *             "name": "Bronze",
           *             "type": "virtual_currency",
           *             "amount": 70,
           *             "amount_without_discount": 70,
           *             "calculated_price": {
           *               "amount": "70.00",
           *               "amount_without_discount": "70.00"
           *             },
           *             "is_default": false
           *           }
           *         ],
           *         "can_be_bought": true,
           *         "attributes": [],
           *         "is_free": false,
           *         "groups": [
           *           {
           *             "external_id": "swords",
           *             "name": "Swords"
           *           }
           *         ],
           *         "virtual_item_type": "non_consumable",
           *         "inventory_options": {
           *           "consumable": null,
           *           "expiration_period": null
           *         },
           *         "limits": null,
           *         "vp_rewards": []
           *       },
           *       {
           *         "item_id": 259773,
           *         "sku": "bow",
           *         "type": "virtual_good",
           *         "name": "Bow",
           *         "description": "Bow",
           *         "image_url": "https://cdn3.xsolla.com/img/misc/images/3bb3b0a5254ad15134c891108898363f.png",
           *         "price": {
           *           "amount": "4.99",
           *           "amount_without_discount": "4.99",
           *           "currency": "USD"
           *         },
           *         "virtual_prices": [
           *           {
           *             "description": null,
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/e2e9ce8b00eb0190c161c4258b899101.png",
           *             "item_id": 259765,
           *             "sku": "gold",
           *             "name": "Gold",
           *             "type": "virtual_currency",
           *             "amount": 5,
           *             "amount_without_discount": 5,
           *             "calculated_price": {
           *               "amount": "5.00",
           *               "amount_without_discount": "5.00"
           *             },
           *             "is_default": true
           *           },
           *           {
           *             "description": null,
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/015e4f4ea4deb1e2c92d5c21a4d58309.png",
           *             "item_id": 259766,
           *             "sku": "silver",
           *             "name": "Silver",
           *             "type": "virtual_currency",
           *             "amount": 10,
           *             "amount_without_discount": 10,
           *             "calculated_price": {
           *               "amount": "10.00",
           *               "amount_without_discount": "10.00"
           *             },
           *             "is_default": false
           *           },
           *           {
           *             "description": null,
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/b0beedd5763b612bd3a5631e6cb1d1ff.png",
           *             "item_id": 259767,
           *             "sku": "bronze",
           *             "name": "Bronze",
           *             "type": "virtual_currency",
           *             "amount": 100,
           *             "amount_without_discount": 100,
           *             "calculated_price": {
           *               "amount": "100.00",
           *               "amount_without_discount": "100.00"
           *             },
           *             "is_default": false
           *           }
           *         ],
           *         "can_be_bought": true,
           *         "attributes": [],
           *         "is_free": false,
           *         "groups": [
           *           {
           *             "external_id": "bows",
           *             "name": "Bows"
           *           }
           *         ],
           *         "virtual_item_type": "non_consumable",
           *         "inventory_options": {
           *           "consumable": null,
           *           "expiration_period": null
           *         },
           *         "limits": null,
           *         "vp_rewards": []
           *       },
           *       {
           *         "item_id": 259774,
           *         "sku": "electric_shield",
           *         "type": "virtual_good",
           *         "name": "Electric shield",
           *         "description": "Electric shield",
           *         "image_url": "https://cdn3.xsolla.com/img/misc/images/d2d6b1b517e6a7f3765c3bb5a3cfb87d.png",
           *         "price": {
           *           "amount": "9.99",
           *           "amount_without_discount": "9.99",
           *           "currency": "USD"
           *         },
           *         "virtual_prices": [
           *           {
           *             "description": null,
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/e2e9ce8b00eb0190c161c4258b899101.png",
           *             "item_id": 259765,
           *             "sku": "gold",
           *             "name": "Gold",
           *             "type": "virtual_currency",
           *             "amount": 10,
           *             "amount_without_discount": 10,
           *             "calculated_price": {
           *               "amount": "10.00",
           *               "amount_without_discount": "10.00"
           *             },
           *             "is_default": true
           *           },
           *           {
           *             "description": null,
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/015e4f4ea4deb1e2c92d5c21a4d58309.png",
           *             "item_id": 259766,
           *             "sku": "silver",
           *             "name": "Silver",
           *             "type": "virtual_currency",
           *             "amount": 20,
           *             "amount_without_discount": 20,
           *             "calculated_price": {
           *               "amount": "20.00",
           *               "amount_without_discount": "20.00"
           *             },
           *             "is_default": false
           *           },
           *           {
           *             "description": null,
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/b0beedd5763b612bd3a5631e6cb1d1ff.png",
           *             "item_id": 259767,
           *             "sku": "bronze",
           *             "name": "Bronze",
           *             "type": "virtual_currency",
           *             "amount": 200,
           *             "amount_without_discount": 200,
           *             "calculated_price": {
           *               "amount": "200.00",
           *               "amount_without_discount": "200.00"
           *             },
           *             "is_default": false
           *           }
           *         ],
           *         "can_be_bought": true,
           *         "attributes": [],
           *         "is_free": false,
           *         "groups": [
           *           {
           *             "external_id": "armour",
           *             "name": "Armour"
           *           }
           *         ],
           *         "virtual_item_type": "non_consumable",
           *         "inventory_options": {
           *           "consumable": null,
           *           "expiration_period": null
           *         },
           *         "vp_rewards": []
           *       },
           *       {
           *         "item_id": 259775,
           *         "sku": "royal_shield",
           *         "type": "virtual_good",
           *         "name": "Royal shield",
           *         "description": "Royal shield",
           *         "image_url": "https://cdn3.xsolla.com/img/misc/images/ed417975312a52efeeab8b039ff25cb1.png",
           *         "price": {
           *           "amount": "19.99",
           *           "amount_without_discount": "19.99",
           *           "currency": "USD"
           *         },
           *         "virtual_prices": [
           *           {
           *             "description": null,
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/e2e9ce8b00eb0190c161c4258b899101.png",
           *             "item_id": 259765,
           *             "sku": "gold",
           *             "name": "Gold",
           *             "type": "virtual_currency",
           *             "amount": 20,
           *             "amount_without_discount": 20,
           *             "calculated_price": {
           *               "amount": "20.00",
           *               "amount_without_discount": "20.00"
           *             },
           *             "is_default": true
           *           },
           *           {
           *             "description": null,
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/015e4f4ea4deb1e2c92d5c21a4d58309.png",
           *             "item_id": 259766,
           *             "sku": "silver",
           *             "name": "Silver",
           *             "type": "virtual_currency",
           *             "amount": 40,
           *             "amount_without_discount": 40,
           *             "calculated_price": {
           *               "amount": "40.00",
           *               "amount_without_discount": "40.00"
           *             },
           *             "is_default": false
           *           },
           *           {
           *             "description": null,
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/b0beedd5763b612bd3a5631e6cb1d1ff.png",
           *             "item_id": 259767,
           *             "sku": "bronze",
           *             "name": "Bronze",
           *             "type": "virtual_currency",
           *             "amount": 400,
           *             "amount_without_discount": 400,
           *             "calculated_price": {
           *               "amount": "400.00",
           *               "amount_without_discount": "400.00"
           *             },
           *             "is_default": false
           *           }
           *         ],
           *         "can_be_bought": true,
           *         "attributes": [],
           *         "is_free": false,
           *         "groups": [
           *           {
           *             "external_id": "armour",
           *             "name": "Armour"
           *           }
           *         ],
           *         "virtual_item_type": "non_consumable",
           *         "inventory_options": {
           *           "consumable": null,
           *           "expiration_period": null
           *         },
           *         "vp_rewards": []
           *       },
           *       {
           *         "item_id": 259776,
           *         "sku": "ancient_helmet",
           *         "type": "virtual_good",
           *         "name": "Ancient helmet",
           *         "description": "Ancient helmet",
           *         "image_url": "https://cdn3.xsolla.com/img/misc/images/e70e16d9626f435e519fc8e1cc1e7176.png",
           *         "price": {
           *           "amount": "1.99",
           *           "amount_without_discount": "1.99",
           *           "currency": "USD"
           *         },
           *         "virtual_prices": [
           *           {
           *             "description": null,
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/e2e9ce8b00eb0190c161c4258b899101.png",
           *             "item_id": 259765,
           *             "sku": "gold",
           *             "name": "Gold",
           *             "type": "virtual_currency",
           *             "amount": 2,
           *             "amount_without_discount": 2,
           *             "calculated_price": {
           *               "amount": "2.00",
           *               "amount_without_discount": "2.00"
           *             },
           *             "is_default": true
           *           },
           *           {
           *             "description": null,
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/015e4f4ea4deb1e2c92d5c21a4d58309.png",
           *             "item_id": 259766,
           *             "sku": "silver",
           *             "name": "Silver",
           *             "type": "virtual_currency",
           *             "amount": 4,
           *             "amount_without_discount": 4,
           *             "calculated_price": {
           *               "amount": "4.00",
           *               "amount_without_discount": "4.00"
           *             },
           *             "is_default": false
           *           },
           *           {
           *             "description": null,
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/b0beedd5763b612bd3a5631e6cb1d1ff.png",
           *             "item_id": 259767,
           *             "sku": "bronze",
           *             "name": "Bronze",
           *             "type": "virtual_currency",
           *             "amount": 40,
           *             "amount_without_discount": 40,
           *             "calculated_price": {
           *               "amount": "40.00",
           *               "amount_without_discount": "40.00"
           *             },
           *             "is_default": false
           *           }
           *         ],
           *         "can_be_bought": true,
           *         "attributes": [],
           *         "is_free": false,
           *         "groups": [
           *           {
           *             "external_id": "armour",
           *             "name": "Armour"
           *           }
           *         ],
           *         "virtual_item_type": "non_consumable",
           *         "inventory_options": {
           *           "consumable": null,
           *           "expiration_period": null
           *         },
           *         "vp_rewards": []
           *       },
           *       {
           *         "item_id": 259777,
           *         "sku": "wooden_helmet",
           *         "type": "virtual_good",
           *         "name": "Wooden helmet",
           *         "description": "Wooden helmet",
           *         "image_url": "https://cdn3.xsolla.com/img/misc/images/40d2812e52ad9d988ac20fc842fc66f0.png",
           *         "price": {
           *           "amount": "0.99",
           *           "amount_without_discount": "0.99",
           *           "currency": "USD"
           *         },
           *         "virtual_prices": [
           *           {
           *             "description": null,
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/e2e9ce8b00eb0190c161c4258b899101.png",
           *             "item_id": 259765,
           *             "sku": "gold",
           *             "name": "Gold",
           *             "type": "virtual_currency",
           *             "amount": 1,
           *             "amount_without_discount": 1,
           *             "calculated_price": {
           *               "amount": "1.00",
           *               "amount_without_discount": "1.00"
           *             },
           *             "is_default": true
           *           },
           *           {
           *             "description": null,
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/015e4f4ea4deb1e2c92d5c21a4d58309.png",
           *             "item_id": 259766,
           *             "sku": "silver",
           *             "name": "Silver",
           *             "type": "virtual_currency",
           *             "amount": 2,
           *             "amount_without_discount": 2,
           *             "calculated_price": {
           *               "amount": "2.00",
           *               "amount_without_discount": "2.00"
           *             },
           *             "is_default": false
           *           },
           *           {
           *             "description": null,
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/b0beedd5763b612bd3a5631e6cb1d1ff.png",
           *             "item_id": 259767,
           *             "sku": "bronze",
           *             "name": "Bronze",
           *             "type": "virtual_currency",
           *             "amount": 20,
           *             "amount_without_discount": 20,
           *             "calculated_price": {
           *               "amount": "20.00",
           *               "amount_without_discount": "20.00"
           *             },
           *             "is_default": false
           *           }
           *         ],
           *         "can_be_bought": true,
           *         "attributes": [],
           *         "is_free": false,
           *         "groups": [
           *           {
           *             "external_id": "armour",
           *             "name": "Armour"
           *           }
           *         ],
           *         "virtual_item_type": "non_consumable",
           *         "inventory_options": {
           *           "consumable": null,
           *           "expiration_period": null
           *         },
           *         "vp_rewards": []
           *       },
           *       {
           *         "item_id": 259778,
           *         "sku": "armor_chest",
           *         "type": "bundle",
           *         "name": "Chest of armor",
           *         "bundle_type": "standard",
           *         "description": "Chest of armour",
           *         "image_url": "https://cdn3.xsolla.com/img/misc/images/5212202f9b8c9dbd254652d6cbeba03e.png",
           *         "price": {
           *           "amount": "19.99",
           *           "amount_without_discount": "19.99",
           *           "currency": "USD"
           *         },
           *         "virtual_prices": [
           *           {
           *             "description": null,
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/e2e9ce8b00eb0190c161c4258b899101.png",
           *             "item_id": 259765,
           *             "sku": "gold",
           *             "name": "Gold",
           *             "type": "virtual_currency",
           *             "amount": 20,
           *             "amount_without_discount": 20,
           *             "calculated_price": {
           *               "amount": "20.00",
           *               "amount_without_discount": "20.00"
           *             },
           *             "is_default": true
           *           },
           *           {
           *             "description": null,
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/015e4f4ea4deb1e2c92d5c21a4d58309.png",
           *             "item_id": 259766,
           *             "sku": "silver",
           *             "name": "Silver",
           *             "type": "virtual_currency",
           *             "amount": 40,
           *             "amount_without_discount": 40,
           *             "calculated_price": {
           *               "amount": "40.00",
           *               "amount_without_discount": "40.00"
           *             },
           *             "is_default": false
           *           },
           *           {
           *             "description": null,
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/b0beedd5763b612bd3a5631e6cb1d1ff.png",
           *             "item_id": 259767,
           *             "sku": "bronze",
           *             "name": "Bronze",
           *             "type": "virtual_currency",
           *             "amount": 400,
           *             "amount_without_discount": 400,
           *             "calculated_price": {
           *               "amount": "400.00",
           *               "amount_without_discount": "400.00"
           *             },
           *             "is_default": false
           *           }
           *         ],
           *         "can_be_bought": true,
           *         "attributes": [],
           *         "is_free": false,
           *         "groups": [],
           *         "total_content_price": {
           *           "amount": "11.98",
           *           "amount_without_discount": "11.98",
           *           "currency": "USD"
           *         },
           *         "content": [
           *           {
           *             "item_id": 259774,
           *             "sku": "electric_shield",
           *             "type": "virtual_good",
           *             "name": "Electric shield",
           *             "description": "Electric shield",
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/d2d6b1b517e6a7f3765c3bb5a3cfb87d.png",
           *             "price": {
           *               "amount": "9.99",
           *               "amount_without_discount": "9.99",
           *               "currency": "USD"
           *             },
           *             "virtual_prices": [
           *               {
           *                 "description": null,
           *                 "image_url": "https://cdn3.xsolla.com/img/misc/images/e2e9ce8b00eb0190c161c4258b899101.png",
           *                 "item_id": 259765,
           *                 "sku": "gold",
           *                 "name": "Gold",
           *                 "type": "virtual_currency",
           *                 "amount": 10,
           *                 "amount_without_discount": 10,
           *                 "calculated_price": {
           *                   "amount": "10.00",
           *                   "amount_without_discount": "10.00"
           *                 },
           *                 "is_default": true
           *               },
           *               {
           *                 "description": null,
           *                 "image_url": "https://cdn3.xsolla.com/img/misc/images/015e4f4ea4deb1e2c92d5c21a4d58309.png",
           *                 "item_id": 259766,
           *                 "sku": "silver",
           *                 "name": "Silver",
           *                 "type": "virtual_currency",
           *                 "amount": 20,
           *                 "amount_without_discount": 20,
           *                 "calculated_price": {
           *                   "amount": "20.00",
           *                   "amount_without_discount": "20.00"
           *                 },
           *                 "is_default": false
           *               },
           *               {
           *                 "description": null,
           *                 "image_url": "https://cdn3.xsolla.com/img/misc/images/b0beedd5763b612bd3a5631e6cb1d1ff.png",
           *                 "item_id": 259767,
           *                 "sku": "bronze",
           *                 "name": "Bronze",
           *                 "type": "virtual_currency",
           *                 "amount": 200,
           *                 "amount_without_discount": 200,
           *                 "calculated_price": {
           *                   "amount": "200.00",
           *                   "amount_without_discount": "200.00"
           *                 },
           *                 "is_default": false
           *               }
           *             ],
           *             "can_be_bought": true,
           *             "attributes": [],
           *             "is_free": false,
           *             "groups": [
           *               {
           *                 "external_id": "armour",
           *                 "name": "Armour"
           *               }
           *             ],
           *             "virtual_item_type": "non_consumable",
           *             "inventory_options": {
           *               "consumable": null,
           *               "expiration_period": null
           *             },
           *             "quantity": 1
           *           },
           *           {
           *             "item_id": 259776,
           *             "sku": "ancient_helmet",
           *             "type": "virtual_good",
           *             "name": "Ancient helmet",
           *             "description": "Ancient helmet",
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/e70e16d9626f435e519fc8e1cc1e7176.png",
           *             "price": {
           *               "amount": "1.99",
           *               "amount_without_discount": "1.99",
           *               "currency": "USD"
           *             },
           *             "virtual_prices": [
           *               {
           *                 "description": null,
           *                 "image_url": "https://cdn3.xsolla.com/img/misc/images/e2e9ce8b00eb0190c161c4258b899101.png",
           *                 "item_id": 259765,
           *                 "sku": "gold",
           *                 "name": "Gold",
           *                 "type": "virtual_currency",
           *                 "amount": 2,
           *                 "amount_without_discount": 2,
           *                 "calculated_price": {
           *                   "amount": "2.00",
           *                   "amount_without_discount": "2.00"
           *                 },
           *                 "is_default": true
           *               },
           *               {
           *                 "description": null,
           *                 "image_url": "https://cdn3.xsolla.com/img/misc/images/015e4f4ea4deb1e2c92d5c21a4d58309.png",
           *                 "item_id": 259766,
           *                 "sku": "silver",
           *                 "name": "Silver",
           *                 "type": "virtual_currency",
           *                 "amount": 4,
           *                 "amount_without_discount": 4,
           *                 "calculated_price": {
           *                   "amount": "4.00",
           *                   "amount_without_discount": "4.00"
           *                 },
           *                 "is_default": false
           *               },
           *               {
           *                 "description": null,
           *                 "image_url": "https://cdn3.xsolla.com/img/misc/images/b0beedd5763b612bd3a5631e6cb1d1ff.png",
           *                 "item_id": 259767,
           *                 "sku": "bronze",
           *                 "name": "Bronze",
           *                 "type": "virtual_currency",
           *                 "amount": 40,
           *                 "amount_without_discount": 40,
           *                 "calculated_price": {
           *                   "amount": "40.00",
           *                   "amount_without_discount": "40.00"
           *                 },
           *                 "is_default": false
           *               }
           *             ],
           *             "can_be_bought": true,
           *             "attributes": [],
           *             "is_free": false,
           *             "groups": [
           *               {
           *                 "external_id": "armour",
           *                 "name": "Armour"
           *               }
           *             ],
           *             "virtual_item_type": "non_consumable",
           *             "inventory_options": {
           *               "consumable": null,
           *               "expiration_period": null
           *             },
           *             "quantity": 1
           *           }
           *         ],
           *         "vp_rewards": []
           *       },
           *       {
           *         "item_id": 259779,
           *         "sku": "treasure_chest",
           *         "type": "bundle",
           *         "name": "Treasure Chest",
           *         "bundle_type": "standard",
           *         "description": "Treasure Chest",
           *         "image_url": "https://cdn3.xsolla.com/img/misc/images/7b1c0136d91398f9ab17924deee5eeec.png",
           *         "price": {
           *           "amount": "9.99",
           *           "amount_without_discount": "9.99",
           *           "currency": "USD"
           *         },
           *         "virtual_prices": [
           *           {
           *             "description": null,
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/e2e9ce8b00eb0190c161c4258b899101.png",
           *             "item_id": 259765,
           *             "sku": "gold",
           *             "name": "Gold",
           *             "type": "virtual_currency",
           *             "amount": 10,
           *             "amount_without_discount": 10,
           *             "calculated_price": {
           *               "amount": "10.00",
           *               "amount_without_discount": "10.00"
           *             },
           *             "is_default": true
           *           },
           *           {
           *             "description": null,
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/015e4f4ea4deb1e2c92d5c21a4d58309.png",
           *             "item_id": 259766,
           *             "sku": "silver",
           *             "name": "Silver",
           *             "type": "virtual_currency",
           *             "amount": 20,
           *             "amount_without_discount": 20,
           *             "calculated_price": {
           *               "amount": "20.00",
           *               "amount_without_discount": "20.00"
           *             },
           *             "is_default": false
           *           },
           *           {
           *             "description": null,
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/b0beedd5763b612bd3a5631e6cb1d1ff.png",
           *             "item_id": 259767,
           *             "sku": "bronze",
           *             "name": "Bronze",
           *             "type": "virtual_currency",
           *             "amount": 40,
           *             "amount_without_discount": 40,
           *             "calculated_price": {
           *               "amount": "40.00",
           *               "amount_without_discount": "40.00"
           *             },
           *             "is_default": false
           *           }
           *         ],
           *         "can_be_bought": true,
           *         "attributes": [],
           *         "is_free": false,
           *         "groups": [],
           *         "total_content_price": {
           *           "amount": "802.89",
           *           "amount_without_discount": "802.89",
           *           "currency": "USD"
           *         },
           *         "content": [
           *           {
           *             "item_id": 259772,
           *             "sku": "saber",
           *             "type": "virtual_good",
           *             "name": "Saber",
           *             "description": "Saber",
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/edd914d60301d77b94926478d253fcb6.png",
           *             "price": {
           *               "amount": "3.99",
           *               "amount_without_discount": "3.99",
           *               "currency": "USD"
           *             },
           *             "virtual_prices": [
           *               {
           *                 "description": null,
           *                 "image_url": "https://cdn3.xsolla.com/img/misc/images/e2e9ce8b00eb0190c161c4258b899101.png",
           *                 "item_id": 259765,
           *                 "sku": "gold",
           *                 "name": "Gold",
           *                 "type": "virtual_currency",
           *                 "amount": 3,
           *                 "amount_without_discount": 3,
           *                 "calculated_price": {
           *                   "amount": "3.00",
           *                   "amount_without_discount": "3.00"
           *                 },
           *                 "is_default": true
           *               },
           *               {
           *                 "description": null,
           *                 "image_url": "https://cdn3.xsolla.com/img/misc/images/015e4f4ea4deb1e2c92d5c21a4d58309.png",
           *                 "item_id": 259766,
           *                 "sku": "silver",
           *                 "name": "Silver",
           *                 "type": "virtual_currency",
           *                 "amount": 7,
           *                 "amount_without_discount": 7,
           *                 "calculated_price": {
           *                   "amount": "7.00",
           *                   "amount_without_discount": "7.00"
           *                 },
           *                 "is_default": false
           *               },
           *               {
           *                 "description": null,
           *                 "image_url": "https://cdn3.xsolla.com/img/misc/images/b0beedd5763b612bd3a5631e6cb1d1ff.png",
           *                 "item_id": 259767,
           *                 "sku": "bronze",
           *                 "name": "Bronze",
           *                 "type": "virtual_currency",
           *                 "amount": 70,
           *                 "amount_without_discount": 70,
           *                 "calculated_price": {
           *                   "amount": "70.00",
           *                   "amount_without_discount": "70.00"
           *                 },
           *                 "is_default": false
           *               }
           *             ],
           *             "can_be_bought": true,
           *             "attributes": [],
           *             "is_free": false,
           *             "groups": [
           *               {
           *                 "external_id": "swords",
           *                 "name": "Swords"
           *               }
           *             ],
           *             "virtual_item_type": "non_consumable",
           *             "inventory_options": {
           *               "consumable": null,
           *               "expiration_period": null
           *             },
           *             "quantity": 1
           *           },
           *           {
           *             "item_id": 259769,
           *             "sku": "silver_chest",
           *             "type": "bundle",
           *             "name": "Chest of silver",
           *             "bundle_type": "virtual_currency_package",
           *             "description": "Chest of silver",
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/f0b59a3370404e8881107249051b70bd.png",
           *             "price": {
           *               "amount": "19.99",
           *               "amount_without_discount": "19.99",
           *               "currency": "USD"
           *             },
           *             "virtual_prices": [],
           *             "can_be_bought": true,
           *             "attributes": [],
           *             "is_free": false,
           *             "groups": [],
           *             "content": [
           *               {
           *                 "item_id": 259766,
           *                 "sku": "silver",
           *                 "type": "virtual_currency",
           *                 "name": "Silver",
           *                 "description": null,
           *                 "image_url": "https://cdn3.xsolla.com/img/misc/images/015e4f4ea4deb1e2c92d5c21a4d58309.png",
           *                 "inventory_options": {
           *                   "consumable": {
           *                     "usages_count": 1
           *                   },
           *                   "expiration_period": null
           *                 },
           *                 "quantity": 50
           *               }
           *             ],
           *             "quantity": 10
           *           },
           *           {
           *             "item_id": 259770,
           *             "sku": "bronze_chest",
           *             "type": "bundle",
           *             "name": "Chest of bronze",
           *             "bundle_type": "virtual_currency_package",
           *             "description": "Chest of bronze",
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/b32eb5b1f4f0c202ea6ac4e21c2eae18.png",
           *             "price": {
           *               "amount": "5.99",
           *               "amount_without_discount": "5.99",
           *               "currency": "USD"
           *             },
           *             "virtual_prices": [],
           *             "can_be_bought": true,
           *             "attributes": [],
           *             "is_free": false,
           *             "groups": [],
           *             "content": [
           *               {
           *                 "item_id": 259767,
           *                 "sku": "bronze",
           *                 "type": "virtual_currency",
           *                 "name": "Bronze",
           *                 "description": null,
           *                 "image_url": "https://cdn3.xsolla.com/img/misc/images/b0beedd5763b612bd3a5631e6cb1d1ff.png",
           *                 "inventory_options": {
           *                   "consumable": {
           *                     "usages_count": 1
           *                   },
           *                   "expiration_period": null
           *                 },
           *                 "quantity": 100
           *               }
           *             ],
           *             "quantity": 100
           *           }
           *         ],
           *         "vp_rewards": []
           *       }
           *     ] */
          items?: {
            /**
             * @description Internal unique item ID that is provided upon item creation.
             * @example 259774
             */
            item_id?: number
            /**
             * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
             * @example electric_shield
             */
            sku?: string
            /**
             * @description Item name.
             * @example Electric shield
             */
            name?: string
            /**
             * @description Groups the item belongs to.
             * @example [
             *       {
             *         "external_id": "armour",
             *         "name": "Armour"
             *       }
             *     ]
             */
            groups?: {
              /** @example armour */
              external_id?: string
              /** @example Armour */
              name?: string
            }[]
            attributes?: components['schemas']['Virtual-Items-Currency_client-attributes']
            /**
             * @description Type of item: `virtual_good`/`virtual_currency`/`bundle`/`game_key`/`physical_good`.
             * @example virtual_good
             * @enum {string}
             */
            type?: 'virtual_good' | 'virtual_currency' | 'bundle' | 'game_key' | 'physical_good'
            /**
             * @description Item description.
             * @example Electric shield
             */
            description?: string
            /**
             * @description Image URL.
             * @example https://cdn3.xsolla.com/img/misc/images/d2d6b1b517e6a7f3765c3bb5a3cfb87d.png
             */
            image_url?: string
            is_free?: components['schemas']['value-is_free']
            /** @description Item prices. */
            price?: {
              /**
               * @description Discounted item price.
               * @example 9.99
               */
              amount?: string
              /**
               * @description Item price.
               * @example 9.99
               */
              amount_without_discount?: string
              /**
               * @description Default purchase currency. Three-letter code per [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
               * @example USD
               */
              currency?: string
            }
            /** @description Virtual prices. */
            virtual_prices?: {
              /**
               * @description Discounted item price in virtual currency.
               * @example 10
               */
              amount?: number
              /**
               * @description Item price.
               * @example 10
               */
              amount_without_discount?: number
              /**
               * @description Virtual currency item SKU.
               * @example gold
               */
              sku?: string
              /**
               * @description Whether price is default for item.
               * @example true
               */
              is_default?: boolean
              /**
               * @description Image of virtual currency.
               * @example https://cdn3.xsolla.com/img/misc/images/e2e9ce8b00eb0190c161c4258b899101.png
               */
              image_url?: string
              /**
               * @description Virtual currency name.
               * @example Gold
               */
              name?: string
              /**
               * @description Virtual currency type.
               * @example virtual_currency
               */
              type?: string
              /**
               * @description Virtual currency description.
               * @example null
               */
              description?: string | null
            }[]
            /** @description Defines the inventory item options. */
            inventory_options?: {
              /** @description Defines the consumable properties if this is a consumable item, or `null` if this is a non-consumable item. */
              consumable?: {
                /**
                 * @description Total number of remaining uses if this is a consumable item, or `null` if this is a non-consumable item.
                 * @example 1
                 */
                usages_count?: number | null
              } | null
              /** @description Defines the expiration properties if this is an expired item, or `null` if this is a non-expired item. */
              expiration_period?: {
                /**
                 * @description Defines type of item expiration.
                 * @example day
                 * @enum {string}
                 */
                type?: 'minute' | 'hour' | 'day' | 'week' | 'month' | 'year'
                /**
                 * @description Defines value for an expiration period.
                 * @example 1
                 */
                value?: number
              } | null
            }
            /**
             * @description If `true`, the user can buy an item.
             * @example true
             */
            can_be_bought?: boolean
            /**
             * @description Type of virtual item.
             * @example non-consumable
             * @enum {string}
             */
            virtual_item_type?: 'consumable' | 'non_consumable' | 'non_renewing_subscription'
            promotions?: components['schemas']['Catalog_item_promotions']
            limits?: components['schemas']['Catalog_item_limits']
            custom_attributes?: components['schemas']['item-custom-attributes-response']
            vp_rewards?: components['schemas']['item-value-point-reward'][]
          }[]
        }
      }
    }
    /** @description The sellable item was successfully received. */
    'sellable_items_200-get-item-by-id': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /**
           * @description Internal unique item ID that is provided upon item creation.
           * @example 259774
           */
          item_id?: number
          /**
           * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
           * @example electric_shield
           */
          sku?: string
          /**
           * @description Item name.
           * @example Electric shield
           */
          name?: string
          /**
           * @description Groups the item belongs to.
           * @example [
           *       {
           *         "external_id": "armour",
           *         "name": "Armour"
           *       }
           *     ]
           */
          groups?: {
            /** @example armour */
            external_id?: string
            /** @example Armour */
            name?: string
          }[]
          attributes?: components['schemas']['Virtual-Items-Currency_client-attributes']
          /**
           * @description Type of item: `virtual_good`/`virtual_currency`/`bundle`/`game_key`/`physical_good`.
           * @example virtual_good
           * @enum {string}
           */
          type?: 'virtual_good' | 'virtual_currency' | 'bundle' | 'game_key' | 'physical_good'
          /**
           * @description Item description.
           * @example Electric shield
           */
          description?: string
          /**
           * @description Image URL.
           * @example https://cdn3.xsolla.com/img/misc/images/d2d6b1b517e6a7f3765c3bb5a3cfb87d.png
           */
          image_url?: string
          is_free?: components['schemas']['value-is_free']
          /** @description Item prices. */
          price?: {
            /**
             * @description Discounted item price.
             * @example 9.99
             */
            amount?: string
            /**
             * @description Item price.
             * @example 9.99
             */
            amount_without_discount?: string
            /**
             * @description Default purchase currency. Three-letter code per [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
             * @example USD
             */
            currency?: string
          }
          /** @description Virtual prices. */
          virtual_prices?: {
            /**
             * @description Discounted item price in virtual currency.
             * @example 10
             */
            amount?: number
            /**
             * @description Item price.
             * @example 10
             */
            amount_without_discount?: number
            /**
             * @description Virtual currency item SKU.
             * @example gold
             */
            sku?: string
            /**
             * @description Whether price is default for item.
             * @example true
             */
            is_default?: boolean
            /**
             * @description Image of virtual currency.
             * @example https://cdn3.xsolla.com/img/misc/images/e2e9ce8b00eb0190c161c4258b899101.png
             */
            image_url?: string
            /**
             * @description Virtual currency name.
             * @example Gold
             */
            name?: string
            /**
             * @description Virtual currency type.
             * @example virtual_currency
             */
            type?: string
            /**
             * @description Virtual currency description.
             * @example null
             */
            description?: string | null
          }[]
          /** @description Defines the inventory item options. */
          inventory_options?: {
            /** @description Defines the consumable properties if this is a consumable item, or `null` if this is a non-consumable item. */
            consumable?: {
              /**
               * @description Total number of remaining uses if this is a consumable item, or `null` if this is a non-consumable item.
               * @example 1
               */
              usages_count?: number | null
            } | null
            /** @description Defines the expiration properties if this is an expired item, or `null` if this is a non-expired item. */
            expiration_period?: {
              /**
               * @description Defines type of item expiration.
               * @example day
               * @enum {string}
               */
              type?: 'minute' | 'hour' | 'day' | 'week' | 'month' | 'year'
              /**
               * @description Defines value for an expiration period.
               * @example 1
               */
              value?: number
            } | null
          }
          /**
           * @description If `true`, the user can buy an item.
           * @example true
           */
          can_be_bought?: boolean
          /**
           * @description Type of virtual item.
           * @example non-consumable
           * @enum {string}
           */
          virtual_item_type?: 'consumable' | 'non_consumable' | 'non_renewing_subscription'
          promotions?: components['schemas']['Catalog_item_promotions']
          limits?: components['schemas']['Catalog_item_limits']
          custom_attributes?: components['schemas']['item-custom-attributes-response']
          vp_rewards?: components['schemas']['item-value-point-reward'][]
        }
      }
    }
    /** @description Item not found. Make sure the `project_id` and the `item_id` are correct. */
    'sellable-item-by-id_404': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 404 */
          statusCode?: number
          /** @example 4001 */
          errorCode?: number
          /** @example [0401-4001]: Item with id = 259774 not found */
          errorMessage?: string
        }
      }
    }
    /** @description Item not found. Make sure the `project_id` and the `sku` are correct. */
    'sellable-item-by-sku_404': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 404 */
          statusCode?: number
          /** @example 4001 */
          errorCode?: number
          /** @example [0401-4001]: Item with sku = 'electric_shiel' not found */
          errorMessage?: string
        }
      }
    }
    /** @description The list of sellable items from the specified group was successfully received. */
    'sellable_items_200-get-items-by-group-id': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          has_more?: components['schemas']['Pagination_has-more']
          /** @example [
           *       {
           *         "item_id": 259774,
           *         "sku": "electric_shield",
           *         "type": "virtual_good",
           *         "name": "Electric shield",
           *         "description": "Electric shield",
           *         "image_url": "https://cdn3.xsolla.com/img/misc/images/d2d6b1b517e6a7f3765c3bb5a3cfb87d.png",
           *         "price": {
           *           "amount": "9.99",
           *           "amount_without_discount": "9.99",
           *           "currency": "USD"
           *         },
           *         "virtual_prices": [
           *           {
           *             "description": null,
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/e2e9ce8b00eb0190c161c4258b899101.png",
           *             "item_id": 259765,
           *             "sku": "gold",
           *             "name": "Gold",
           *             "type": "virtual_currency",
           *             "amount": 10,
           *             "amount_without_discount": 10,
           *             "calculated_price": {
           *               "amount": "10.00",
           *               "amount_without_discount": "10.00"
           *             },
           *             "is_default": true
           *           },
           *           {
           *             "description": null,
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/015e4f4ea4deb1e2c92d5c21a4d58309.png",
           *             "item_id": 259766,
           *             "sku": "silver",
           *             "name": "Silver",
           *             "type": "virtual_currency",
           *             "amount": 20,
           *             "amount_without_discount": 20,
           *             "calculated_price": {
           *               "amount": "20.00",
           *               "amount_without_discount": "20.00"
           *             },
           *             "is_default": false
           *           },
           *           {
           *             "description": null,
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/b0beedd5763b612bd3a5631e6cb1d1ff.png",
           *             "item_id": 259767,
           *             "sku": "bronze",
           *             "name": "Bronze",
           *             "type": "virtual_currency",
           *             "amount": 200,
           *             "amount_without_discount": 200,
           *             "calculated_price": {
           *               "amount": "200.00",
           *               "amount_without_discount": "200.00"
           *             },
           *             "is_default": false
           *           }
           *         ],
           *         "can_be_bought": true,
           *         "attributes": [],
           *         "is_free": false,
           *         "groups": [
           *           {
           *             "external_id": "armour",
           *             "name": "Armour"
           *           }
           *         ],
           *         "virtual_item_type": "non_consumable",
           *         "inventory_options": {
           *           "consumable": null,
           *           "expiration_period": null
           *         },
           *         "limits": {
           *           "per_user": {
           *             "total": 5,
           *             "available": 3,
           *             "recurrent_schedule": {
           *               "interval_type": "weekly",
           *               "reset_next_date": 1746057600
           *             }
           *           }
           *         },
           *         "vp_rewards": [
           *           {
           *             "item_id": 175232,
           *             "sku": "value_point_1",
           *             "amount": 130,
           *             "name": "Value point",
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/54c0cf9d345817cdacfdde198db178e0.jpg"
           *           }
           *         ]
           *       },
           *       {
           *         "item_id": 259775,
           *         "sku": "royal_shield",
           *         "type": "virtual_good",
           *         "name": "Royal shield",
           *         "description": "Royal shield",
           *         "image_url": "https://cdn3.xsolla.com/img/misc/images/ed417975312a52efeeab8b039ff25cb1.png",
           *         "price": {
           *           "amount": "19.99",
           *           "amount_without_discount": "19.99",
           *           "currency": "USD"
           *         },
           *         "virtual_prices": [
           *           {
           *             "description": null,
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/e2e9ce8b00eb0190c161c4258b899101.png",
           *             "item_id": 259765,
           *             "sku": "gold",
           *             "name": "Gold",
           *             "type": "virtual_currency",
           *             "amount": 20,
           *             "amount_without_discount": 20,
           *             "calculated_price": {
           *               "amount": "20.00",
           *               "amount_without_discount": "20.00"
           *             },
           *             "is_default": true
           *           },
           *           {
           *             "description": null,
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/015e4f4ea4deb1e2c92d5c21a4d58309.png",
           *             "item_id": 259766,
           *             "sku": "silver",
           *             "name": "Silver",
           *             "type": "virtual_currency",
           *             "amount": 40,
           *             "amount_without_discount": 40,
           *             "calculated_price": {
           *               "amount": "40.00",
           *               "amount_without_discount": "40.00"
           *             },
           *             "is_default": false
           *           },
           *           {
           *             "description": null,
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/b0beedd5763b612bd3a5631e6cb1d1ff.png",
           *             "item_id": 259767,
           *             "sku": "bronze",
           *             "name": "Bronze",
           *             "type": "virtual_currency",
           *             "amount": 400,
           *             "amount_without_discount": 400,
           *             "calculated_price": {
           *               "amount": "400.00",
           *               "amount_without_discount": "400.00"
           *             },
           *             "is_default": false
           *           }
           *         ],
           *         "can_be_bought": true,
           *         "attributes": [],
           *         "is_free": false,
           *         "groups": [
           *           {
           *             "external_id": "armour",
           *             "name": "Armour"
           *           }
           *         ],
           *         "virtual_item_type": "non_consumable",
           *         "inventory_options": {
           *           "consumable": null,
           *           "expiration_period": null
           *         },
           *         "vp_rewards": []
           *       },
           *       {
           *         "item_id": 259776,
           *         "sku": "ancient_helmet",
           *         "type": "virtual_good",
           *         "name": "Ancient helmet",
           *         "description": "Ancient helmet",
           *         "image_url": "https://cdn3.xsolla.com/img/misc/images/e70e16d9626f435e519fc8e1cc1e7176.png",
           *         "price": {
           *           "amount": "1.99",
           *           "amount_without_discount": "1.99",
           *           "currency": "USD"
           *         },
           *         "virtual_prices": [
           *           {
           *             "description": null,
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/e2e9ce8b00eb0190c161c4258b899101.png",
           *             "item_id": 259765,
           *             "sku": "gold",
           *             "name": "Gold",
           *             "type": "virtual_currency",
           *             "amount": 2,
           *             "amount_without_discount": 2,
           *             "calculated_price": {
           *               "amount": "2.00",
           *               "amount_without_discount": "2.00"
           *             },
           *             "is_default": true
           *           },
           *           {
           *             "description": null,
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/015e4f4ea4deb1e2c92d5c21a4d58309.png",
           *             "item_id": 259766,
           *             "sku": "silver",
           *             "name": "Silver",
           *             "type": "virtual_currency",
           *             "amount": 4,
           *             "amount_without_discount": 4,
           *             "calculated_price": {
           *               "amount": "4.00",
           *               "amount_without_discount": "4.00"
           *             },
           *             "is_default": false
           *           },
           *           {
           *             "description": null,
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/b0beedd5763b612bd3a5631e6cb1d1ff.png",
           *             "item_id": 259767,
           *             "sku": "bronze",
           *             "name": "Bronze",
           *             "type": "virtual_currency",
           *             "amount": 40,
           *             "amount_without_discount": 40,
           *             "calculated_price": {
           *               "amount": "40.00",
           *               "amount_without_discount": "40.00"
           *             },
           *             "is_default": false
           *           }
           *         ],
           *         "can_be_bought": true,
           *         "attributes": [],
           *         "is_free": false,
           *         "groups": [
           *           {
           *             "external_id": "armour",
           *             "name": "Armour"
           *           }
           *         ],
           *         "virtual_item_type": "non_consumable",
           *         "inventory_options": {
           *           "consumable": null,
           *           "expiration_period": null
           *         },
           *         "vp_rewards": []
           *       },
           *       {
           *         "item_id": 259777,
           *         "sku": "wooden_helmet",
           *         "type": "virtual_good",
           *         "name": "Wooden helmet",
           *         "description": "Wooden helmet",
           *         "image_url": "https://cdn3.xsolla.com/img/misc/images/40d2812e52ad9d988ac20fc842fc66f0.png",
           *         "price": {
           *           "amount": "0.99",
           *           "amount_without_discount": "0.99",
           *           "currency": "USD"
           *         },
           *         "virtual_prices": [
           *           {
           *             "description": null,
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/e2e9ce8b00eb0190c161c4258b899101.png",
           *             "item_id": 259765,
           *             "sku": "gold",
           *             "name": "Gold",
           *             "type": "virtual_currency",
           *             "amount": 1,
           *             "amount_without_discount": 1,
           *             "calculated_price": {
           *               "amount": "1.00",
           *               "amount_without_discount": "1.00"
           *             },
           *             "is_default": true
           *           },
           *           {
           *             "description": null,
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/015e4f4ea4deb1e2c92d5c21a4d58309.png",
           *             "item_id": 259766,
           *             "sku": "silver",
           *             "name": "Silver",
           *             "type": "virtual_currency",
           *             "amount": 2,
           *             "amount_without_discount": 2,
           *             "calculated_price": {
           *               "amount": "2.00",
           *               "amount_without_discount": "2.00"
           *             },
           *             "is_default": false
           *           },
           *           {
           *             "description": null,
           *             "image_url": "https://cdn3.xsolla.com/img/misc/images/b0beedd5763b612bd3a5631e6cb1d1ff.png",
           *             "item_id": 259767,
           *             "sku": "bronze",
           *             "name": "Bronze",
           *             "type": "virtual_currency",
           *             "amount": 20,
           *             "amount_without_discount": 20,
           *             "calculated_price": {
           *               "amount": "20.00",
           *               "amount_without_discount": "20.00"
           *             },
           *             "is_default": false
           *           }
           *         ],
           *         "can_be_bought": true,
           *         "attributes": [],
           *         "is_free": false,
           *         "groups": [
           *           {
           *             "external_id": "armour",
           *             "name": "Armour"
           *           }
           *         ],
           *         "virtual_item_type": "non_consumable",
           *         "inventory_options": {
           *           "consumable": null,
           *           "expiration_period": null
           *         },
           *         "vp_rewards": []
           *       }
           *     ] */
          items?: {
            /**
             * @description Internal unique item ID that is provided upon item creation.
             * @example 259774
             */
            item_id?: number
            /**
             * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
             * @example electric_shield
             */
            sku?: string
            /**
             * @description Item name.
             * @example Electric shield
             */
            name?: string
            /**
             * @description Groups the item belongs to.
             * @example [
             *       {
             *         "external_id": "armour",
             *         "name": "Armour"
             *       }
             *     ]
             */
            groups?: {
              /** @example accessory */
              external_id?: string
              /** @example Accessory */
              name?: string
            }[]
            attributes?: components['schemas']['Virtual-Items-Currency_client-attributes']
            /**
             * @description Type of item: `virtual_good`/`virtual_currency`/`bundle`/`game_key`/`physical_good`.
             * @example virtual_good
             * @enum {string}
             */
            type?: 'virtual_good' | 'virtual_currency' | 'bundle' | 'game_key' | 'physical_good'
            /**
             * @description Item description.
             * @example Electric shield
             */
            description?: string | null
            /**
             * @description Image URL.
             * @example https://cdn3.xsolla.com/img/misc/images/d2d6b1b517e6a7f3765c3bb5a3cfb87d.png
             */
            image_url?: string
            is_free?: components['schemas']['value-is_free']
            /** @description Item prices. */
            price?: {
              /**
               * @description Discounted item price.
               * @example 9.99
               */
              amount?: string
              /**
               * @description Item price.
               * @example 9.99
               */
              amount_without_discount?: string
              /**
               * @description Default purchase currency. Three-letter code per [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
               * @example USD
               */
              currency?: string
            }
            /** @description Virtual prices. */
            virtual_prices?: {
              /**
               * @description Discounted item price in virtual currency.
               * @example 10
               */
              amount?: number
              /**
               * @description Item price.
               * @example 10
               */
              amount_without_discount?: number
              /**
               * @description Virtual currency item SKU.
               * @example gold
               */
              sku?: string
              /**
               * @description Whether price is default for item.
               * @example true
               */
              is_default?: boolean
              /** @example https://cdn3.xsolla.com/img/misc/images/e2e9ce8b00eb0190c161c4258b899101.png */
              image_url?: string
              /**
               * @description Virtual currency name.
               * @example Gold
               */
              name?: string
              /**
               * @description Virtual currency type.
               * @example virtual_currency
               */
              type?: string
              /**
               * @description Virtual currency description.
               * @example null
               */
              description?: string | null
            }[]
            /** @description Defines the inventory item options. */
            inventory_options?: {
              /** @description Defines the consumable properties if this is a consumable item, or `null` if this is a non-consumable item. */
              consumable?: {
                /**
                 * @description Total number of remaining uses if this is a consumable item, or `null` if this is a non-consumable item.
                 * @example 1
                 */
                usages_count?: number | null
              } | null
              /** @description Defines the expiration properties if this is an expired item, or `null` if this is a non-expired item. */
              expiration_period?: {
                /**
                 * @description Defines type of expiration of an item.
                 * @example day
                 * @enum {string}
                 */
                type?: 'minute' | 'hour' | 'day' | 'week' | 'month' | 'year'
                /**
                 * @description Defines value for expiration period.
                 * @example 1
                 */
                value?: number
              } | null
            }
            /**
             * @description Type of virtual item.
             * @example non_consumable
             * @enum {string}
             */
            virtual_item_type?: 'consumable' | 'non_consumable' | 'non_renewing_subscription'
            promotions?: components['schemas']['Catalog_item_promotions']
            limits?: components['schemas']['Catalog_item_limits']
            custom_attributes?: components['schemas']['item-custom-attributes-response']
            vp_rewards?: components['schemas']['item-value-point-reward'][]
          }[]
        }
      }
    }
    /** @description List of regions was successfully received. */
    '200-admin-get-regions-list': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          regions?: components['schemas']['Regions_200-region-short-model'][]
        }
      }
    }
    /** @description Region was successfully created. */
    '201-admin-create-region': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          external_id?: components['schemas']['Regions_region_id']
        }
      }
    }
    /** @description Specified region was successfully received. */
    '200-admin-get-region': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['Regions_200-region-model']
      }
    }
    /** @description Region not found. Make sure the `id` is correct. */
    '404-region-not-found': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 404 */
          statusCode?: number
          /** @example 9701 */
          errorCode?: number
          /** @example [0401-9701]: Region not found */
          errorMessage?: string
          /** @example x-x-x-x-transactionId-mock-x-x-x */
          transactionId?: string
        }
      }
    }
    /** @description Region was successfully updated. */
    '204-admin-update-region': {
      headers: {
        [name: string]: unknown
      }
      content?: never
    }
    /** @description Region was successfully deleted. */
    '204-admin-delete-region': {
      headers: {
        [name: string]: unknown
      }
      content?: never
    }
    /** @description List of NFT items was successfully received. */
    'Nft-Items_200-admin-get-nft-items': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          items?: components['schemas']['Nft-Items_admin-nft-item'][]
        }
      }
    }
    /** @description Basic authentication not passed or wrong. Make sure you used basic authentication or correct credentials. */
    'Nft-Items_401-invalid-basic-auth': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 401 */
          statusCode?: number
          /** @example 1020 */
          errorCode?: number
          /** @example [0401-1020]: Error in Authentication method occurred */
          errorMessage?: string
        }
      }
    }
    /** @description NFT item was successfully created. */
    'Nft-Items_201-created': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example nft_item_1 */
          sku?: string
        }
      }
    }
    /** @description Invalid request. */
    'Nft-Items_422-invalid-request': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['Virtual-Items-Currency_422-invalid-request']
      }
    }
    /** @description Specified NFT was successfully received. */
    'Nft-Items_200-admin-get-item': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['Nft-Items_admin-nft-item']
      }
    }
    /** @description List of NFT items was successfully received. */
    'Nft-Items_200-get-items-list': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          has_more?: components['schemas']['Pagination_has-more']
          /** @example [
           *       {
           *         "sku": "nft_item_1",
           *         "name": "Big Rocket",
           *         "groups": [
           *           {
           *             "external_id": "accessory",
           *             "name": "Accessory"
           *           }
           *         ],
           *         "attributes": [
           *           {
           *             "external_id": "stack_size",
           *             "name": "Stack size",
           *             "values": [
           *               {
           *                 "external_id": "size_e3364991f92e751689a68b96598a5a5a84010b85",
           *                 "value": "5"
           *               }
           *             ]
           *           }
           *         ],
           *         "type": "nft",
           *         "description": "Big Rocket - description",
           *         "image_url": "https://popmedia.blob.core.windows.net/popyourself/male/outfit/male_armor_white_a-01.png",
           *         "is_free": false,
           *         "price": {
           *           "amount": "100.99",
           *           "amount_without_discount": "100.99",
           *           "currency": "USD"
           *         },
           *         "virtual_prices": [
           *           {
           *             "amount": 100,
           *             "sku": "vc_test",
           *             "is_default": true,
           *             "amount_without_discount": 100,
           *             "image_url": "http://image.png",
           *             "name": "SHOTGUN FOR TRUE RAIDERS",
           *             "type": "virtual_currency",
           *             "description": "description"
           *           }
           *         ],
           *         "is_minted": true,
           *         "blockchain": "blockchain_name_1",
           *         "token_id": "115792089237316195423570985008687907853269984665640564039457584007913129639930",
           *         "smart_contract_address": "t1qskq33nssskznn0118oh355qjigmkpn8vekye6mctcgstrtrkibj2v7cf3tyk4ls05bdxr8nha02",
           *         "cryptoaccount": "cryptoaccount_name_1",
           *         "is_sales_exist": false
           *       },
           *       {
           *         "sku": "nft_item_2",
           *         "name": "SHOTGUN FOR TRUE RAIDERS",
           *         "groups": [
           *           {
           *             "external_id": "hair",
           *             "name": "Hair"
           *           }
           *         ],
           *         "attributes": [
           *           {
           *             "external_id": "stack_size",
           *             "name": "Stack size",
           *             "values": [
           *               {
           *                 "external_id": "size_e3364991f92e751689a68b96598a5a5a84010b85",
           *                 "value": "5"
           *               }
           *             ]
           *           },
           *           {
           *             "external_id": "rating",
           *             "name": "Rating",
           *             "values": [
           *               {
           *                 "external_id": "rating_e3364991f92e751689a68b96598a5a5a84010b85",
           *                 "value": "3.9"
           *               }
           *             ]
           *           }
           *         ],
           *         "type": "nft",
           *         "description": "description",
           *         "image_url": "http://image.png",
           *         "is_free": false,
           *         "price": {
           *           "amount": "101.0",
           *           "amount_without_discount": "101.0",
           *           "currency": "USD"
           *         },
           *         "virtual_prices": [
           *           {
           *             "amount": 100,
           *             "sku": "vc_test",
           *             "is_default": true,
           *             "amount_without_discount": 100,
           *             "image_url": "http://image.png",
           *             "name": "SHOTGUN FOR TRUE RAIDERS",
           *             "type": "virtual_currency",
           *             "description": "description"
           *           },
           *           {
           *             "amount": 200,
           *             "sku": "vc_test_2",
           *             "is_default": false,
           *             "amount_without_discount": 200,
           *             "image_url": "http://image.png",
           *             "name": "SHOTGUN FOR TRUE RAIDERS",
           *             "type": "virtual_currency",
           *             "description": "description"
           *           }
           *         ],
           *         "is_minted": true,
           *         "blockchain": "blockchain_name_2",
           *         "token_id": "115792089237316195423570985008687907853269984665640564039457584007913129639931",
           *         "smart_contract_address": "t1qskq33nssskznn0118oh355qjigmkpn8vekye6mctcgstrtrkibj2v7cf3tyk4ls05bdxr8nha02",
           *         "cryptoaccount": "cryptoaccount_name_2",
           *         "is_sales_exist": false
           *       },
           *       {
           *         "sku": "nft_item_3",
           *         "name": "SHOTGUN FOR TRUE RAIDERS",
           *         "groups": [],
           *         "attributes": [],
           *         "type": "nft",
           *         "description": "description",
           *         "image_url": "http://image.png",
           *         "is_free": true,
           *         "price": null,
           *         "virtual_prices": [],
           *         "is_minted": true,
           *         "blockchain": "blockchain_name_3",
           *         "token_id": "115792089237316195423570985008687907853269984665640564039457584007913129639932",
           *         "smart_contract_address": "t1qskq33nssskznn0118oh355qjigmkpn8vekye6mctcgstrtrkibj2v7cf3tyk4ls05bdxr8nha02",
           *         "cryptoaccount": "cryptoaccount_name_3",
           *         "is_sales_exist": false
           *       }
           *     ] */
          items?: {
            /**
             * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
             * @example nft_item_1
             */
            sku?: string
            /**
             * @description Item name.
             * @example Big Rocket
             */
            name?: string
            /**
             * @description Groups the item belongs to.
             * @example [
             *       {
             *         "external_id": "accessory",
             *         "name": "Accessory"
             *       }
             *     ]
             */
            groups?: {
              /** @example accessory */
              external_id?: string
              /** @example Accessory */
              name?: string
            }[]
            attributes?: components['schemas']['Virtual-Items-Currency_client-attributes']
            /**
             * @description Type of item: `nft`.
             * @example nft
             */
            type?: string
            /**
             * @description Item description.
             * @example Big Rocket - description
             */
            description?: string
            /**
             * @description Image URL.
             * @example https://popmedia.blob.core.windows.net/popyourself/male/outfit/male_armor_white_a-01.png
             */
            image_url?: string
            is_free?: components['schemas']['value-is_free']
            /** @description Item prices. */
            price?: {
              /**
               * @description Discounted item price.
               * @example 100.99
               */
              amount?: string
              /**
               * @description Item price.
               * @example 100.99
               */
              amount_without_discount?: string
              /**
               * @description Default purchase currency. Three-letter code per [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
               * @example USD
               */
              currency?: string
            }
            /** @description Virtual prices. */
            virtual_prices?: {
              /**
               * @description Discounted item price in virtual currency.
               * @example 100
               */
              amount?: number
              /**
               * @description Item price.
               * @example 200
               */
              amount_without_discount?: number
              /**
               * @description Virtual currency item SKU.
               * @example vc_test
               */
              sku?: string
              /**
               * @description Whether price is default for item.
               * @example true
               */
              is_default?: boolean
              /**
               * @description Image of virtual currency.
               * @example http://image.png
               */
              image_url?: string
              /**
               * @description Virtual currency name.
               * @example SHOTGUN FOR TRUE RAIDERS
               */
              name?: string
              /**
               * @description Virtual currency type.
               * @example virtual_currency
               */
              type?: string
              /**
               * @description Virtual currency description.
               * @example Big Rocket - description
               */
              description?: string
            }[]
            can_be_bought?: components['schemas']['Can_be_bought']
            promotions?: components['schemas']['Catalog_item_promotions']
            limits?: components['schemas']['Catalog_item_limits']
            is_minted?: components['schemas']['Nft-Items_is_minted']
            blockchain?: components['schemas']['Nft-Items_blockchain']
            token_id?: components['schemas']['Nft-Items_token_id']
            smart_contract_address?: components['schemas']['Nft-Items_smart_contract_address']
            cryptoaccount?: components['schemas']['Nft-Items_cryptoaccount']
            is_sales_exist?: components['schemas']['Nft-Items_is_sales_exist']
          }[]
        }
      }
    }
    /** @description Purchase limits for a user were successfully received. */
    '200-admin-get-user-item-limits': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['User-limit-item']
      }
    }
    /** @description Promotion limits for a user were successfully received. */
    '200-admin-get-user-promotion-limits': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['User-limit-promotion']
      }
    }
    /** @description Successfully received promo code limits for a user. */
    '200-admin-get-user-promo-code-limits': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['User-limit-promo-code']
      }
    }
    /** @description Successfully received coupon limits for a user. */
    '200-admin-get-user-coupon-limits': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['User-limit-coupon']
      }
    }
    /** @description Successfully received promo code limits for a code. */
    '200-admin-get-code-promo-code-limits': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @description Promotion ID. Unique promotion identifier within the project. */
          promotion_id?: number
          items?: components['schemas']['Code-limit-promo-code'][]
          /** @description Total number of codes. */
          total_items_count?: number
          /** @description If another page with codes exists. */
          has_more?: boolean
        }
      }
    }
    /** @description Successfully received coupon limits for a code. */
    '200-admin-get-code-coupon-limits': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @description Promotion ID. Unique promotion identifier within the project. */
          promotion_id?: number
          items?: components['schemas']['Code-limit-promo-code'][]
          /** @description Total number of codes. */
          total_items_count?: number
          /** @description If another page with codes exists. */
          has_more?: boolean
        }
      }
    }
    /** @description The list of value points was successfully received. */
    '200-admin-get-value-points': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          items?: components['schemas']['Value-points-item-model'][]
        }
      }
    }
    /** @description Value point was successfully created. */
    '201-admin-create-value-point': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example new-sku */
          sku?: string
          /** @example 10 */
          item_id?: number
        }
      }
    }
    /** @description Invalid request. */
    '422-admin-create-invalid-request': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['422-invalid-request-2']
      }
    }
    /** @description The specified value point was successfully received. */
    '200-admin-get-value-point': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['Value-points-item-model']
      }
    }
    /** @description The list of items with the value point reward was successfully received. */
    '200-admin-get-list-value-point-rewards': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          items?: components['schemas']['item-value-point-reward-2'][]
        }
      }
    }
    /** @description The user’s reward chain was successfully retrieved. */
    '200-client-get-reward-chains-list': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /**
           * @description Used as an indicator that there are more pages.
           * @example true
           */
          has_more?: boolean
          /**
           * @description Total number of reward chains in the system.
           * @example 10
           */
          total_items_count?: Record<string, never>
          items?: components['schemas']['reward-chain-item-model'][]
        }
      }
    }
    /** @description The user’s value point balance was successfully retrieved. */
    '200-client-get-user-reward-chain-balance': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          sku?: components['schemas']['value-point-sku']
          name?: components['schemas']['value-point-name']
          image_url?: components['schemas']['Common_admin-image_url']
          description?: components['schemas']['value-point-description']
          long_description?: components['schemas']['value-point-long-description']
          /** @description Value point quantity. */
          amount?: number
        }
      }
    }
    /** @description Reward chain step not found. */
    '404-reward-chain-step-not-found': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 404 */
          statusCode?: number
          /** @example 9911 */
          errorCode?: number
          /** @example [0401-9911]: Reward chain step not found. */
          errorMessage?: string
        }
      }
    }
    /** @description Can't claim the step reward. */
    '422-reward-chain-step-reward-can-not-claimed': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 422 */
          statusCode?: number
          /** @example 9912 */
          errorCode?: number
          /** @example [0401-9912]: Can't claim the step reward. */
          errorMessage?: string
        }
      }
    }
    /** @description The list of reward chains was successfully received. */
    '200-admin-get-list-reward-chains': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          has_more?: components['schemas']['Pagination_has-more']
          items?: components['schemas']['get-reward-chain-item-basic-model'][]
        }
      }
    }
    /** @description Reward chain was successfully created. */
    '201-admin-create-reward-chain': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 10 */
          reward_chain_id?: number
        }
      }
    }
    /** @description The specified reward chain was successfully received. */
    '200-admin-get-reward-chain': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['get-reward-chain-item-full-model']
      }
    }
    /** @description Reward chain not found. */
    '404-admin-reward-chain-not-found': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 404 */
          statusCode?: number
          /** @example 4001 */
          errorCode?: number
          /** @example [0401-4001]: Reward chain not found */
          errorMessage?: string
        }
      }
    }
    /** @description Reward chain was successfully updated. */
    '204-admin-update-reward-chain': {
      headers: {
        [name: string]: unknown
      }
      content?: never
    }
    /** @description Reward chain was successfully deleted. */
    '204-admin-delete-reward-chain': {
      headers: {
        [name: string]: unknown
      }
      content?: never
    }
    /** @description The reward chain has been disabled/enabled. */
    '204-admin-toggle-reward-chain': {
      headers: {
        [name: string]: unknown
      }
      content?: never
    }
    /** @description The list of coupons was successfully received. */
    'Promotions_200-get-unique-catalog-offers': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          coupons?: components['schemas']['Promotions_200-get-unique-catalog-offer-promotion-model'][]
        }
      }
    }
    /** @description The list of codes for a unique catalog offer was successfully received. */
    'Promotions_200-unique-catalog-offer-code-list': {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          codes?: {
            code?: components['schemas']['Promotions_coupon_code']
          }[]
          /** @description Total number of unique catalog offer codes. */
          total_count?: number
        }
      }
    }
  }
  parameters: {
    /** @description Project ID. */
    'project_id-path-param': number
    /**
     * @description Limit for the number of elements on the page.
     * @example 50
     */
    'limit-query-param': number
    /**
     * @description Number of the element from which the list is generated (the count starts from 0).
     * @example 0
     */
    'offset-query-param': number
    /** @description Attribute external ID. */
    'external_id-attr-path-param': string
    /** @description Attribute value external ID. */
    'value_external_id-path-param': string
    /** @description Filter elements by `is_enabled` flag. */
    'is_enabled-query-param': number
    /** @description Rule ID. */
    'personalized-catalog-rule_id-path-param': number
    /** @description Unique case sensitive code. Contains letters and numbers. */
    'promo_code-query-param': string
    /** @description Group ID. */
    'group_id-path-param': number
    /** @description Group external ID. */
    'external_id-group-path-param': string
    /** @description Bundle SKU. */
    'sku-path-param': string
    /** @description Response language. Two-letter lowercase language code per ISO 639-1. */
    'locale-query-param': string
    /** @description The list of additional fields. These fields will be in the response if you send them in your request. */
    'additional_fields-query-param': ('media_list' | 'order' | 'long_description' | 'custom_attributes')[]
    /** @description Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Shows regional prices and restrictions for a catalog if those were specified while creating an item. <div class="note"><b>Note</b><br><br>If you do not specify the country explicitly, it will be set based on user's IP address.</div> */
    'country-query-param': string
    /** @description Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. */
    'show_inactive_time_limited_items-query-param': number
    /** @description Cart ID. */
    'cart_id-path-param': string
    /** @description The currency which prices are displayed in (USD  by default). Three-letter currency code per [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217). */
    'currency-query-param': string
    /** @description Item SKU. */
    'item_sku-path-param': string
    /** @description Order ID. */
    'order_id-path-param': string
    /**
     * @description User identifier can be transferred by using the Xsolla Login User JWT or the [Pay Station access token](https://developers.xsolla.com/pay-station-api/current/token/create-token).
     * @example ACCESS_TOKEN/LOGIN_JWT
     */
    'x-user-for-header': string
    /**
     * @description You can use your own user ID when selling a cart with games or physical goods.
     *
     * @example UNIQUE_ID
     */
    'x-user-id-header': string
    /** @description Merchant ID. */
    'merchant_id-path-param': number
    /** @description Item ID. */
    'item_id-path-param': string
    /** @description User email. */
    'user_email-query-param': string
    /** @description Codes quantity. */
    'quantity-query-param': number
    /** @description Reason receiving codes. */
    'reason-query-param': string
    /** @description Region ID. */
    'region_id-query-param': number
    /** @description What type of entitlements should be returned. If the parameter is set to 1, the entitlements received by the user in the sandbox mode only are returned. If the parameter isn't passed or is set to 0, the entitlements received by the user in the live mode only are returned. */
    'sandbox-query-param': number
    /** @description The list of additional fields. These fields will be in the response if you send them in your request. Available fields `attributes`. */
    'additional_fields-entitlement-query-param': string[]
    /** @description Filter elements by `is_enabled` flag. */
    'enabled-query-param': number
    /** @description Promotion ID. Unique promotion identifier within the project. */
    'promotion_id-path-param': number
    /** @description Unique case-sensitive code. Contains letters and numbers. */
    'code-path-param': string
    /** @description Unique case sensitive code. Contains letters and numbers. */
    'coupon_code-path-param': string
    /** @description Promotion external ID. Unique promotion identifier within the project. */
    'external_id-promotion-path-param': number
    /** @description Unique case sensitive code. Contains letters and numbers. */
    'promocode_code-path-param': string
    /** @description Virtual currency SKU. */
    'virtual_currency_sku-path-param': string
    /** @description Virtual currency package SKU. */
    'virtual_currency_package_sku-path-param': string
    /** @description Publishing platform the user plays on: `xsolla` (default), `playstation_network`, `xbox_live`, `pc_standalone`, `nintendo_shop`, `google_play`, `app_store_ios`, `android_standalone`, `ios_standalone`, `android_other`, `ios_other`, `pc_other`. */
    'platform-query-param':
      | 'playstation_network'
      | 'xbox_live'
      | 'xsolla'
      | 'pc_standalone'
      | 'nintendo_shop'
      | 'google_play'
      | 'app_store_ios'
      | 'android_standalone'
      | 'ios_standalone'
      | 'android_other'
      | 'ios_other'
      | 'pc_other'
    /** @description Project ID. */
    'project_id_59080-path-param': number
    /** @description Item ID. */
    'item_id_59080-path-param': string
    /** @description Item SKU. */
    'item_sku_59080-path-param': string
    /** @description Group external ID. */
    'external_id_59080-group-path-param': string
    /** @description Region ID. Unique region identifier within the project. */
    'region_id-path-param': number
    /** @description User external ID */
    'user_external_id-query-param': string
    /** @description Unique case-sensitive codes. Contain only letters and numbers. */
    'codes-query-param': string[]
    /** @description Reward chain ID. */
    'reward_chain_id-path-param': number
    /** @description Reward chain step ID. */
    'reward_chain_step_id-path-param': number
  }
  requestBodies: {
    'create-update-attribute': {
      content: {
        /** @example {
         *       "external_id": "genre",
         *       "name": {
         *         "en": "Genre",
         *         "de": "Genre"
         *       }
         *     } */
        'application/json': {
          external_id: components['schemas']['admin-attribute-external_id']
          name: components['schemas']['admin-attribute-name']
        }
      }
    }
    'create-update-attribute-value': {
      content: {
        /** @example {
         *       "external_id": "weapon_class_sword_value",
         *       "value": {
         *         "en": "Sword",
         *         "de": "Schwert"
         *       }
         *     } */
        'application/json': components['schemas']['request-attribute-value']
      }
    }
    'personalized-catalog_create-update-body': {
      content: {
        /** @example {
         *       "name": "Ork race armor rule",
         *       "is_enabled": true,
         *       "attribute_conditions": [
         *         {
         *           "attribute": "race",
         *           "operator": "eq",
         *           "value": "ork",
         *           "type": "string"
         *         }
         *       ],
         *       "items": [
         *         {
         *           "item_id": 1
         *         }
         *       ]
         *     } */
        'application/json': components['schemas']['user-attribute_personalized-catalog-body-required']
      }
    }
    /** @description Object with bundle data. */
    Bundles_bundle: {
      content: {
        /** @example {
         *       "sku": "armour_chest",
         *       "name": {
         *         "en-US": "Chest of armour",
         *         "de-DE": "Brustpanzer"
         *       },
         *       "is_enabled": true,
         *       "is_free": true,
         *       "order": 1,
         *       "long_description": {
         *         "en-US": "Chest of armour for soldiers",
         *         "de-DE": "Brustpanzer für Soldaten"
         *       },
         *       "description": {
         *         "en-US": "Chest of armour for soldiers",
         *         "de-DE": "Brustpanzer für Soldaten"
         *       },
         *       "image_url": "https://picture.bundle-with-many-stuff.png",
         *       "media_list": [
         *         {
         *           "type": "image",
         *           "url": "https://test.com/image0"
         *         },
         *         {
         *           "type": "image",
         *           "url": "https://test.com/image1"
         *         }
         *       ],
         *       "groups": [
         *         "chests"
         *       ],
         *       "attributes": {
         *         "attributes": [
         *           {
         *             "external_id": "class",
         *             "name": {
         *               "en-US": "Class"
         *             },
         *             "values": [
         *               {
         *                 "external_id": "soldier",
         *                 "value": {
         *                   "en-US": "Soldier"
         *                 }
         *               },
         *               {
         *                 "external_id": "officer",
         *                 "value": {
         *                   "en-US": "Officer"
         *                 }
         *               }
         *             ]
         *           }
         *         ]
         *       },
         *       "prices": [
         *         {
         *           "currency": "USD",
         *           "amount": 9.99,
         *           "is_default": true,
         *           "is_enabled": true
         *         },
         *         {
         *           "currency": "EUR",
         *           "amount": 9.99,
         *           "is_default": false,
         *           "is_enabled": true
         *         }
         *       ],
         *       "vc_prices": null,
         *       "content": [
         *         {
         *           "sku": "iron_gloves",
         *           "quantity": 1
         *         },
         *         {
         *           "sku": "iron_boots",
         *           "quantity": 1
         *         },
         *         {
         *           "sku": "iron_shield",
         *           "quantity": 1
         *         },
         *         {
         *           "sku": "iron_armour",
         *           "quantity": 1
         *         },
         *         {
         *           "sku": "iron_helmet",
         *           "quantity": 1
         *         }
         *       ],
         *       "limits": {
         *         "per_user": null,
         *         "per_item": null
         *       },
         *       "periods": [
         *         {
         *           "date_from": "2020-08-11T10:00:00+03:00",
         *           "date_until": "2020-08-11T20:00:00+03:00"
         *         }
         *       ],
         *       "custom_attributes": {
         *         "type": "lootbox",
         *         "purchased": 0
         *       }
         *     } */
        'application/json': components['schemas']['Bundles_admin_bundle_request']
      }
    }
    'Cart-Payment_fill-cart-json-model': {
      content: {
        'application/json': {
          /** @description List of items. */
          items: {
            /** @default booster_mega_1 */
            sku: string
            /** @default 123 */
            quantity: number
          }[]
        }
      }
    }
    'Cart-Payment_put-item-by-cart-idJsonModel': {
      content: {
        'application/json': {
          /**
           * @description Item quantity.
           * @default 123
           */
          quantity: number
        }
      }
    }
    'Cart-Payment_create-order-by-cart-idJsonModel': {
      content: {
        /** @example {
         *       "sandbox": true,
         *       "settings": {
         *         "ui": {
         *           "theme": "63295a9a2e47fab76f7708e1",
         *           "desktop": {
         *             "header": {
         *               "is_visible": true,
         *               "visible_logo": true,
         *               "visible_name": true,
         *               "visible_purchase": true,
         *               "type": "normal",
         *               "close_button": false
         *             }
         *           }
         *         }
         *       },
         *       "custom_parameters": {
         *         "character_id": "ingameUsername"
         *       }
         *     } */
        'application/json': {
          /** @description The currency which prices are displayed in (USD  by default). Three-letter currency code per [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217). */
          currency?: string
          /** @description Response language. */
          locale?: string
          /**
           * @description Creates an order in the sandbox mode. The option is available for those users who are specified in the list of company users.
           * @default false
           */
          sandbox: boolean
          /** @description Settings for configuring payment process and the payment UI for a user. */
          settings?: {
            ui?: components['schemas']['Cart-Payment_settings_ui']
            payment_method?: components['schemas']['Cart-Payment_settings_payment_method']
            return_url?: components['schemas']['Cart-Payment_settings_return_url']
            redirect_policy?: components['schemas']['Cart-Payment_redirect_policy']
          }
          /** @description Project specific parameters. */
          custom_parameters?: Record<string, never>
          /**
           * @description User shipping data.
           * @example {
           *       "country": "US",
           *       "first_name": "John",
           *       "last_name": "Doe",
           *       "state": "NY",
           *       "region": "NY",
           *       "city": "New York",
           *       "postal_code": "10001",
           *       "address1": "47 W 13th St",
           *       "address2": "",
           *       "address3": "",
           *       "comment": "Comment",
           *       "phone": "+1234567890",
           *       "email": "support@xsolla.com"
           *     }
           */
          shipping_data?: {
            country: string
            first_name: string
            last_name: string
            state: string
            region: string
            city: string
            postal_code: string
            address1: string
            address2: string
            address3: string
            comment?: string
            phone: string
            email?: string
          }
          /**
           * @description Selected shipping method. The format depends on the integrated delivery provider.
           * @example {
           *       "code": "fast",
           *       "delivery_service_name": "Fast service",
           *       "delivery_service_description": "Fast service description",
           *       "amount": 93.93,
           *       "currency": "USD",
           *       "delivery_date_min": "2018-11-29T15:32:48+00:00",
           *       "delivery_date_max": "2018-11-30T15:32:48+00:00"
           *     }
           */
          shipping_method?: {
            [key: string]: unknown
          }
        }
      }
    }
    'Cart-Payment_create-order-with-specified-item-idJsonModel': {
      content: {
        /** @example {
         *       "sandbox": true,
         *       "quantity": 5,
         *       "promo_code": "discount_code",
         *       "settings": {
         *         "ui": {
         *           "theme": "63295a9a2e47fab76f7708e1",
         *           "desktop": {
         *             "header": {
         *               "is_visible": true,
         *               "visible_logo": true,
         *               "visible_name": true,
         *               "visible_purchase": true,
         *               "type": "normal",
         *               "close_button": false
         *             }
         *           }
         *         }
         *       },
         *       "custom_parameters": {
         *         "character_id": "ingameUsername"
         *       }
         *     } */
        'application/json': {
          /** @description The currency which prices are displayed in (USD  by default). Three-letter currency code per [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217). */
          currency?: string
          /** @description Response language. */
          locale?: string
          /**
           * @description Creates an order in the sandbox mode. The option is available for those users who are specified in the list of company users.
           * @default false
           */
          sandbox: boolean
          /**
           * @description Item quantity.
           * @default 1
           */
          quantity: number
          /** @description Redeems a code of a promo code promotion with payment. */
          promo_code?: string
          /** @description Settings for configuring payment process and the payment UI for a user. */
          settings?: {
            ui?: components['schemas']['Cart-Payment_settings_ui']
            payment_method?: components['schemas']['Cart-Payment_settings_payment_method']
            return_url?: components['schemas']['Cart-Payment_settings_return_url']
            redirect_policy?: components['schemas']['Cart-Payment_redirect_policy']
          }
          /** @description Project specific parameters. */
          custom_parameters?: Record<string, never>
          /**
           * @description User shipping data.
           * @example {
           *       "country": "US",
           *       "first_name": "John",
           *       "last_name": "Doe",
           *       "state": "NY",
           *       "region": "NY",
           *       "city": "New York",
           *       "postal_code": "10001",
           *       "address1": "47 W 13th St",
           *       "address2": "",
           *       "address3": "",
           *       "comment": "Comment",
           *       "phone": "+1234567890",
           *       "email": "support@xsolla.com"
           *     }
           */
          shipping_data?: {
            country: string
            first_name: string
            last_name: string
            state: string
            region: string
            city: string
            postal_code: string
            address1: string
            address2: string
            address3: string
            comment?: string
            phone: string
            email?: string
          }
          /**
           * @description Selected shipping method. The format depends on the integrated delivery provider.
           * @example {
           *       "code": "fast",
           *       "delivery_service_name": "Fast service",
           *       "delivery_service_description": "Fast service description",
           *       "amount": 93.93,
           *       "currency": "USD",
           *       "delivery_date_min": "2018-11-29T15:32:48+00:00",
           *       "delivery_date_max": "2018-11-30T15:32:48+00:00"
           *     }
           */
          shipping_method?: {
            [key: string]: unknown
          }
        }
      }
    }
    'Cart-Payment_admin-create-payment-token': {
      content: {
        'application/json': {
          sandbox?: components['schemas']['Cart-Payment_settings_sandbox']
          user: components['schemas']['Cart-Payment_simple-checkout-user-request-body']
          purchase: components['schemas']['Cart_admin_payment']
          /** @description Settings for configuring payment process and the payment UI for a user. */
          settings?: {
            ui?: components['schemas']['Cart-Payment_settings_ui']
            currency?: components['schemas']['Cart-Payment_settings_currency']
            language?: components['schemas']['Cart-Payment_settings_locale']
            external_id?: components['schemas']['Cart-Payment_settings_external_id']
            payment_method?: components['schemas']['Cart-Payment_settings_payment_method']
            return_url?: components['schemas']['Cart-Payment_settings_return_url']
            redirect_policy?: components['schemas']['Cart-Payment_redirect_policy']
          }
          custom_parameters?: components['schemas']['Cart-Payment_custom_parameters']
        }
      }
    }
    'Cart-Payment_admin-fill-cart-json-model': {
      content: {
        'application/json': components['schemas']['Cart']
      }
    }
    /** @description Object with game data. */
    'Game-Keys_create-update-game-model': {
      content: {
        'application/json': {
          /**
           * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
           * @example game_1
           */
          sku: string
          name: components['schemas']['Game-Keys_admin-name-two-letter-locale']
          description?: components['schemas']['Game-Keys_admin-description-two-letter-locale']
          long_description?: components['schemas']['Game-Keys_admin-long-description-two-letter-locale']
          /**
           * @description Image URL.
           * @example https://image.example.com
           */
          image_url?: string
          /**
           * @description Game additional assets such as screenshots, gameplay video, etc.
           * @example [
           *       {
           *         "type": "image",
           *         "url": "https://cdn3.xsolla.com/img/misc/images/71ab1e12126f2103e1868076f0acb21a.jpg"
           *       }
           *     ]
           */
          media_list?: {
            /**
             * @description Type of media: `image`/`video`.
             * @example image
             * @enum {string}
             */
            type?: 'image' | 'video'
            /**
             * @description Resource file.
             * @example https://cdn3.xsolla.com/img/misc/images/71ab1e12126f2103e1868076f0acb21a.jpg
             */
            url?: string
          }[]
          /**
           * @description Game order priority in the list.
           * @example 1
           */
          order?: number
          /** @description Groups the item belongs to. */
          groups?: {
            /** @example horror */
            external_id: string
          }[]
          attributes?: components['schemas']['Game-Keys_admin-post-put-attributes']
          /** @description If disabled, item cannot be purchased and accessed through inventory. */
          is_enabled?: boolean
          /** @description Item is available for purchase. */
          is_show_in_store?: boolean
          /** @description Game keys for different DRMs. */
          unit_items: {
            /**
             * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
             * @example game_1
             */
            sku: string
            name?: components['schemas']['Game-Keys_admin-name-two-letter-locale']
            /** @description Groups the item belongs to. */
            groups?: {
              /** @example horror */
              external_id: string
            }[]
            attributes?: components['schemas']['Game-Keys_admin-attributes']
            is_free?: components['schemas']['value-is_free']
            /** @description Prices in real currencies. */
            prices: {
              /** @example 1299.99 */
              amount: number
              /**
               * @description Default purchase currency. Three-letter code per [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
               * @example RUB
               */
              currency: string
              /** @description Default price is used to build catalog if no price in user's currency is specified. */
              is_default: boolean
              is_enabled: boolean
            }[]
            vc_prices?: {
              /**
               * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
               * @example gold
               */
              sku?: string
              amount: number
              is_default: boolean
              is_enabled: boolean
            }[]
            /**
             * @description Game order priority in the list.
             * @example 1
             */
            order?: number
            /** @description If disabled, item cannot be purchased and accessed through inventory. */
            is_enabled?: boolean
            /** @description Item is available for purchase. */
            is_show_in_store?: boolean
            /**
             * @description DRM unique ID.
             * @example steam
             */
            drm_sku: string
            /** @description Pre-order settings. */
            pre_order?: {
              /** @description Game key release date in the ISO 8601 format. */
              release_date: string
              /** @description If disabled, the item is not a pre-order. */
              is_enabled: boolean
              /** @description Additional information for the pre-order, which will be emailed. */
              description?: string
            }
            regions?: components['schemas']['Game-Keys_regions']
            limits?: components['schemas']['item-limit']
            periods?: components['schemas']['item-periods']
          }[]
        }
      }
    }
    /** @description Object with physical good data. */
    'Physical-Items_create-update-physical-good-model': {
      content: {
        /** @example {
         *       "sku": "t-shirt",
         *       "name": {
         *         "en": "T-Shirt",
         *         "de": "T-Shirt"
         *       },
         *       "is_enabled": true,
         *       "is_free": false,
         *       "order": 1,
         *       "description": {
         *         "en": "Short Sleeve T-shirt",
         *         "de": "Kurzarm-T-Shirt"
         *       },
         *       "attributes": [
         *         {
         *           "external_id": "Color",
         *           "name": {
         *             "en": "Color"
         *           },
         *           "values": [
         *             {
         *               "external_id": "Color-black",
         *               "value": {
         *                 "en-US": "Black"
         *               }
         *             }
         *           ]
         *         }
         *       ],
         *       "prices": [
         *         {
         *           "amount": 20,
         *           "currency": "EUR",
         *           "is_enabled": true,
         *           "is_default": false
         *         },
         *         {
         *           "amount": 35,
         *           "currency": "USD",
         *           "is_enabled": true,
         *           "is_default": true
         *         }
         *       ],
         *       "tax_categories": [
         *         "PG00005"
         *       ],
         *       "limits": {
         *         "per_user": {
         *           "total": 5
         *         },
         *         "per_item": null
         *       }
         *     } */
        'application/json': {
          sku: string
          name?: components['schemas']['Physical-Items_admin-name-two-letter-locale']
          description?: components['schemas']['Physical-Items_admin-description-two-letter-locale']
          long_description?: components['schemas']['Physical-Items_admin-long-description-two-letter-locale']
          image_url?: string
          media_list?: string[]
          groups?: string[]
          attributes?: components['schemas']['Physical-Items_admin-post-put-attributes']
          prices?: components['schemas']['Physical-Items_admin-prices']
          vc_prices?: components['schemas']['Physical-Items_admin-create-vc_prices']
          is_enabled?: boolean
          is_deleted?: boolean
          is_free?: components['schemas']['value-is_free']
          order?: number
          tax_categories?: string[]
          pre_order?: components['schemas']['Physical-Items_admin-pre_order']
          regions?: components['schemas']['Physical-Items_admin-regions']
          /** @description Weight of the item. */
          weight?: {
            /**
             * @description Weight of the item in grams.
             * @example 874.5
             */
            grams?: string
            /**
             * @description Weight of the item in ounces.
             * @example 3
             */
            ounces?: string
          }
          limits?: components['schemas']['item-limit']
        }
      }
    }
    /** @description Object with physical good data. */
    'Physical-Items_patch-physical-good-model': {
      content: {
        'application/json': {
          sku?: string
          name?: components['schemas']['Physical-Items_admin-name-two-letter-locale']
          description?: components['schemas']['Physical-Items_admin-description-two-letter-locale']
          long_description?: components['schemas']['Physical-Items_admin-long-description-two-letter-locale']
          image_url?: string
          media_list?: string[]
          groups?: string[]
          attributes?: components['schemas']['Physical-Items_admin-post-put-attributes']
          prices?: components['schemas']['Physical-Items_admin-prices']
          vc_prices?: components['schemas']['Physical-Items_admin-create-vc_prices']
          is_enabled?: boolean
          is_deleted?: boolean
          is_free?: components['schemas']['value-is_free']
          order?: number
          tax_categories?: string[]
          pre_order?: components['schemas']['Physical-Items_admin-pre_order']
          regions?: components['schemas']['Physical-Items_admin-regions']
          /** @description Weight of the item. */
          weight?: {
            /**
             * @description Weight of the item in grams.
             * @example 874.5
             */
            grams?: string
            /**
             * @description Weight of the item in ounces.
             * @example 3
             */
            ounces?: string
          }
          limits?: components['schemas']['item-limit']
        }
      }
    }
    'Promotions_redeem-coupon-model': {
      content: {
        'application/json': {
          /**
           * @description Unique coupon code. Contains letters and numbers.
           * @default WINTER2021
           * @example WINTER2021
           */
          coupon_code: string
          selected_unit_items?: components['schemas']['Promotions_selected_unit_items']
        }
      }
    }
    'Promotions_coupon-create': {
      content: {
        'application/json': {
          external_id: components['schemas']['Promotions_coupon-external_id']
          date_start?: components['schemas']['Promotions_coupon_date_start']
          date_end?: components['schemas']['Promotions_coupon_date_end']
          name: components['schemas']['Promotions_coupon_name']
          bonus?: components['schemas']['Promotions_coupon_bonus']
          redeem_total_limit?: components['schemas']['Promotions_coupon-redeem_total_limit']
          redeem_user_limit?: components['schemas']['Promotions_coupon-redeem_user_limit']
          redeem_code_limit?: components['schemas']['Promotions_redeem_code_limit']
        }
      }
    }
    'Promotions_coupon-update': {
      content: {
        'application/json': {
          date_start?: components['schemas']['Promotions_coupon_date_start']
          date_end?: components['schemas']['Promotions_coupon_date_end']
          name: components['schemas']['Promotions_coupon_name']
          bonus?: components['schemas']['Promotions_coupon_bonus']
          redeem_total_limit?: components['schemas']['Promotions_coupon-redeem_total_limit']
          redeem_user_limit?: components['schemas']['Promotions_coupon-redeem_user_limit']
          redeem_code_limit?: components['schemas']['Promotions_redeem_code_limit']
        }
      }
    }
    'Promotions_create-coupon-promocode-code': {
      content: {
        'application/json': {
          coupon_code?: components['schemas']['Promotions_coupon_code']
        }
      }
    }
    'Promotions_redeem-promo-code-model': {
      content: {
        'application/json': {
          /**
           * @description Unique code of promo code. Contains letters and numbers.
           * @default SUMMER2021
           * @example SUMMER2021
           */
          coupon_code: string
          cart?: {
            /**
             * @description Cart ID.
             * @default current
             */
            id: string
          } | null
          selected_unit_items?: components['schemas']['Promotions_selected_unit_items']
        }
      }
    }
    'Promotions_cancel-promo-code-model': {
      content: {
        'application/json': {
          cart?: {
            /**
             * @description Cart ID.
             * @default current
             */
            id: string
          } | null
        }
      }
    }
    'Promotions_promocode-create': {
      content: {
        'application/json': {
          external_id: components['schemas']['Promotions_coupon-external_id']
          date_start?: components['schemas']['Promotions_coupon_date_start']
          date_end?: components['schemas']['Promotions_coupon_date_end']
          name: components['schemas']['Promotions_coupon_name']
          bonus?: components['schemas']['Promotions_coupon_bonus']
          redeem_total_limit?: components['schemas']['Promotions_coupon-redeem_total_limit']
          redeem_user_limit?: components['schemas']['Promotions_coupon-redeem_user_limit']
          redeem_code_limit?: components['schemas']['Promotions_redeem_code_limit']
          /** @example {
           *       "percent": "10.10"
           *     } */
          discount?: {
            percent?: components['schemas']['Promotions_promotion_discount_percent']
          } | null
          discounted_items?: components['schemas']['Promotions_discounted_items']
        }
      }
    }
    'Promotions_promocode-update': {
      content: {
        'application/json': {
          date_start?: components['schemas']['Promotions_coupon_date_start']
          date_end?: components['schemas']['Promotions_coupon_date_end']
          name: components['schemas']['Promotions_coupon_name']
          bonus?: components['schemas']['Promotions_coupon_bonus']
          redeem_total_limit?: components['schemas']['Promotions_coupon-redeem_total_limit']
          redeem_user_limit?: components['schemas']['Promotions_coupon-redeem_user_limit']
          redeem_code_limit?: components['schemas']['Promotions_redeem_code_limit']
          /** @example {
           *       "percent": "10.10"
           *     } */
          discount?: {
            percent?: components['schemas']['Promotions_promotion_discount_percent']
          } | null
          discounted_items?: components['schemas']['Promotions_discounted_items']
        }
      }
    }
    /** @description Object with promotion data. */
    'Promotions_create-update-item-promotion': {
      content: {
        'application/json': {
          /**
           * @description Name of promotion. Should contain key/value pairs,
           *     where key is locale with format "^[a-z]{2}-[A-Z]{2}$", value is string.
           *
           * @example {
           *       "en-US": "Promotion",
           *       "ru-RU": "Акция"
           *     }
           */
          name: {
            [key: string]: string | undefined
          }
          /**
           * Format: date-time
           * @description Date when your promotion will be started.
           * @default 2020-04-15T18:16:00+05:00
           */
          date_start: string | null
          /**
           * Format: date-time
           * @description Date when your promotion will be finished. Can be `null`.
           * @default 2020-04-15T18:16:00+05:00
           */
          date_end: string | null
          discount: {
            /**
             * @description Percent discount.
             *     The price of item will be decreased using a value calculated by using this percent and then rounded to 2 decimal places.
             * @default 10.00
             */
            percent: string
          } | null
          items: {
            /**
             * @description Item SKU.
             * @default elven_sword
             */
            sku: string
          }[]
          attribute_conditions?:
            | components['schemas']['user-attribute_conditions-string']
            | components['schemas']['user-attribute_conditions-date']
            | components['schemas']['user-attribute_conditions-number']
          limits?: components['schemas']['Promotions_promotion_limits']
        }
      }
    }
    'Promotions_create-update-bonus-promotion': {
      content: {
        'application/json': {
          /** @description Promotion ID. Unique promotion identifier within the project. */
          id?: number
          /**
           * Format: date-time
           * @description Date when your promotion will be started.
           * @default 2020-04-15T18:16:00+05:00
           */
          date_start: string | null
          /**
           * Format: date-time
           * @description Date when your promotion will be finished. Can be `null`. If `date_end` is `null`, promotion will be unlimited by time.
           * @default 2020-04-15T18:16:00+05:00
           */
          date_end: string | null
          /**
           * @description Name of promotion. Should contain key/value pairs where key is a locale with "^[a-z]{2}-[A-Z]{2}$" format, value is string.
           * @example {
           *       "en-US": "Summer season bonus",
           *       "de-DE": "Sommersaison Bonus"
           *     }
           */
          name: {
            [key: string]: string | undefined
          }
          /** @description Set of items required to be included in the purchase for applying a promotion. If this parameters is `null`, a promotion will be applied to any purchases within a project. */
          condition:
            | {
                /**
                 * @description Item SKU.
                 * @default elven_sword
                 */
                sku: string
              }[]
            | null
          attribute_conditions?:
            | components['schemas']['user-attribute_conditions-string']
            | components['schemas']['user-attribute_conditions-date']
            | components['schemas']['user-attribute_conditions-number']
          bonus:
            | {
                /**
                 * @description Item SKU.
                 * @default elven_shield
                 */
                sku: string
                /**
                 * @description Item quantity.
                 * @default 1
                 */
                quantity: number
              }[]
            | null
          limits?: components['schemas']['Promotions_promotion_limits']
        }
      }
    }
    'Virtual-Items-Currency_admin-create-virtual-item': {
      content: {
        /** @example {
         *       "sku": "sword",
         *       "name": {
         *         "en": "Sword",
         *         "de": "Schwert"
         *       },
         *       "is_enabled": true,
         *       "is_free": false,
         *       "order": 1,
         *       "description": {
         *         "en": "A sword is a bladed melee weapon intended for cutting or thrusting that is longer than a knife or dagger, consisting of a long blade attached to a hilt.",
         *         "de": "Ein Schwert ist eine Nahkampfwaffe mit Klinge, die zum Schneiden oder Stechen bestimmt ist, länger als ein Messer oder Dolch ist und aus einer langen Klinge besteht, die an einem Griff befestigt ist."
         *       },
         *       "prices": [
         *         {
         *           "amount": 100,
         *           "currency": "USD",
         *           "is_enabled": true,
         *           "is_default": true
         *         },
         *         {
         *           "amount": 200,
         *           "currency": "CZK",
         *           "country_iso": "CZ",
         *           "is_enabled": false,
         *           "is_default": true
         *         }
         *       ],
         *       "vc_prices": [],
         *       "is_show_in_store": true,
         *       "attributes": [
         *         {
         *           "external_id": "craft-materials",
         *           "name": {
         *             "en": "Craft materials"
         *           },
         *           "values": [
         *             {
         *               "external_id": "steel",
         *               "value": {
         *                 "en-US": "5"
         *               }
         *             },
         *             {
         *               "external_id": "leather",
         *               "value": {
         *                 "en-US": "1"
         *               }
         *             }
         *           ]
         *         }
         *       ],
         *       "limits": {
         *         "per_user": 5,
         *         "per_item": 100
         *       },
         *       "periods": [
         *         {
         *           "date_from": "2020-08-11T10:00:00+03:00",
         *           "date_until": "2020-08-11T20:00:00+03:00"
         *         }
         *       ],
         *       "custom_attributes": {
         *         "purchased": 0,
         *         "attr": "value"
         *       }
         *     } */
        'application/json': components['schemas']['Virtual-Items-Currency_admin-create-virtual-item']
      }
    }
    'Virtual-Items-Currency_admin-create-virtual-currency': {
      content: {
        /** @example {
         *       "sku": "coin",
         *       "name": {
         *         "en-US": "Gold coin",
         *         "de-DE": "Goldmünze"
         *       },
         *       "is_enabled": true,
         *       "is_free": false,
         *       "order": 1,
         *       "description": {
         *         "en-US": "The main currency of your kingdom",
         *         "de-DE": "Die Hauptwährung deines Königreichs"
         *       },
         *       "prices": [
         *         {
         *           "amount": 100,
         *           "currency": "USD",
         *           "is_enabled": true,
         *           "is_default": true
         *         }
         *       ],
         *       "attributes": [
         *         {
         *           "external_id": "material",
         *           "name": {
         *             "en-US": "Material"
         *           },
         *           "values": [
         *             {
         *               "external_id": "gold",
         *               "value": {
         *                 "en-US": "Gold"
         *               }
         *             }
         *           ]
         *         }
         *       ],
         *       "limits": {
         *         "per_user": 5,
         *         "per_item": 10000
         *       },
         *       "periods": [
         *         {
         *           "date_from": "2020-08-11T10:00:00+03:00",
         *           "date_until": "2020-08-11T20:00:00+03:00"
         *         }
         *       ],
         *       "custom_attributes": {
         *         "purchased": 0,
         *         "attr": "value"
         *       }
         *     } */
        'application/json': components['schemas']['Virtual-Items-Currency_admin-create-virtual-currency']
      }
    }
    'Virtual-Items-Currency_admin-create-virtual-currency-package': {
      content: {
        /** @example {
         *       "sku": "novigrad_crown_500",
         *       "name": {
         *         "en-US": "500x Novigradian crown",
         *         "ru-RU": "500x Новиградских крон"
         *       },
         *       "is_enabled": true,
         *       "is_free": false,
         *       "order": 1,
         *       "long_description": {
         *         "en-US": "Long Test new",
         *         "ru-RU": "Длинное описание"
         *       },
         *       "description": {
         *         "en-US": "The Crown (also known as the Novigradian crown) is a monetary unit which is used in some Northern Kingdoms",
         *         "ru-RU": "Крона (Также известна как Новиградская крона) - платежная единица, используемая в северных королевствах"
         *       },
         *       "image_url": "https://vignette.wikia.nocookie.net/witcher/images/7/7c/Items_Orens.png/revision/latest?cb=20081113120917",
         *       "media_list": [
         *         {
         *           "type": "image",
         *           "url": "https://test.com/image0"
         *         },
         *         {
         *           "type": "image",
         *           "url": "https://test.com/image1"
         *         }
         *       ],
         *       "groups": [
         *         "witcher"
         *       ],
         *       "attributes": [
         *         {
         *           "external_id": "event",
         *           "name": {
         *             "en-US": "Event"
         *           },
         *           "values": [
         *             {
         *               "external_id": "10-anniversary",
         *               "value": {
         *                 "en-US": "10th anniversary"
         *               }
         *             },
         *             {
         *               "external_id": "christmas",
         *               "value": {
         *                 "en-US": "Christmas"
         *               }
         *             }
         *           ]
         *         }
         *       ],
         *       "prices": [
         *         {
         *           "currency": "USD",
         *           "amount": 99.99,
         *           "is_default": true
         *         },
         *         {
         *           "currency": "EUR",
         *           "amount": 80.03,
         *           "is_enabled": false
         *         }
         *       ],
         *       "vc_prices": null,
         *       "content": [
         *         {
         *           "sku": "novigrad_crown",
         *           "quantity": 500
         *         }
         *       ],
         *       "limits": {
         *         "per_user": null,
         *         "per_item": null
         *       },
         *       "periods": [
         *         {
         *           "date_from": "2020-08-11T10:00:00+03:00",
         *           "date_until": "2020-08-11T20:00:00+03:00"
         *         }
         *       ],
         *       "custom_attributes": {
         *         "purchased": 0,
         *         "attr": "value"
         *       }
         *     } */
        'application/json': components['schemas']['Virtual-Items-Currency_admin-create-virtual-currency-package']
      }
    }
    'create-update-region': {
      content: {
        'application/json': {
          countries: components['schemas']['Regions_countries']
          name: components['schemas']['Regions_name']
        }
      }
    }
    'Nft-Items_admin-create-nft-item': {
      content: {
        /** @example {
         *       "sku": "nft_item_1",
         *       "name": {
         *         "en": "Sword",
         *         "de": "Schwert"
         *       },
         *       "is_enabled": true,
         *       "is_free": false,
         *       "order": 1,
         *       "description": {
         *         "en": "A sword is a bladed melee weapon intended for cutting or thrusting that is longer than a knife or dagger, consisting of a long blade attached to a hilt.",
         *         "de": "Ein Schwert ist eine Nahkampfwaffe mit Klinge, die zum Schneiden oder Stechen bestimmt ist, länger als ein Messer oder Dolch ist und aus einer langen Klinge besteht, die an einem Griff befestigt ist."
         *       },
         *       "prices": [
         *         {
         *           "amount": 100,
         *           "currency": "USD",
         *           "is_enabled": true,
         *           "is_default": true
         *         },
         *         {
         *           "amount": 200,
         *           "currency": "CZK",
         *           "country_iso": "CZ",
         *           "is_enabled": false,
         *           "is_default": true
         *         }
         *       ],
         *       "vc_prices": [],
         *       "is_show_in_store": true,
         *       "attributes": [
         *         {
         *           "external_id": "craft-materials",
         *           "name": {
         *             "en": "Craft materials"
         *           },
         *           "values": [
         *             {
         *               "external_id": "steel",
         *               "value": {
         *                 "en-US": "5"
         *               }
         *             },
         *             {
         *               "external_id": "leather",
         *               "value": {
         *                 "en-US": "1"
         *               }
         *             }
         *           ]
         *         }
         *       ],
         *       "limits": {
         *         "per_user": null,
         *         "per_item": 1
         *       },
         *       "is_minted": true,
         *       "blockchain": "blockchain_name",
         *       "token_id": "115792089237316195423570985008687907853269984665640564039457584007913129639934",
         *       "cryptoaccount": "cryptoaccount_name",
         *       "smart_contract_address": "t1qskq33nssskznn0118oh355qjigmkpn8vekye6mctcgstrtrkibj2v7cf3tyk4ls05bdxr8nha02"
         *     } */
        'application/json': components['schemas']['Nft-Items_admin-create-nft-item']
      }
    }
    'reset-user-limits': {
      content: {
        /** @example {
         *       "user": {
         *         "user_external_id": "d342dad2-9d59-11e9-a384-42010aa8003f"
         *       }
         *     } */
        'application/json': {
          user: components['schemas']['User-limit_user']
        }
      }
    }
    'reset-user-limits-flexible': {
      content: {
        /** @example {
         *       "user": {
         *         "user_external_id": "d342dad2-9d59-11e9-a384-42010aa8003f"
         *       }
         *     } */
        'application/json': {
          user: components['schemas']['User-limit_user_flexible']
        }
      }
    }
    'update-user-limits-flexible': {
      content: {
        /** @example {
         *       "user": {
         *         "user_external_id": "d342dad2-9d59-11e9-a384-42010aa8003f"
         *       },
         *       "available": 0
         *     } */
        'application/json': {
          user: components['schemas']['User-limit_user']
          available: components['schemas']['User-limit_available_flexible']
        }
      }
    }
    'update-user-limits-strict': {
      content: {
        /** @example {
         *       "user": {
         *         "user_external_id": "d342dad2-9d59-11e9-a384-42010aa8003f"
         *       },
         *       "available": 1
         *     } */
        'application/json': {
          user: components['schemas']['User-limit_user']
          available: components['schemas']['User-limit_available']
        }
      }
    }
    'update-promo-code-user-limits-flexible': {
      content: {
        /** @example {
         *       "user": {
         *         "user_external_id": "d342dad2-9d59-11e9-a384-42010aa8003f"
         *       },
         *       "available": 0
         *     } */
        'application/json': {
          user: components['schemas']['User-limit_user']
          available: components['schemas']['Promo-code-user-limit_available_flexible']
        }
      }
    }
    'update-promo-code-user-limits-strict': {
      content: {
        /** @example {
         *       "user": {
         *         "user_external_id": "d342dad2-9d59-11e9-a384-42010aa8003f"
         *       },
         *       "available": 1
         *     } */
        'application/json': {
          user: components['schemas']['User-limit_user']
          available: components['schemas']['Promo-code-user-limit_available']
        }
      }
    }
    'update-coupon-user-limits-flexible': {
      content: {
        /** @example {
         *       "user": {
         *         "user_external_id": "d342dad2-9d59-11e9-a384-42010aa8003f"
         *       },
         *       "available": 0
         *     } */
        'application/json': {
          user: components['schemas']['User-limit_user']
          available: components['schemas']['Coupon-user-limit_available_flexible']
        }
      }
    }
    'update-coupon-user-limits-strict': {
      content: {
        /** @example {
         *       "user": {
         *         "user_external_id": "d342dad2-9d59-11e9-a384-42010aa8003f"
         *       },
         *       "available": 1
         *     } */
        'application/json': {
          user: components['schemas']['User-limit_user']
          available: components['schemas']['Coupon-user-limit_available']
        }
      }
    }
    'create-value-point': {
      content: {
        /** @example {
         *       "sku": "reward_vp_1",
         *       "name": {
         *         "en": "Reward VP 1"
         *       },
         *       "is_enabled": true,
         *       "description": {
         *         "en": "Points for reward system"
         *       },
         *       "long_description": {
         *         "en": "Points given to users to get new rewards in a reward chain."
         *       },
         *       "image_url": "https://cdn.xsolla.net/img/misc/images/5c3b8b45c5be5fe7803e59fbc8041be4.png",
         *       "media_list": [],
         *       "order": 1
         *     } */
        'application/json': components['schemas']['admin_value_points-create']
      }
    }
    'set-item-value-point-reward': {
      content: {
        /** @example [
         *       {
         *         "sku": "booster_1",
         *         "amount": 100
         *       },
         *       {
         *         "sku": "booster_mega",
         *         "amount": 200
         *       }
         *     ] */
        'application/json': components['schemas']['item-value-point-reward-set']
      }
    }
    'create-reward-chain': {
      content: {
        /** @example {
         *       "name": {
         *         "en": "Reward chain"
         *       },
         *       "description": {
         *         "en": "Reward chain description"
         *       },
         *       "long_description": {
         *         "en": "Reward chain long description"
         *       },
         *       "is_enabled": true,
         *       "image_url": "https://cdn.xsolla.net/img/misc/images/5c3b8b45c5be5fe7803e59fbc8041be4.png",
         *       "order": 1,
         *       "date_start": "2020-04-15T18:16:00+05:00",
         *       "date_end": "2021-04-15T18:16:00+05:00",
         *       "value_point": {
         *         "sku": "value_point_sku"
         *       },
         *       "steps": [
         *         {
         *           "name": {
         *             "en": "First step of the reward chain"
         *           },
         *           "image_url": "https://cdn.xsolla.net/img/misc/images/5c3b8b45c5be5fe7803e59fbc8041be4.png",
         *           "reward": [
         *             {
         *               "sku": "item_sku_1",
         *               "quantity": 5
         *             },
         *             {
         *               "sku": "item_sku_2",
         *               "quantity": 1
         *             }
         *           ],
         *           "price": {
         *             "amount": 10
         *           }
         *         },
         *         {
         *           "name": {
         *             "en": "Second step of the reward chain"
         *           },
         *           "image_url": "https://cdn.xsolla.net/img/misc/images/5c3b8b45c5be5fe7803e59fbc8041be4.png",
         *           "reward": [
         *             {
         *               "sku": "item_sku_3",
         *               "quantity": 5
         *             },
         *             {
         *               "sku": "item_sku_4",
         *               "quantity": 1
         *             }
         *           ],
         *           "price": {
         *             "amount": 15
         *           }
         *         }
         *       ]
         *     } */
        'application/json': components['schemas']['create-reward-chain-model']
      }
    }
    'update-reward-chain': {
      content: {
        /** @example {
         *       "name": {
         *         "en": "Reward chain"
         *       },
         *       "description": {
         *         "en": "Reward chain description"
         *       },
         *       "long_description": {
         *         "en": "Reward chain long description"
         *       },
         *       "is_enabled": true,
         *       "image_url": "https://cdn.xsolla.net/img/misc/images/5c3b8b45c5be5fe7803e59fbc8041be4.png",
         *       "order": 1,
         *       "date_start": "2020-04-15T18:16:00+05:00",
         *       "date_end": "2021-04-15T18:16:00+05:00",
         *       "steps": [
         *         {
         *           "name": {
         *             "en": "First step of the reward chain"
         *           },
         *           "step_id": 1,
         *           "image_url": "https://cdn.xsolla.net/img/misc/images/5c3b8b45c5be5fe7803e59fbc8041be4.png",
         *           "reward": [
         *             {
         *               "sku": "item_sku_1",
         *               "quantity": 5
         *             },
         *             {
         *               "sku": "item_sku_2",
         *               "quantity": 1
         *             }
         *           ],
         *           "price": {
         *             "amount": 10
         *           }
         *         },
         *         {
         *           "name": {
         *             "en": "Second step of the reward chain"
         *           },
         *           "step_id": 2,
         *           "image_url": "https://cdn.xsolla.net/img/misc/images/5c3b8b45c5be5fe7803e59fbc8041be4.png",
         *           "reward": [
         *             {
         *               "sku": "item_sku_3",
         *               "quantity": 5
         *             },
         *             {
         *               "sku": "item_sku_4",
         *               "quantity": 1
         *             }
         *           ],
         *           "price": {
         *             "amount": 15
         *           }
         *         }
         *       ]
         *     } */
        'application/json': components['schemas']['update-reward-chain-model']
      }
    }
    'Promotions_unique_catalog_offer-create': {
      content: {
        'application/json': {
          external_id: components['schemas']['Promotions_coupon-external_id']
          date_start?: components['schemas']['Promotions_coupon_date_start']
          date_end?: components['schemas']['Promotions_coupon_date_end']
          name: components['schemas']['Promotions_coupon_name']
          items?: components['schemas']['Promotions_unique_catalog_offer_items']
          redeem_user_limit?: components['schemas']['Promotions_coupon-redeem_user_limit']
          redeem_code_limit?: components['schemas']['Promotions_redeem_code_limit']
          redeem_total_limit?: components['schemas']['Promotions_coupon-redeem_total_limit']
        }
      }
    }
    'Promotions_unique_catalog_offer-update': {
      content: {
        'application/json': {
          date_start?: components['schemas']['Promotions_coupon_date_start']
          date_end?: components['schemas']['Promotions_coupon_date_end']
          name: components['schemas']['Promotions_coupon_name']
          items?: components['schemas']['Promotions_unique_catalog_offer_items']
          redeem_total_limit?: components['schemas']['Promotions_coupon-redeem_total_limit']
          redeem_user_limit?: components['schemas']['Promotions_coupon-redeem_user_limit']
          redeem_code_limit?: components['schemas']['Promotions_redeem_code_limit']
        }
      }
    }
  }
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  'admin-get-attribute-list': {
    parameters: {
      query?: {
        /**
         * @description Limit for the number of elements on the page.
         * @example 50
         */
        limit?: components['parameters']['limit-query-param']
        /**
         * @description Number of the element from which the list is generated (the count starts from 0).
         * @example 0
         */
        offset?: components['parameters']['offset-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['200-admin-get-attribute-list-response']
      401: components['responses']['401-invalid-basic-auth']
    }
  }
  'admin-create-attribute': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['create-update-attribute']
    responses: {
      201: components['responses']['201-admin-create-attribute']
      401: components['responses']['401-invalid-basic-auth']
      422: components['responses']['422-validation-failed']
    }
  }
  'admin-get-attribute': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Attribute external ID. */
        external_id: components['parameters']['external_id-attr-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['200-admin-get-attribute']
      401: components['responses']['401-invalid-basic-auth']
      404: components['responses']['404-attribute-not-found']
    }
  }
  'admin-update-attribute': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Attribute external ID. */
        external_id: components['parameters']['external_id-attr-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['create-update-attribute']
    responses: {
      204: components['responses']['204-admin-update-attribute']
      401: components['responses']['401-invalid-basic-auth']
      422: components['responses']['422-validation-failed']
    }
  }
  'delete-attribute': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Attribute external ID. */
        external_id: components['parameters']['external_id-attr-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Attribute was successfully deleted. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['401-invalid-basic-auth']
    }
  }
  'admin-create-attribute-value': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Attribute external ID. */
        external_id: components['parameters']['external_id-attr-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['create-update-attribute-value']
    responses: {
      201: components['responses']['201-admin-create-attribute-value']
      401: components['responses']['401-invalid-basic-auth']
      403: components['responses']['403-auth-header-not-sent']
      404: components['responses']['404-attribute-not-found']
      422: components['responses']['422-create-update-attribute-value']
    }
  }
  'admin-delete-all-attribute-value': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Attribute external ID. */
        external_id: components['parameters']['external_id-attr-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Attribute values was successfully deleted. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['401-invalid-basic-auth']
      403: components['responses']['403-auth-header-not-sent']
    }
  }
  'admin-update-attribute-value': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Attribute value external ID. */
        value_external_id: components['parameters']['value_external_id-path-param']
        /** @description Attribute external ID. */
        external_id: components['parameters']['external_id-attr-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['create-update-attribute-value']
    responses: {
      /** @description Attribute value was successfully updated. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['401-invalid-basic-auth']
      403: components['responses']['403-auth-header-not-sent']
      404: components['responses']['404-attribute-value-not-found']
      422: components['responses']['422-create-update-attribute-value']
    }
  }
  'admin-delete-attribute-value': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Attribute value external ID. */
        value_external_id: components['parameters']['value_external_id-path-param']
        /** @description Attribute external ID. */
        external_id: components['parameters']['external_id-attr-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Attribute value was successfully deleted. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['401-invalid-basic-auth']
      403: components['responses']['403-auth-header-not-sent']
    }
  }
  'get-filter-rules': {
    parameters: {
      query?: {
        /**
         * @description Limit for the number of elements on the page.
         * @example 50
         */
        limit?: components['parameters']['limit-query-param']
        /**
         * @description Number of the element from which the list is generated (the count starts from 0).
         * @example 0
         */
        offset?: components['parameters']['offset-query-param']
        /** @description Filter elements by `is_enabled` flag. */
        is_enabled?: components['parameters']['is_enabled-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Rules were successfully received. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            items?: components['schemas']['user-attribute_personalized-catalog'][]
            /** @description Total number of rules. */
            total_items_count?: number
            /** @description If another page with rules exists. */
            has_more?: boolean
          }
        }
      }
      401: components['responses']['Common_401-complex']
      403: components['responses']['403-auth-header-not-sent']
    }
  }
  'create-filter-rule': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['personalized-catalog_create-update-body']
    responses: {
      /** @description Rule was successfully created. */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Rule ID. */
            rule_id?: number
          }
        }
      }
      401: components['responses']['Common_401-complex']
      422: components['responses']['Common_422-body-validation']
    }
  }
  'get-all-filter-rules': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Rules were successfully received. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            items?: components['schemas']['user-attribute_personalized-catalog_all'][]
          }
        }
      }
      401: components['responses']['Common_401-complex']
      403: components['responses']['403-auth-header-not-sent']
    }
  }
  'get-filter-rule-by-id': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Rule ID. */
        rule_id: components['parameters']['personalized-catalog-rule_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Rule was successfuly recieved. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['user-attribute_personalized-catalog']
        }
      }
      401: components['responses']['Common_401-complex']
    }
  }
  'update-filter-rule-by-id': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Rule ID. */
        rule_id: components['parameters']['personalized-catalog-rule_id-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['personalized-catalog_create-update-body']
    responses: {
      /** @description Successful update. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['Common_401-complex']
      422: components['responses']['Common_422-body-validation']
    }
  }
  'delete-filter-rule-by-id': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Rule ID. */
        rule_id: components['parameters']['personalized-catalog-rule_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Delete was successful. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['Common_401-complex']
    }
  }
  'patch-filter-rule-by-id': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Rule ID. */
        rule_id: components['parameters']['personalized-catalog-rule_id-path-param']
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        /** @example {
         *       "is_enabled": false
         *     } */
        'application/json': components['schemas']['user-attribute_personalized-catalog-body']
      }
    }
    responses: {
      /** @description Update was successful. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['Common_401-complex']
      422: components['responses']['Common_422-body-validation']
    }
  }
  'admin-get-bundle-list': {
    parameters: {
      query?: {
        /**
         * @description Limit for the number of elements on the page.
         * @example 50
         */
        limit?: components['parameters']['limit-query-param']
        /**
         * @description Number of the element from which the list is generated (the count starts from 0).
         * @example 0
         */
        offset?: components['parameters']['offset-query-param']
        /** @description Unique case sensitive code. Contains letters and numbers. */
        promo_code?: components['parameters']['promo_code-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Bundles_200-admin-get-bundle-list']
      401: components['responses']['Bundles_401-invalid-basic-auth']
    }
  }
  'admin-create-bundle': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody: components['requestBodies']['Bundles_bundle']
    responses: {
      201: components['responses']['Bundles_201-admin-create-bundle']
      401: components['responses']['Bundles_401-invalid-basic-auth']
      422: components['responses']['Bundles_422-invalid-request']
    }
  }
  'admin-get-bundle-list-in-group-by-id': {
    parameters: {
      query?: {
        /**
         * @description Limit for the number of elements on the page.
         * @example 50
         */
        limit?: components['parameters']['limit-query-param']
        /**
         * @description Number of the element from which the list is generated (the count starts from 0).
         * @example 0
         */
        offset?: components['parameters']['offset-query-param']
        /** @description Unique case sensitive code. Contains letters and numbers. */
        promo_code?: components['parameters']['promo_code-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Group ID. */
        group_id: components['parameters']['group_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Bundles_200-admin-get-bundle-list-in-group']
      401: components['responses']['Bundles_401-invalid-basic-auth']
    }
  }
  'admin-get-bundle-list-in-group-by-external-id': {
    parameters: {
      query?: {
        /**
         * @description Limit for the number of elements on the page.
         * @example 50
         */
        limit?: components['parameters']['limit-query-param']
        /**
         * @description Number of the element from which the list is generated (the count starts from 0).
         * @example 0
         */
        offset?: components['parameters']['offset-query-param']
        /** @description Unique case sensitive code. Contains letters and numbers. */
        promo_code?: components['parameters']['promo_code-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Group external ID. */
        external_id: components['parameters']['external_id-group-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Bundles_200-admin-get-bundle-list-in-group']
      401: components['responses']['Bundles_401-invalid-basic-auth']
    }
  }
  'admin-get-bundle': {
    parameters: {
      query?: {
        /** @description Unique case sensitive code. Contains letters and numbers. */
        promo_code?: components['parameters']['promo_code-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Bundle SKU. */
        sku: components['parameters']['sku-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Bundles_200-admin-get-bundle']
      401: components['responses']['Bundles_401-invalid-basic-auth']
    }
  }
  'admin-update-bundle': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Bundle SKU. */
        sku: components['parameters']['sku-path-param']
      }
      cookie?: never
    }
    requestBody: components['requestBodies']['Bundles_bundle']
    responses: {
      204: components['responses']['Bundles_204-admin-update-bundle']
      401: components['responses']['Bundles_401-invalid-basic-auth']
      422: components['responses']['Bundles_422-invalid-request']
    }
  }
  'admin-delete-bundle': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Bundle SKU. */
        sku: components['parameters']['sku-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      204: components['responses']['Bundles_204-admin-delete-bundle']
      401: components['responses']['Bundles_401-invalid-basic-auth']
    }
  }
  'admin-show-bundle': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Bundle SKU. */
        sku: components['parameters']['sku-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      204: components['responses']['Bundles_204-admin-show-bundle']
      401: components['responses']['Bundles_401-invalid-basic-auth']
    }
  }
  'admin-hide-bundle': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Bundle SKU. */
        sku: components['parameters']['sku-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      204: components['responses']['Bundles_204-admin-hide-bundle']
      401: components['responses']['Bundles_401-invalid-basic-auth']
    }
  }
  'get-bundle-list': {
    parameters: {
      query?: {
        /**
         * @description Limit for the number of elements on the page.
         * @example 50
         */
        limit?: components['parameters']['limit-query-param']
        /**
         * @description Number of the element from which the list is generated (the count starts from 0).
         * @example 0
         */
        offset?: components['parameters']['offset-query-param']
        /** @description Response language. Two-letter lowercase language code per ISO 639-1. */
        locale?: components['parameters']['locale-query-param']
        /** @description The list of additional fields. These fields will be in the response if you send them in your request. */
        'additional_fields[]'?: components['parameters']['additional_fields-query-param']
        /** @description Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Shows regional prices and restrictions for a catalog if those were specified while creating an item. <div class="note"><b>Note</b><br><br>If you do not specify the country explicitly, it will be set based on user's IP address.</div> */
        country?: components['parameters']['country-query-param']
        /** @description Unique case sensitive code. Contains letters and numbers. */
        promo_code?: components['parameters']['promo_code-query-param']
        /** @description Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. */
        show_inactive_time_limited_items?: components['parameters']['show_inactive_time_limited_items-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Bundles_200-get-bundle-list']
    }
  }
  'get-bundle': {
    parameters: {
      query?: {
        /** @description Unique case sensitive code. Contains letters and numbers. */
        promo_code?: components['parameters']['promo_code-query-param']
        /** @description Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. */
        show_inactive_time_limited_items?: components['parameters']['show_inactive_time_limited_items-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Bundle SKU. */
        sku: components['parameters']['sku-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The specified bundle was successfully received. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Bundles_client_bundle']
        }
      }
    }
  }
  'get-bundle-list-in-group': {
    parameters: {
      query?: {
        /**
         * @description Limit for the number of elements on the page.
         * @example 50
         */
        limit?: components['parameters']['limit-query-param']
        /**
         * @description Number of the element from which the list is generated (the count starts from 0).
         * @example 0
         */
        offset?: components['parameters']['offset-query-param']
        /** @description Response language. Two-letter lowercase language code per ISO 639-1. */
        locale?: components['parameters']['locale-query-param']
        /** @description The list of additional fields. These fields will be in the response if you send them in your request. */
        'additional_fields[]'?: components['parameters']['additional_fields-query-param']
        /** @description Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Shows regional prices and restrictions for a catalog if those were specified while creating an item. <div class="note"><b>Note</b><br><br>If you do not specify the country explicitly, it will be set based on user's IP address.</div> */
        country?: components['parameters']['country-query-param']
        /** @description Unique case sensitive code. Contains letters and numbers. */
        promo_code?: components['parameters']['promo_code-query-param']
        /** @description Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. */
        show_inactive_time_limited_items?: components['parameters']['show_inactive_time_limited_items-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Group external ID. */
        external_id: components['parameters']['external_id-group-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Bundles_200-get-bundle-list']
    }
  }
  'get-cart-by-id': {
    parameters: {
      query?: {
        /** @description The currency which prices are displayed in (USD  by default). Three-letter currency code per [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217). */
        currency?: components['parameters']['currency-query-param']
        /** @description Response language. Two-letter lowercase language code per ISO 639-1. */
        locale?: components['parameters']['locale-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Cart ID. */
        cart_id: components['parameters']['cart_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Cart-Payment_200-get-cart-json-model']
    }
  }
  'get-user-cart': {
    parameters: {
      query?: {
        /** @description The currency which prices are displayed in (USD  by default). Three-letter currency code per [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217). */
        currency?: components['parameters']['currency-query-param']
        /** @description Response language. Two-letter lowercase language code per ISO 639-1. */
        locale?: components['parameters']['locale-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Cart-Payment_200-get-cart-json-model']
    }
  }
  'cart-clear-by-id': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Cart ID. */
        cart_id: components['parameters']['cart_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The cart was successfully cleared. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'cart-clear': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The cart was successfully cleared. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'cart-fill': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['Cart-Payment_fill-cart-json-model']
    responses: {
      200: components['responses']['Cart-Payment_200-fill-cart-json-model']
    }
  }
  'cart-fill-by-id': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Cart ID. */
        cart_id: components['parameters']['cart_id-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['Cart-Payment_fill-cart-json-model']
    responses: {
      200: components['responses']['Cart-Payment_200-fill-cart-json-model']
    }
  }
  'put-item-by-cart-id': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Cart ID. */
        cart_id: components['parameters']['cart_id-path-param']
        /** @description Item SKU. */
        item_sku: components['parameters']['item_sku-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['Cart-Payment_put-item-by-cart-idJsonModel']
    responses: {
      /** @description The cart was successfully updated. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      404: components['responses']['Cart-Payment_404-item']
      422: components['responses']['Cart-Payment_422-non-negative-quantity']
    }
  }
  'delete-item-by-cart-id': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Cart ID. */
        cart_id: components['parameters']['cart_id-path-param']
        /** @description Item SKU. */
        item_sku: components['parameters']['item_sku-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The item from the cart was successfully deleted. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      404: components['responses']['Cart-Payment_404-item']
    }
  }
  'put-item': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: components['parameters']['item_sku-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['Cart-Payment_put-item-by-cart-idJsonModel']
    responses: {
      /** @description The cart was successfully updated. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      404: components['responses']['Cart-Payment_404-item']
      422: components['responses']['Cart-Payment_422-can-put-only-virtual-good-to-cart']
    }
  }
  'delete-item': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: components['parameters']['item_sku-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The item from the cart was successfully deleted. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      404: components['responses']['Cart-Payment_404-item']
    }
  }
  'create-order-by-cart-id': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Cart ID. */
        cart_id: components['parameters']['cart_id-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['Cart-Payment_create-order-by-cart-idJsonModel']
    responses: {
      200: components['responses']['Cart-Payment_200-order-created']
      422: components['responses']['Cart-Payment_422-invalid-cart']
    }
  }
  'create-order': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['Cart-Payment_create-order-by-cart-idJsonModel']
    responses: {
      200: components['responses']['Cart-Payment_200-order-created']
      422: components['responses']['Cart-Payment_422-invalid-cart']
    }
  }
  'create-order-with-item': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: components['parameters']['item_sku-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['Cart-Payment_create-order-with-specified-item-idJsonModel']
    responses: {
      200: components['responses']['Cart-Payment_200-order-created']
      404: components['responses']['Cart-Payment_404-create-order-with-item-not-found-errors']
      422: components['responses']['Cart-Payment_422-create-order-with-item-invalid']
    }
  }
  'create-free-order': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['Cart-Payment_create-order-by-cart-idJsonModel']
    responses: {
      200: components['responses']['Cart-Free_200-order-created']
      422: components['responses']['Cart-Payment_422-invalid-cart']
    }
  }
  'create-free-order-by-cart-id': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Cart ID. */
        cart_id: components['parameters']['cart_id-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['Cart-Payment_create-order-by-cart-idJsonModel']
    responses: {
      200: components['responses']['Cart-Free_200-order-created']
      422: components['responses']['Cart-Payment_422-invalid-cart']
    }
  }
  'create-free-order-with-item': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: components['parameters']['item_sku-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['Cart-Payment_create-order-with-specified-item-idJsonModel']
    responses: {
      200: components['responses']['Cart-Free_200-order-created']
      422: components['responses']['Cart-Payment_422-invalid-item']
    }
  }
  'get-order': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Order ID. */
        order_id: components['parameters']['order_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Cart-Payment_200-get-order']
      404: components['responses']['Cart-Payment_404-get-order']
    }
  }
  'admin-create-payment-token': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['Cart-Payment_admin-create-payment-token']
    responses: {
      200: components['responses']['Cart-Payment_200-admin-create-payment-token']
      401: components['responses']['Cart-Payment_401-invalid-basic-auth']
      422: components['responses']['Cart-Payment_422-admin-create-payment-token']
    }
  }
  'admin-cart-fill': {
    parameters: {
      query?: {
        /** @description Response language. Two-letter lowercase language code per ISO 639-1. */
        locale?: components['parameters']['locale-query-param']
      }
      header?: {
        /**
         * @description User identifier can be transferred by using the Xsolla Login User JWT or the [Pay Station access token](https://developers.xsolla.com/pay-station-api/current/token/create-token).
         * @example ACCESS_TOKEN/LOGIN_JWT
         */
        'x-user-for'?: components['parameters']['x-user-for-header']
        /**
         * @description You can use your own user ID when selling a cart with games or physical goods.
         *
         * @example UNIQUE_ID
         */
        'x-user-id'?: components['parameters']['x-user-id-header']
      }
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['Cart-Payment_admin-fill-cart-json-model']
    responses: {
      200: components['responses']['Cart-Payment_200-admin-fill-cart-json-model']
      401: components['responses']['Cart-Payment_401-invalid-basic-auth']
      404: components['responses']['Cart-Payment_404-user']
      422: components['responses']['Cart-Payment_422-invalid-cart']
    }
  }
  'admin-fill-cart-by-id': {
    parameters: {
      query?: {
        /** @description Response language. Two-letter lowercase language code per ISO 639-1. */
        locale?: components['parameters']['locale-query-param']
      }
      header?: {
        /**
         * @description User identifier can be transferred by using the Xsolla Login User JWT or the [Pay Station access token](https://developers.xsolla.com/pay-station-api/current/token/create-token).
         * @example ACCESS_TOKEN/LOGIN_JWT
         */
        'x-user-for'?: components['parameters']['x-user-for-header']
        /**
         * @description You can use your own user ID when selling a cart with games or physical goods.
         *
         * @example UNIQUE_ID
         */
        'x-user-id'?: components['parameters']['x-user-id-header']
      }
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Cart ID. */
        cart_id: components['parameters']['cart_id-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['Cart-Payment_admin-fill-cart-json-model']
    responses: {
      200: components['responses']['Cart-Payment_200-admin-fill-cart-json-model']
      401: components['responses']['Cart-Payment_401-invalid-basic-auth']
      404: components['responses']['Cart-Payment_404-user']
      422: components['responses']['Cart-Payment_422-invalid-cart']
    }
  }
  'get-webhook': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Information about webhook settings was successfully received. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @example http://site.ru/webhook */
            url?: string
            /** @example my_secret */
            secret?: string
            /** @example true */
            is_enabled?: boolean
          }
        }
      }
      401: components['responses']['Common_401-invalid-basic-auth']
      /** @description Information about webhook settings with passed `project_id` does not exists. Make sure you used correct `project_id` or created webhook earlier. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'update-webhook': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    /** @description Information about webhook settings. */
    requestBody: {
      content: {
        'application/json': {
          /** @example http://site.ru/webhook */
          url: string
          /** @example my_secret */
          secret: string
          /** @example true */
          is_enabled: boolean
        }
      }
    }
    responses: {
      /** @description Information about webhook settings was successfully updated. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['Common_401-invalid-basic-auth']
      /** @description Information about webhook settings with passed `project_id` does not exists. Make sure you used correct `project_id` or created webhook earlier. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Information about webhook settings contains empty URL. */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'get-pre-order-limit': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: components['parameters']['item_sku-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Information about the item pre-order limit was successfully received. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @example 1 */
            item_id?: number
            /** @example xsollus */
            sku?: string
            /** @example true */
            is_pre_order_limit_enabled?: boolean
            /** @example 431 */
            available?: number
            /** @example 13 */
            reserved?: number
            /** @example 556 */
            sold?: number
          }
        }
      }
      401: components['responses']['Common_401-invalid-basic-auth']
      /** @description Item not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'set-pre-order-limit': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: components['parameters']['item_sku-path-param']
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        /** @example {
         *       "quantity": 100000
         *     } */
        'application/json': {
          /** @description Quantity to set. */
          quantity: number
        }
      }
    }
    responses: {
      /** @description The quantity to limit was successfully set. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['Common_401-invalid-basic-auth']
      /** @description Item not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'add-pre-order-limit': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: components['parameters']['item_sku-path-param']
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        /** @example {
         *       "quantity": 100000
         *     } */
        'application/json': {
          /** @description Quantity to add. */
          quantity: number
        }
      }
    }
    responses: {
      /** @description The quantity to limit was successfully added. */
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['Common_401-invalid-basic-auth']
      /** @description Item not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'remove-pre-order-limit': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: components['parameters']['item_sku-path-param']
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        /** @example {
         *       "quantity": 100000
         *     } */
        'application/json': {
          /** @description Quantity to remove. */
          quantity: number
        }
      }
    }
    responses: {
      /** @description The quantity to limit was successfully removed. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['Common_401-invalid-basic-auth']
      /** @description Item not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'toggle-pre-order-limit': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: components['parameters']['item_sku-path-param']
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        /** @example {
         *       "is_pre_order_limit_enabled": true
         *     } */
        'application/json': {
          is_pre_order_limit_enabled: number
        }
      }
    }
    responses: {
      /** @description The limit has been disabled/enabled. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['Common_401-invalid-basic-auth']
      /** @description Item not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'remove-all-pre-order-limit': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: components['parameters']['item_sku-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The limit was successfully removed. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['Common_401-invalid-basic-auth']
      /** @description Item not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'get-projects': {
    parameters: {
      query?: {
        /**
         * @description Limit for the number of elements on the page.
         * @example 50
         */
        limit?: components['parameters']['limit-query-param']
        /**
         * @description Number of the element from which the list is generated (the count starts from 0).
         * @example 0
         */
        offset?: components['parameters']['offset-query-param']
      }
      header?: never
      path: {
        /** @description Merchant ID. */
        merchant_id: components['parameters']['merchant_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Information about projects was successfully received. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @example 3 */
            total_items_count?: number
            /** @example true */
            has_more?: boolean
            items?: unknown[]
          }
        }
      }
      /** @description Basic authentication not passed or wrong. Make sure you used basic authentication or correct credentials. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid `limit` or `offset` query parameters. */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'get-games-list': {
    parameters: {
      query?: {
        /**
         * @description Limit for the number of elements on the page.
         * @example 50
         */
        limit?: components['parameters']['limit-query-param']
        /**
         * @description Number of the element from which the list is generated (the count starts from 0).
         * @example 0
         */
        offset?: components['parameters']['offset-query-param']
        /** @description Response language. Two-letter lowercase language code per ISO 639-1. */
        locale?: components['parameters']['locale-query-param']
        /** @description The list of additional fields. These fields will be in the response if you send them in your request. */
        'additional_fields[]'?: components['parameters']['additional_fields-query-param']
        /** @description Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Shows regional prices and restrictions for a catalog if those were specified while creating an item. <div class="note"><b>Note</b><br><br>If you do not specify the country explicitly, it will be set based on user's IP address.</div> */
        country?: components['parameters']['country-query-param']
        /** @description Unique case sensitive code. Contains letters and numbers. */
        promo_code?: components['parameters']['promo_code-query-param']
        /** @description Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. */
        show_inactive_time_limited_items?: components['parameters']['show_inactive_time_limited_items-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Game-Keys_200-get-games-catalog']
    }
  }
  'get-games-group': {
    parameters: {
      query?: {
        /**
         * @description Limit for the number of elements on the page.
         * @example 50
         */
        limit?: components['parameters']['limit-query-param']
        /**
         * @description Number of the element from which the list is generated (the count starts from 0).
         * @example 0
         */
        offset?: components['parameters']['offset-query-param']
        /** @description Response language. Two-letter lowercase language code per ISO 639-1. */
        locale?: components['parameters']['locale-query-param']
        /** @description The list of additional fields. These fields will be in the response if you send them in your request. */
        'additional_fields[]'?: components['parameters']['additional_fields-query-param']
        /** @description Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Shows regional prices and restrictions for a catalog if those were specified while creating an item. <div class="note"><b>Note</b><br><br>If you do not specify the country explicitly, it will be set based on user's IP address.</div> */
        country?: components['parameters']['country-query-param']
        /** @description Unique case sensitive code. Contains letters and numbers. */
        promo_code?: components['parameters']['promo_code-query-param']
        /** @description Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. */
        show_inactive_time_limited_items?: components['parameters']['show_inactive_time_limited_items-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Group external ID. */
        external_id: components['parameters']['external_id-group-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Game-Keys_200-get-games-catalog']
    }
  }
  'get-game-by-sku': {
    parameters: {
      query?: {
        /** @description Response language. Two-letter lowercase language code per ISO 639-1. */
        locale?: components['parameters']['locale-query-param']
        /** @description The list of additional fields. These fields will be in the response if you send them in your request. */
        'additional_fields[]'?: components['parameters']['additional_fields-query-param']
        /** @description Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Shows regional prices and restrictions for a catalog if those were specified while creating an item. <div class="note"><b>Note</b><br><br>If you do not specify the country explicitly, it will be set based on user's IP address.</div> */
        country?: components['parameters']['country-query-param']
        /** @description Unique case sensitive code. Contains letters and numbers. */
        promo_code?: components['parameters']['promo_code-query-param']
        /** @description Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. */
        show_inactive_time_limited_items?: components['parameters']['show_inactive_time_limited_items-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Game was successfully received. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /**
             * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
             * @example game_01
             */
            sku?: string
            /**
             * @description Item name.
             * @example Game name
             */
            name?: string
            /**
             * @description Groups the item belongs to.
             * @example [
             *       {
             *         "external_id": "all",
             *         "name": "All games"
             *       },
             *       {
             *         "external_id": "Xsolla",
             *         "name": "Xsolla game"
             *       }
             *     ]
             */
            groups?: {
              /** @example accessory */
              external_id?: string
              /** @example Accessory */
              name?: string
            }[]
            attributes?: components['schemas']['Game-Keys_schemas-client-attributes']
            /**
             * @description Type of item: `virtual_good`/`virtual_currency`/`bundle`/`physical_good`/`unit`.
             * @example unit
             */
            type?: string
            /**
             * @description Type of unit: `game`.
             * @example game
             */
            unit_type?: string
            /**
             * @description Item description.
             * @example Game description
             */
            description?: string
            /**
             * @description Image URL.
             * @example https://cdn.xsolla.net/img/misc/images/b79342cdf24f0f8557b63c87e8326e62.png
             */
            image_url?: string
            promotions?: components['schemas']['Catalog_item_promotions']
            unit_items?: {
              /**
               * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
               * @example game_01
               */
              sku?: string
              /**
               * @description Type of item: `game_key`.
               * @example game_key
               */
              type?: string
              is_free?: components['schemas']['value-is_free']
              /** @description Item prices. */
              price?: {
                /**
                 * @description Discounted item price.
                 * @example 2.9900
                 */
                amount?: string
                /**
                 * @description Item price.
                 * @example 2.9900
                 */
                amount_without_discount?: string
                /**
                 * @description Default purchase currency. Three-letter code per [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
                 * @example USD
                 */
                currency?: string
              }
              /** @description Virtual prices. */
              virtual_prices?: {
                /**
                 * @description Discounted item price in virtual currency.
                 * @example 100
                 */
                amount?: number
                /**
                 * @description Item price.
                 * @example 200
                 */
                amount_without_discount?: number
                /**
                 * @description Virtual currency item SKU.
                 * @example vc_test
                 */
                sku?: string
                /**
                 * @description Whether price is default for item.
                 * @example true
                 */
                is_default?: boolean
                /**
                 * @description Image of virtual currency.
                 * @example http://image.png
                 */
                image_url?: string
                /**
                 * @description Virtual currency name.
                 * @example SHOTGUN FOR TRUE RAIDERS
                 */
                name?: string
                /**
                 * @description Virtual currency type.
                 * @example virtual_currency
                 */
                type?: string
                /**
                 * @description Virtual currency description.
                 * @example Big Rocket - description
                 */
                description?: string
              }[]
              can_be_bought?: components['schemas']['Can_be_bought']
              /**
               * @description DRM name.
               * @example Steam
               */
              drm_name?: string
              /**
               * @description Unique DRM ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
               * @example steam
               */
              drm_sku?: string
              /**
               * @description If `true`, the game key has keys for sale.
               * @example false
               */
              has_keys?: boolean
              /**
               * @description If `true`, the game key is pre-order and the release date hasn't passed.
               * @example true
               */
              is_pre_order?: boolean
              /**
               * @description Game key release date in the ISO 8601 format.
               * @example 2020-08-11T10:00:00+03:00
               */
              release_date?: string
              promotions?: components['schemas']['Catalog_item_promotions']
              limits?: components['schemas']['Catalog_item_limits']
              periods?: components['schemas']['item-periods']
              vp_rewards?: components['schemas']['item-value-point-reward'][]
            }[]
          }
        }
      }
      /** @description Game not found.
       *      */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @example 404 */
            statusCode?: number
            /** @example 4001 */
            errorCode?: number
            /** @example [0401-4001]: Item with sku = 'game_1' not found */
            errorMessage?: string
          }
        }
      }
    }
  }
  'get-game-key-by-sku': {
    parameters: {
      query?: {
        /** @description Response language. Two-letter lowercase language code per ISO 639-1. */
        locale?: components['parameters']['locale-query-param']
        /** @description The list of additional fields. These fields will be in the response if you send them in your request. */
        'additional_fields[]'?: components['parameters']['additional_fields-query-param']
        /** @description Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Shows regional prices and restrictions for a catalog if those were specified while creating an item. <div class="note"><b>Note</b><br><br>If you do not specify the country explicitly, it will be set based on user's IP address.</div> */
        country?: components['parameters']['country-query-param']
        /** @description Unique case sensitive code. Contains letters and numbers. */
        promo_code?: components['parameters']['promo_code-query-param']
        /** @description Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. */
        show_inactive_time_limited_items?: components['parameters']['show_inactive_time_limited_items-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Game key was successfully received. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /**
             * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
             * @example game_01
             */
            sku?: string
            /**
             * @description Item name.
             * @example Game name
             */
            name?: string
            /**
             * @description Groups the item belongs to.
             * @example [
             *       {
             *         "external_id": "all",
             *         "name": "All games"
             *       },
             *       {
             *         "external_id": "Xsolla",
             *         "name": "Xsolla game"
             *       }
             *     ]
             */
            groups?: {
              /** @example accessory */
              external_id?: string
              /** @example Accessory */
              name?: string
            }[]
            attributes?: components['schemas']['Game-Keys_schemas-client-attributes']
            /**
             * @description Type of item: `game_key`.
             * @example game_key
             */
            type?: string
            /**
             * @description Item description.
             * @example Game description
             */
            description?: string
            /**
             * @description Image URL.
             * @example https://cdn.xsolla.net/img/misc/images/b79342cdf24f0f8557b63c87e8326e62.png
             */
            image_url?: string
            is_free?: components['schemas']['value-is_free']
            /** @description Item prices. */
            price?: {
              /**
               * @description Discounted item price.
               * @example 2.9900
               */
              amount?: string
              /**
               * @description Item price.
               * @example 2.9900
               */
              amount_without_discount?: string
              /**
               * @description Default purchase currency. Three-letter code per [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
               * @example USD
               */
              currency?: string
            }
            /** @description Virtual prices. */
            virtual_prices?: {
              /**
               * @description Discounted item price in virtual currency.
               * @example 100
               */
              amount?: number
              /**
               * @description Item price.
               * @example 200
               */
              amount_without_discount?: number
              /**
               * @description Virtual currency item SKU.
               * @example vc_test
               */
              sku?: string
              /**
               * @description Whether price is default for item.
               * @example true
               */
              is_default?: boolean
              /**
               * @description Image of virtual currency.
               * @example http://image.png
               */
              image_url?: string
              /**
               * @description Virtual currency name.
               * @example SHOTGUN FOR TRUE RAIDERS
               */
              name?: string
              /**
               * @description Virtual currency type.
               * @example virtual_currency
               */
              type?: string
              /**
               * @description Virtual currency description.
               * @example Big Rocket - description
               */
              description?: string
            }[]
            can_be_bought?: components['schemas']['Can_be_bought']
            /**
             * @description DRM name.
             * @example Steam
             */
            drm_name?: string
            /**
             * @description Unique DRM ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
             * @example steam
             */
            drm_sku?: string
            /**
             * @description If `true`, the game key has keys for sale.
             * @example false
             */
            has_keys?: boolean
            /**
             * @description If `true`, the game key is pre-order and the release date hasn't passed.
             * @example true
             */
            is_pre_order?: boolean
            /**
             * @description Game key release date in the ISO 8601 format.
             * @example 2020-08-11T10:00:00+03:00
             */
            release_date?: string
            promotions?: components['schemas']['Catalog_item_promotions']
            limits?: components['schemas']['Catalog_item_limits']
            periods?: components['schemas']['item-periods']
          }
        }
      }
      /** @description Game key not found.
       *      */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @example 404 */
            statusCode?: number
            /** @example 4001 */
            errorCode?: number
            /** @example [0401-4001]: Item with sku = 'game_key_1' not found */
            errorMessage?: string
          }
        }
      }
    }
  }
  'get-game-keys-group': {
    parameters: {
      query?: {
        /**
         * @description Limit for the number of elements on the page.
         * @example 50
         */
        limit?: components['parameters']['limit-query-param']
        /**
         * @description Number of the element from which the list is generated (the count starts from 0).
         * @example 0
         */
        offset?: components['parameters']['offset-query-param']
        /** @description Response language. Two-letter lowercase language code per ISO 639-1. */
        locale?: components['parameters']['locale-query-param']
        /** @description The list of additional fields. These fields will be in the response if you send them in your request. */
        'additional_fields[]'?: components['parameters']['additional_fields-query-param']
        /** @description Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Shows regional prices and restrictions for a catalog if those were specified while creating an item. <div class="note"><b>Note</b><br><br>If you do not specify the country explicitly, it will be set based on user's IP address.</div> */
        country?: components['parameters']['country-query-param']
        /** @description Unique case sensitive code. Contains letters and numbers. */
        promo_code?: components['parameters']['promo_code-query-param']
        /** @description Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. */
        show_inactive_time_limited_items?: components['parameters']['show_inactive_time_limited_items-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Group external ID. */
        external_id: components['parameters']['external_id-group-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Game-Keys_200-get-game-keys-by-group-catalog']
    }
  }
  'get-drm-list': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Game-Keys_200-get-drm-list']
    }
  }
  'admin-get-game-list': {
    parameters: {
      query?: {
        /**
         * @description Limit for the number of elements on the page.
         * @example 50
         */
        limit?: components['parameters']['limit-query-param']
        /**
         * @description Number of the element from which the list is generated (the count starts from 0).
         * @example 0
         */
        offset?: components['parameters']['offset-query-param']
        /** @description Unique case sensitive code. Contains letters and numbers. */
        promo_code?: components['parameters']['promo_code-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Game-Keys_200-admin-get-games-list']
      401: components['responses']['Game-Keys_401-invalid-basic-auth']
    }
  }
  'admin-create-game': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody: components['requestBodies']['Game-Keys_create-update-game-model']
    responses: {
      /** @description Game was successfully created. */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @example 101 */
            item_id?: number
            /** @example game_1 */
            sku?: string
          }
        }
      }
      401: components['responses']['Game-Keys_401-invalid-basic-auth']
      422: components['responses']['Game-Keys_422-invalid-request']
    }
  }
  'admin-get-game-by-sku': {
    parameters: {
      query?: {
        /** @description Unique case sensitive code. Contains letters and numbers. */
        promo_code?: components['parameters']['promo_code-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: components['parameters']['item_sku-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Game-Keys_200-admin-get-game-by-sku']
      401: components['responses']['Game-Keys_401-invalid-basic-auth']
      /** @description Game not found.
       *      */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @example 404 */
            statusCode?: number
            /** @example 4001 */
            errorCode?: number
            /** @example [0401-4001]: Item with sku = 'game_1' not found */
            errorMessage?: string
          }
        }
      }
    }
  }
  'admin-update-game-by-sku': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: components['parameters']['item_sku-path-param']
      }
      cookie?: never
    }
    requestBody: components['requestBodies']['Game-Keys_create-update-game-model']
    responses: {
      /** @description Game was successfully updated. */
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['Game-Keys_401-invalid-basic-auth']
      /** @description Game not found.
       *      */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @example 404 */
            statusCode?: number
            /** @example 4001 */
            errorCode?: number
            /** @example [0401-4001]: Item with sku = 'game_1' not found */
            errorMessage?: string
          }
        }
      }
      422: components['responses']['Game-Keys_422-invalid-request']
    }
  }
  'admin-delete-game-by-sku': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: components['parameters']['item_sku-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Game was successfully deleted. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['Game-Keys_401-invalid-basic-auth']
    }
  }
  'admin-get-game-by-id': {
    parameters: {
      query?: {
        /** @description Unique case sensitive code. Contains letters and numbers. */
        promo_code?: components['parameters']['promo_code-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item ID. */
        item_id: components['parameters']['item_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Game-Keys_200-admin-get-game-by-sku']
      401: components['responses']['Game-Keys_401-invalid-basic-auth']
      /** @description Game not found.
       *      */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @example 404 */
            statusCode?: number
            /** @example 4001 */
            errorCode?: number
            /** @example [0401-4001]: Item with id = 1 not found */
            errorMessage?: string
          }
        }
      }
    }
  }
  'admin-update-game-by-id': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item ID. */
        item_id: components['parameters']['item_id-path-param']
      }
      cookie?: never
    }
    requestBody: components['requestBodies']['Game-Keys_create-update-game-model']
    responses: {
      /** @description Game was successfully updated. */
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['Game-Keys_401-invalid-basic-auth']
      /** @description Game not found.
       *      */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @example 404 */
            statusCode?: number
            /** @example 4001 */
            errorCode?: number
            /** @example [0401-4001]: Item with id = 1 not found */
            errorMessage?: string
          }
        }
      }
      422: components['responses']['Game-Keys_422-invalid-request']
    }
  }
  'admin-delete-game-by-id': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item ID. */
        item_id: components['parameters']['item_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Game was successfully deleted. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['Game-Keys_401-invalid-basic-auth']
    }
  }
  'admin-upload-codes-by-sku': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: components['parameters']['item_sku-path-param']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'multipart/form-data': {
          /**
           * Format: binary
           * @description File with codes.
           */
          file: string
          /** @description Region ID. */
          region_id?: number
        }
      }
    }
    responses: {
      200: components['responses']['Game-Keys_200-session-information']
      401: components['responses']['Game-Keys_401-invalid-basic-auth']
      /** @description Game key or region not found.
       *      */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @example 404 */
            statusCode?: number
            /** @example 4001 */
            errorCode?: number
            /** @example [0401-4001]: Item with sku = 'game_1' not found */
            errorMessage?: string
          }
        }
      }
    }
  }
  'admin-upload-codes-by-id': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item ID. */
        item_id: components['parameters']['item_id-path-param']
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'multipart/form-data': {
          /**
           * Format: binary
           * @description File with codes.
           */
          file: string
          /** @description Region ID. */
          region_id?: number
        }
      }
    }
    responses: {
      200: components['responses']['Game-Keys_200-session-information']
      401: components['responses']['Game-Keys_401-invalid-basic-auth']
      /** @description Game key or region not found.
       *      */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @example 404 */
            statusCode?: number
            /** @example 4001 */
            errorCode?: number
            /** @example [0401-4001]: Item with sku = 'game_1' not found */
            errorMessage?: string
          }
        }
      }
    }
  }
  'admin-get-codes-session': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Session ID. */
        session_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Game-Keys_200-session-information']
      401: components['responses']['Game-Keys_401-invalid-basic-auth']
      /** @description Codes loading session not found.
       *      */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'admin-get-codes-by-sku': {
    parameters: {
      query: {
        /** @description User email. */
        user_email: components['parameters']['user_email-query-param']
        /** @description Codes quantity. */
        quantity: components['parameters']['quantity-query-param']
        /** @description Reason receiving codes. */
        reason: components['parameters']['reason-query-param']
        /** @description Region ID. */
        region_id?: components['parameters']['region_id-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: components['parameters']['item_sku-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Game-Keys_200-get-codes']
      401: components['responses']['Game-Keys_401-invalid-basic-auth']
      /** @description Game key or region not found.
       *      */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @example 404 */
            statusCode?: number
            /** @example 4001 */
            errorCode?: number
            /** @example [0401-4001]: Item with sku = 'game_1' not found */
            errorMessage?: string
          }
        }
      }
    }
  }
  'admin-get-codes-by-id': {
    parameters: {
      query: {
        /** @description User email. */
        user_email: components['parameters']['user_email-query-param']
        /** @description Codes quantity. */
        quantity: components['parameters']['quantity-query-param']
        /** @description Reason receiving codes. */
        reason: components['parameters']['reason-query-param']
        /** @description Region ID. */
        region_id?: components['parameters']['region_id-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item ID. */
        item_id: components['parameters']['item_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Game-Keys_200-get-codes']
      401: components['responses']['Game-Keys_401-invalid-basic-auth']
      /** @description Game key or region not found.
       *      */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @example 404 */
            statusCode?: number
            /** @example 4001 */
            errorCode?: number
            /** @example [0401-4001]: Item with sku = 'game_1' not found */
            errorMessage?: string
          }
        }
      }
    }
  }
  'admin-delete-codes-by-sku': {
    parameters: {
      query: {
        /** @description User email. */
        user_email: components['parameters']['user_email-query-param']
        /** @description Reason receiving codes. */
        reason: components['parameters']['reason-query-param']
        /** @description Region ID. */
        region_id?: components['parameters']['region_id-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: components['parameters']['item_sku-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Game-Keys_200-get-codes']
      401: components['responses']['Game-Keys_401-invalid-basic-auth']
      /** @description Game key or region not found.
       *      */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @example 404 */
            statusCode?: number
            /** @example 4001 */
            errorCode?: number
            /** @example [0401-4001]: Item with sku = 'game_1' not found */
            errorMessage?: string
          }
        }
      }
    }
  }
  'admin-delete-codes-by-id': {
    parameters: {
      query: {
        /** @description User email. */
        user_email: components['parameters']['user_email-query-param']
        /** @description Reason receiving codes. */
        reason: components['parameters']['reason-query-param']
        /** @description Region ID. */
        region_id?: components['parameters']['region_id-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item ID. */
        item_id: components['parameters']['item_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Game-Keys_200-get-codes']
      401: components['responses']['Game-Keys_401-invalid-basic-auth']
      /** @description Game key or region not found.
       *      */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @example 404 */
            statusCode?: number
            /** @example 4001 */
            errorCode?: number
            /** @example [0401-4001]: Item with sku = 'game_1' not found */
            errorMessage?: string
          }
        }
      }
    }
  }
  'get-user-games': {
    parameters: {
      query?: {
        /**
         * @description Limit for the number of elements on the page.
         * @example 50
         */
        limit?: components['parameters']['limit-query-param']
        /**
         * @description Number of the element from which the list is generated (the count starts from 0).
         * @example 0
         */
        offset?: components['parameters']['offset-query-param']
        /** @description What type of entitlements should be returned. If the parameter is set to 1, the entitlements received by the user in the sandbox mode only are returned. If the parameter isn't passed or is set to 0, the entitlements received by the user in the live mode only are returned. */
        sandbox?: components['parameters']['sandbox-query-param']
        /** @description The list of additional fields. These fields will be in the response if you send them in your request. Available fields `attributes`. */
        'additional_fields[]'?: components['parameters']['additional_fields-entitlement-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Game-Keys_200-user-entitlement-list']
      401: components['responses']['Game-Keys_401-invalid-basic-auth']
    }
  }
  'redeem-game-pin-code': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /**
           * @description Game code.
           * @example AAAA-BBBB-CCCC-DDDD
           */
          code: string
          /**
           * @description Redeem game code in the sandbox mode. The option is available for those users who are specified in the list of company users.
           * @default false
           * @example false
           */
          sandbox: boolean
        }
      }
    }
    responses: {
      /** @description Successful redemption. */
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: components['responses']['Game-Keys_403-auth-header-not-sent']
      /** @description Game code not found. Make sure the `code` and `project_id` are correct. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @example 404 */
            statusCode?: number
            /** @example 4603 */
            errorCode?: number
            /** @example [0401-4603]: Game code not found. */
            errorMessage?: string
          }
        }
      }
      /** @description Invalid request. */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @example 422 */
            statusCode?: number
            /** @example 5103 */
            errorCode?: number
            /** @example [0401-5103]: Selected drm is not drmfree. */
            errorMessage?: string
          }
        }
      }
    }
  }
  'grant-entitlement-admin': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /**
           * @description Unique user identifier.
           * @example user-external-id
           */
          user_external_id: string
          /**
           * @description Object with game properties.
           * @example {
           *       "game": {
           *         "sku": "game_1"
           *       }
           *     }
           */
          game: {
            sku: components['schemas']['Game-Keys_game_sku']
          }
          /**
           * @description Object with DRM properties.
           * @example {
           *       "drm": {
           *         "sku": "drmfree"
           *       }
           *     }
           */
          drm: {
            sku: components['schemas']['Game-Keys_drm_sku']
          }
          /**
           * @description Game code of the game.
           * @example AAAA-BBBB-CCCC-DDDD
           */
          code?: string | null
          /**
           * @description What type of entitlements should be granted. If the parameter is set to `sandbox`, the entitlement will be granted to the user in the sandbox mode. If the parameter is set to `default`, the entitlement will be granted to the user in the live mode.
           * @example default
           * @enum {string}
           */
          mode: 'default' | 'sandbox'
          /**
           * @description User's country.
           * @example US
           */
          user_country?: string | null
        }
      }
    }
    responses: {
      /** @description Entitlement was granted. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: components['responses']['Game-Keys_403-auth-header-not-sent']
      /** @description Game code not found. Make sure the `code` and `project_id` are correct. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @example 404 */
            statusCode?: number
            /** @example 4603 */
            errorCode?: number
            /** @example [0401-4603]: Game code not found. */
            errorMessage?: string
          }
        }
      }
      /** @description Invalid request. */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @example 422 */
            statusCode?: number
            /** @example 5103 */
            errorCode?: number
            /** @example [0401-5103]: Selected drm is not drmfree. */
            errorMessage?: string
          }
        }
      }
    }
  }
  'revoke-entitlement-admin': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /**
           * @description Unique user identifier.
           * @example user-external-id
           */
          user_external_id: string
          /**
           * @description Object with game properties.
           * @example {
           *       "game": {
           *         "sku": "game_1"
           *       }
           *     }
           */
          game: {
            sku: components['schemas']['Game-Keys_game_sku']
          }
          /**
           * @description Object with DRM properties.
           * @example {
           *       "drm": {
           *         "sku": "drmfree"
           *       }
           *     }
           */
          drm: {
            sku: components['schemas']['Game-Keys_drm_sku']
          }
          /**
           * @description What type of entitlements should be revoked. If the parameter is set to `sandbox`, the entitlement will be revoked from the user in the sandbox mode. If the parameter is set to `default`, the entitlement will be revoked from the user in the live mode.
           * @example default
           * @enum {string}
           */
          mode: 'default' | 'sandbox'
        }
      }
    }
    responses: {
      /** @description Successful revoke. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: components['responses']['Game-Keys_403-auth-header-not-sent']
      /** @description Invalid request. */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @example 422 */
            statusCode?: number
            /** @example 5103 */
            errorCode?: number
            /** @example [0401-5103]: Selected drm is not drmfree. */
            errorMessage?: string
          }
        }
      }
    }
  }
  'add-item-to-inventory': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          user: {
            /**
             * @description The unique user identifier on the platform.
             * @default d342dad2-9d59-11e9-a384-42010aa8003f
             */
            id: string
          }
          /**
           * @description Operation description. For example: "Monthly challenge rewards".
           * @default Monthly challenge rewards
           */
          comment: string
          /**
           * @description Publishing platform the user plays on.
           * @default xsolla
           * @enum {string}
           */
          platform:
            | 'playstation_network'
            | 'xbox_live'
            | 'xsolla'
            | 'pc_standalone'
            | 'nintendo_shop'
            | 'google_play'
            | 'app_store_ios'
            | 'android_standalone'
            | 'ios_standalone'
            | 'android_other'
            | 'ios_other'
            | 'pc_other'
          items: {
            /**
             * @description Item class identifier. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
             * @default booster_mega_1
             */
            sku: string
            /**
             * @description Number of items of this class needed to be granted.
             * @default 1
             */
            quantity: number
          }[]
        }[]
      }
    }
    responses: {
      /** @description Successful user reward. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @example 10 */
            count?: number
            operations?: {
              /**
               * @description The unique user identifier on the platform.
               * @example d.user
               */
              user_id?: string
              /**
               * @description Publishing platform the user plays on.
               * @example xbox_live
               * @enum {string|null}
               */
              platform?:
                | null
                | 'playstation_network'
                | 'xbox_live'
                | 'xsolla'
                | 'pc_standalone'
                | 'nintendo_shop'
                | 'google_play'
                | 'app_store_ios'
                | 'android_standalone'
                | 'ios_standalone'
                | 'android_other'
                | 'ios_other'
                | 'pc_other'
              /**
               * @description Operation description. For example: "Monthly challenge rewards".
               * @example Montly challange rewards
               */
              comment?: string
              items?: {
                /**
                 * @description Item class identifier. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
                 * @example item_sku
                 */
                sku?: string
                /**
                 * @description Number of items of this class needed to be granted.
                 * @example 1
                 */
                quantity?: number
                /**
                 * @description Total amount of items of this class in user's possession.
                 * @example 5
                 */
                balance?: number
              }[]
            }[]
          }
        }
      }
      /** @description Item for project not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @example 404 */
            statusCode?: number
            /**
             * @description Error code.
             * @example 4001
             */
            errorCode?: number
            /**
             * @description Error message.
             * @example [0401-4001]: Could not find item for project 44056 with id armor_max ()
             */
            errorMessage?: string
          }[]
          many_items: unknown
          not_found_user: unknown
          incorrect_format_input_data: unknown
        }
      }
    }
  }
  'revoke-item': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          user: {
            /**
             * @description The unique user identifier on the platform.
             * @default d342dad2-9d59-11e9-a384-42010aa8003f
             */
            id: string
          }
          /**
           * @description Operation description. For example: "Item was transferred to another player".
           * @default Item was transferred to another player
           */
          comment: string
          /**
           * @description Publishing platform the user plays on.
           * @default xsolla
           * @example xsolla
           * @enum {string}
           */
          platform:
            | 'playstation_network'
            | 'xbox_live'
            | 'xsolla'
            | 'pc_standalone'
            | 'nintendo_shop'
            | 'google_play'
            | 'app_store_ios'
            | 'android_standalone'
            | 'ios_standalone'
            | 'android_other'
            | 'ios_other'
            | 'pc_other'
          items: {
            /**
             * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
             * @default booster_mega_1
             */
            sku: string
            /**
             * @description Number of items of this class needed to be revoked.
             * @default 1
             */
            quantity: number
          }[]
        }[]
      }
    }
    responses: {
      /** @description User items revocation successful. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /**
             * @description Number of users whose items were successfully revoked.
             * @example 10
             */
            count?: number
            /** @description Description of operations. */
            operations?: {
              /**
               * @description The unique user identifier on the platform.
               * @example d.user
               */
              user_id?: string
              /**
               * @default xsolla
               * @example xbox_live
               * @enum {string}
               */
              platform:
                | 'playstation_network'
                | 'xbox_live'
                | 'xsolla'
                | 'pc_standalone'
                | 'nintendo_shop'
                | 'google_play'
                | 'app_store_ios'
                | 'android_standalone'
                | 'ios_standalone'
                | 'android_other'
                | 'ios_other'
                | 'pc_other'
              /**
               * @description Operation description. For example: "Item was transferred to another player".
               * @example Some comment for this operation
               */
              comment?: string
              /** @description Items in this operation. */
              items?: {
                /**
                 * @description Item class identifier. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
                 * @example item_sku
                 */
                sku?: string
                /**
                 * @description Number of revoked items of this class.
                 * @example 1
                 */
                quantity?: number
                /**
                 * @description Total amount of items of this class in user's possession.
                 * @example 1
                 */
                balance?: number
              }[]
            }[]
          }
        }
      }
      /** @description Failed to remove this number of items. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @example 404 */
            statusCode?: number
            /**
             * @description Error code.
             * @example 4001
             */
            errorCode?: number
            /**
             * @description Error message.
             * @example [0401-5004]: Could not find instance in inventory: Could not remove 10, user only has 1
             */
            errorMessage?: string
          }[]
          many_items: unknown
          remove_many: unknown
          not_found_user: unknown
          incorrect_format_input_data: unknown
        }
      }
    }
  }
  'grant-item-by-purchase': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          user: {
            /**
             * @description The unique user identifier on the platform.
             * @default d342dad2-9d59-11e9-a384-42010aa8003f
             */
            id: string
          }
          /**
           * @description Operation description. For example: "Monthly challenge rewards".
           * @default Monthly challenge rewards
           */
          comment: string
          /**
           * @description Publishing platform the user plays on.
           * @default xsolla
           * @enum {string}
           */
          platform:
            | 'playstation_network'
            | 'xbox_live'
            | 'xsolla'
            | 'pc_standalone'
            | 'nintendo_shop'
            | 'google_play'
            | 'app_store_ios'
            | 'android_standalone'
            | 'ios_standalone'
            | 'android_other'
            | 'ios_other'
            | 'pc_other'
          purchase: {
            /**
             * @description Purchase amount prior to any deductions.
             * @default 2.99
             */
            amount: string
            /**
             * @description Purchase currency in [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
             * @default USD
             */
            currency: string
            /**
             * @description Purchase invoice identifier from the platform a purchase was made on.
             * @default 10-534-35
             */
            external_purchase_id: string
            /**
             * @description Purchase date in ISO 8601.
             * @default 2020-01-01T05:00:00+05:00
             */
            external_purchase_date: string
          }
          items: {
            /**
             * @description Item class identifier. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
             * @default booster_mega_1
             */
            sku: string
            /**
             * @description Number of items of this class needed to be granted.
             * @default 1
             */
            quantity: number
          }[]
          custom_parameters?: components['schemas']['Player-Inventory_custom_parameters']
        }[]
      }
    }
    responses: {
      /** @description Successful user purchase. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @example 10 */
            count?: number
            operations?: {
              /**
               * @description The unique user identifier on the platform.
               * @example d.user
               */
              user_id?: string
              /**
               * @description Publishing platform the user plays on.
               * @example xbox_live
               * @enum {string}
               */
              platform?:
                | 'playstation_network'
                | 'xbox_live'
                | 'xsolla'
                | 'pc_standalone'
                | 'nintendo_shop'
                | 'google_play'
                | 'app_store_ios'
                | 'android_standalone'
                | 'ios_standalone'
                | 'android_other'
                | 'ios_other'
                | 'pc_other'
              /**
               * @description Operation description. For example: "Monthly challenge rewards".
               * @example Montly challange rewards
               */
              comment?: string
              /**
               * @description Operation description on Xsolla's side.
               * @example 123456
               */
              order_id?: number
              /**
               * @description Purchase invoice identifier from the platform a purchase was made on.
               * @example 10-534-35
               */
              external_purchase_id?: string
              /**
               * @description Purchase date in ISO 8601.
               * @example 2020-01-01T05:00:00+05:00
               */
              external_purchase_date?: string
              /**
               * @description Purchase amount prior to any deductions.
               * @example 2.99
               */
              amount?: string
              /**
               * @description Purchase currency in [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
               * @example USD
               */
              currency?: string
              items?: {
                /**
                 * @description Item class identifier. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
                 * @example item_sku
                 */
                sku?: string
                /**
                 * @description Number of items of this class needed to be granted.
                 * @example 1
                 */
                quantity?: number
              }[]
              custom_parameters?: components['schemas']['Player-Inventory_custom_parameters']
            }[]
          }
        }
      }
      /** @description Unprocessable Entity. */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @example 422 */
            statusCode?: number
            /**
             * @description Error code.
             * @example 1102
             */
            errorCode?: number
            /**
             * @description Error message.
             * @example [0401-1102]: Unprocessable Entity. The property sku is required
             */
            errorMessage?: string
          }[]
          incorrect_format_input_data: unknown
        }
      }
    }
  }
  'set-item-quantity': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          user: {
            /**
             * @description The unique user identifier on the platform.
             * @default d342dad2-9d59-11e9-a384-42010aa8003f
             */
            id: string
          }
          /**
           * @description Operation description. For example: "Monthly inventory syncing".
           * @default Monthly inventory syncing
           */
          comment: string
          /**
           * @description Publishing platform the user plays on.
           * @default xsolla
           * @enum {string}
           */
          platform:
            | 'playstation_network'
            | 'xbox_live'
            | 'xsolla'
            | 'pc_standalone'
            | 'nintendo_shop'
            | 'google_play'
            | 'app_store_ios'
            | 'android_standalone'
            | 'ios_standalone'
            | 'android_other'
            | 'ios_other'
            | 'pc_other'
          items: {
            /**
             * @description Item class identifier. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
             * @default booster_mega_1
             */
            sku: string
            /**
             * @description Number of items of this class needed to be granted.
             * @default 1
             */
            quantity: number
          }[]
        }[]
      }
    }
    responses: {
      /** @description Successful response. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @example 10 */
            count?: number
            operations?: {
              /**
               * @description The unique user identifier on the platform.
               * @example d.user
               */
              user_id?: string
              /**
               * @description Publishing platform the user plays on.
               * @example xbox_live
               * @enum {string}
               */
              platform?:
                | 'playstation_network'
                | 'xbox_live'
                | 'xsolla'
                | 'pc_standalone'
                | 'nintendo_shop'
                | 'google_play'
                | 'app_store_ios'
                | 'android_standalone'
                | 'ios_standalone'
                | 'android_other'
                | 'ios_other'
                | 'pc_other'
              /**
               * @description Operation description. For example: "Daily inventory syncing".
               * @example Daily inventory syncing
               */
              comment?: string
              items?: {
                /**
                 * @description Item class identifier. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
                 * @example item_sku
                 */
                sku?: string
                /**
                 * @description Number of items of this class needed to be granted.
                 * @example 1
                 */
                quantity?: number
                /**
                 * @description Total amount of items of this class in user's possession.
                 * @example 5
                 */
                balance?: number
              }[]
            }[]
          }
        }
      }
      /** @description Item for project not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @example 404 */
            statusCode?: number
            /**
             * @description Error code.
             * @example 4001
             */
            errorCode?: number
            /**
             * @description Error message.
             * @example [0401-4001]: Could not find item for project 44056 with id armor_max ()
             */
            errorMessage?: string
          }[]
          many_items: unknown
          not_found_user: unknown
          incorrect_format_input_data: unknown
        }
      }
    }
  }
  'get-user-inventory': {
    parameters: {
      query?: {
        /**
         * @description Limit for the number of elements on the page.
         * @example 50
         */
        limit?: components['parameters']['limit-query-param']
        /**
         * @description Number of the element from which the list is generated (the count starts from 0).
         * @example 0
         */
        offset?: components['parameters']['offset-query-param']
        /** @description Publishing platform the user plays on. */
        platform?:
          | 'playstation_network'
          | 'xbox_live'
          | 'xsolla'
          | 'pc_standalone'
          | 'nintendo_shop'
          | 'google_play'
          | 'app_store_ios'
          | 'android_standalone'
          | 'ios_standalone'
          | 'android_other'
          | 'ios_other'
          | 'pc_other'
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The user’s inventory was successfully retrieved. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @example [
             *       {
             *         "instance_id": null,
             *         "sku": "instanciated_item",
             *         "type": "virtual_good",
             *         "name": "Rocket",
             *         "quantity": null,
             *         "description": "Big Rocket - short description",
             *         "image_url": "https://picture.bigrocket.png",
             *         "attributes": [],
             *         "groups": [],
             *         "remaining_uses": 1,
             *         "virtual_item_type": "non_consumable"
             *       },
             *       {
             *         "instance_id": null,
             *         "sku": "shotgun_raider",
             *         "type": "virtual_good",
             *         "name": "SHOTGUN FOR TRUE RAIDERS",
             *         "quantity": 2,
             *         "description": "description",
             *         "image_url": "http://image.png",
             *         "attributes": [],
             *         "groups": [],
             *         "remaining_uses": 1,
             *         "virtual_item_type": "non_consumable"
             *       },
             *       {
             *         "instance_id": null,
             *         "sku": "headphones_for_pro",
             *         "type": "virtual_good",
             *         "name": "HEADPHONES",
             *         "quantity": 5,
             *         "description": null,
             *         "image_url": null,
             *         "attributes": [
             *           {
             *             "external_id": "stack_size",
             *             "name": "Stack size",
             *             "values": [
             *               {
             *                 "external_id": "stack_size_value_99c25352ab6e34a0e0755fc2a9daa7a76021dce2",
             *                 "value": 5
             *               }
             *             ]
             *           },
             *           {
             *             "external_id": "licensed",
             *             "name": "Licensed",
             *             "values": [
             *               {
             *                 "external_id": "licensed_value_d75d8034dd2f82cb3d2789f5ec1837a6c350b505",
             *                 "value": true
             *               }
             *             ]
             *           }
             *         ],
             *         "groups": [],
             *         "remaining_uses": 1,
             *         "virtual_item_type": "non_consumable"
             *       },
             *       {
             *         "instance_id": null,
             *         "sku": "platform_currency",
             *         "type": "virtual_currency",
             *         "name": "UNIQUE DIAMONDS",
             *         "quantity": 100,
             *         "description": null,
             *         "image_url": null,
             *         "attributes": [],
             *         "groups": [],
             *         "remaining_uses": 1
             *       }
             *     ] */
            items?: {
              /**
               * @deprecated
               * @description Deprecated parameter. Always `null`.
               */
              instance_id?: null
              /**
               * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
               * @example instanciated_item
               */
              sku?: string
              /**
               * @description Type of item: `consumable`/`expiration`/`permanent`/`lootboxes`/`physical`.
               * @example virtual_good
               */
              type?: string
              /**
               * @description Item name.
               * @example Rocket
               */
              name?: string
              /**
               * @description Item quantity.
               * @example null
               */
              quantity?: number | null
              /**
               * @description Item description.
               * @example Big Rocket - short description
               */
              description?: string
              /**
               * @description Image URL.
               * @example https://picture.bigrocket.png
               */
              image_url?: string
              /**
               * @description Groups the item belongs to.
               * @example [
               *       {
               *         "external_id": "accessory",
               *         "name": "Accessory"
               *       }
               *     ]
               */
              groups?: {
                /** @example accessory */
                external_id?: string
                /** @example Accessory */
                name?: string
              }[]
              attributes?: components['schemas']['Player-Inventory_client-attributes']
              /**
               * @description Defines the consumable properties: number of remaining uses if this is a consumable item, or `null` if this is a non-consumable item.
               * @example 1
               */
              remaining_uses?: number | null
              /**
               * @description Type of virtual item.
               * @example non_consumable
               * @enum {string|null}
               */
              virtual_item_type?: 'consumable' | 'non_consumable' | 'non_renewing_subscription'
            }[]
          }
        }
      }
    }
  }
  'get-user-virtual-balance': {
    parameters: {
      query?: {
        /** @description Publishing platform the user plays on. */
        platform?:
          | 'playstation_network'
          | 'xbox_live'
          | 'xsolla'
          | 'pc_standalone'
          | 'nintendo_shop'
          | 'google_play'
          | 'app_store_ios'
          | 'android_standalone'
          | 'ios_standalone'
          | 'android_other'
          | 'ios_other'
          | 'pc_other'
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The user’s virtual balance was successfully retrieved. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @example [
             *       {
             *         "sku": "plex",
             *         "type": "virtual_good",
             *         "virtual_item_type": "non_renewing_subscription",
             *         "name": "PLEX",
             *         "description": "The PLEX or “30-day Pilot's License EXtension” is a virtual item that represents 30 days of subscription time and can be bought for cash and then sold to other players for in-game ISK.",
             *         "image_url": "https://picture.bigrocket.png",
             *         "expired_at": 1746057600,
             *         "status": "active"
             *       },
             *       {
             *         "sku": "token",
             *         "type": "virtual_good",
             *         "virtual_item_type": "non_renewing_subscription",
             *         "name": "WoW Token",
             *         "description": "WoW token allows players to buy game time World of Warcraft for money and sell it for game gold at auction.",
             *         "image_url": "https://picture.bigrocket.png",
             *         "expired_at": 1546304461,
             *         "status": "expired"
             *       }
             *     ] */
            items?: {
              /**
               * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
               * @example instanciated_item
               */
              sku?: string
              /**
               * @description Type of item: `virtual_good`/`virtual_currency`/`bundle`.
               * @example virtual_currency
               */
              type?: string
              /**
               * @description Item name.
               * @example Rocket
               */
              name?: string
              /**
               * @description Item quantity.
               * @example null
               */
              amount?: number
              /**
               * @description Item description.
               * @example Big Rocket - short description
               */
              description?: string
              /**
               * @description Image URL.
               * @example https://picture.bigrocket.png
               */
              image_url?: string
            }[]
          }
        }
      }
    }
  }
  'get-user-subscriptions': {
    parameters: {
      query?: {
        /** @description Publishing platform the user plays on. */
        platform?:
          | 'playstation_network'
          | 'xbox_live'
          | 'xsolla'
          | 'pc_standalone'
          | 'nintendo_shop'
          | 'google_play'
          | 'app_store_ios'
          | 'android_standalone'
          | 'ios_standalone'
          | 'android_other'
          | 'ios_other'
          | 'pc_other'
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The user’s time-limited items were successfully retrieved. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @example [
             *       {
             *         "sku": "VC_1",
             *         "type": "virtual_currency",
             *         "name": "Ruble",
             *         "amount": 10,
             *         "description": "Ruble",
             *         "image_url": "https://picture.bigrocket.png",
             *         "virtual_item_type": "non_renewing_subscription"
             *       },
             *       {
             *         "sku": "VC_2",
             *         "type": "virtual_currency",
             *         "name": "Xsollar",
             *         "amount": 5000,
             *         "description": "Xsollar",
             *         "image_url": "http://image.png",
             *         "virtual_item_type": "non_renewing_subscription"
             *       }
             *     ] */
            items?: {
              /**
               * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
               * @example premium
               */
              sku?: string
              /**
               * @description Type of item: `virtual_good`.
               * @example virtual_good
               */
              type?: string
              /**
               * @description Type of virtual item.
               * @example non_consumable
               * @enum {string}
               */
              virtual_item_type?: 'consumable' | 'non_consumable' | 'non_renewing_subscription'
              /**
               * @description Subsription name.
               * @example Premium status
               */
              name?: string
              /**
               * @description Item description.
               * @example Premium. Premium Status provides a character with several benefits allowing faster overall progression.
               */
              description?: string
              /**
               * @description Image URL.
               * @example https://picture.bigrocket.png
               */
              image_url?: string
              /**
               * @description Unix Timestamp. Time-limited item's expiration date. If user hasn't item then value is `null`.
               * @example 1746057600
               */
              expired_at?: number
              /**
               * @description Time-limited item's status.
               *     Item can be in three statuses:
               *     - `none` - not bought.
               *     - `active` - item is active.
               *     - `expired` - item was purchased, but expired.
               *
               * @example active
               */
              status?: string
            }[]
          }
        }
      }
    }
  }
  'consume-item': {
    parameters: {
      query?: {
        /** @description Publishing platform the user plays on. */
        platform?:
          | 'playstation_network'
          | 'xbox_live'
          | 'xsolla'
          | 'pc_standalone'
          | 'nintendo_shop'
          | 'google_play'
          | 'app_store_ios'
          | 'android_standalone'
          | 'ios_standalone'
          | 'android_other'
          | 'ios_other'
          | 'pc_other'
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': {
          /**
           * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
           * @default booster_mega_1
           * @example booster_mega_1
           */
          sku: string
          /**
           * @description Item quantity.
           * @default 1
           * @example 1
           */
          quantity: number
        }
      }
    }
    responses: {
      /** @description Item from the user’s inventory was consumed.
       *      */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description The item was not found at all, the item was not found in the inventory, or it is not enough (attempt to consume more than the initial number). */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @example 404 */
            statusCode?: number
            /** @example 4001 */
            errorCode?: number
            /** @example [0401-4001]: Item with Project Id = 44056 and Sku = gun_5 not found */
            errorMessage?: string
          }
          'application/json 1': unknown
          'application/json 2': unknown
        }
      }
      /** @description Make sure `quantity` and `sku` parameters are passed. */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @example 422 */
            statusCode?: number
            /** @example 5002 */
            errorCode?: number
            /** @example [0401-5002]: Quantity and item_id/sku must be specified */
            errorMessage?: string
          }
        }
      }
    }
  }
  'inventory-account-link': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /**
           * @description Linking code. It's used by users to approve their account connection to the Xsolla account.
           * @example 53LRH2
           */
          linking_code: string
          /**
           * @description Publishing platform the user plays on.
           * @example xbox_live
           * @enum {string}
           */
          platform:
            | 'playstation_network'
            | 'xbox_live'
            | 'xsolla'
            | 'pc_standalone'
            | 'nintendo_shop'
            | 'google_play'
            | 'app_store_ios'
            | 'android_standalone'
            | 'ios_standalone'
            | 'android_other'
            | 'ios_other'
            | 'pc_other'
          /**
           * @description User ID of publishing platform the user plays on.
           * @example platform_user_id
           */
          user_id: string
        }
      }
    }
    responses: {
      /** @description User's game account was successfully connected with the account of Xsolla. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['Player-Inventory_401-invalid-basic-auth']
      /** @description The property `linking_code` is required. Make sure you passed it in your request. */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @example 422 */
            statusCode?: number
            /** @example 1102 */
            errorCode?: number
            /** @example [0401-1102]: Unprocessable Entity. The property publisher_project_id is required */
            errorMessage?: string
          }
        }
      }
    }
  }
  'inventory-account-signin': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /**
           * @description User ID from a publishing platform the user plays on.
           * @example platform_user_id
           */
          user_id: string
          /**
           * @description Publishing platform the user plays on.
           * @example xbox_live
           * @enum {string}
           */
          platform:
            | 'playstation_network'
            | 'xbox_live'
            | 'xsolla'
            | 'pc_standalone'
            | 'nintendo_shop'
            | 'google_play'
            | 'app_store_ios'
            | 'android_standalone'
            | 'ios_standalone'
            | 'android_other'
            | 'ios_other'
            | 'pc_other'
        }
      }
    }
    responses: {
      /** @description User's game account was successfully tokenized. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @example eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE5NjIyMzQwNDgsImlzcyI6Imh0dHBzOi8vbG9naW4ueHNvbGxhLmNvbSIsImlhdCI6MTU2MjE0NzY0OCwidXNlcm5hbWUiOiJ4c29sbGEiLCJ4c29sbGFfbG9naW5fYWNjZXNzX2tleSI6IjA2SWF2ZHpDeEVHbm5aMTlpLUc5TmMxVWFfTWFZOXhTR3ZEVEY4OFE3RnMiLCJzdWIiOiJkMzQyZGFkMi05ZDU5LTExZTktYTM4NC00MjAxMGFhODAwM2YiLCJlbWFpbCI6InN1cHBvcnRAeHNvbGxhLmNvbSIsInR5cGUiOiJ4c29sbGFfbG9naW4iLCJ4c29sbGFfbG9naW5fcHJvamVjdF9pZCI6ImU2ZGZhYWM2LTc4YTgtMTFlOS05MjQ0LTQyMDEwYWE4MDAwNCIsInB1Ymxpc2hlcl9pZCI6MTU5MjR9.GCrW42OguZbLZTaoixCZgAeNLGH2xCeJHxl8u8Xn2aI */
            token?: string
          }
        }
      }
      401: components['responses']['Player-Inventory_401-invalid-basic-auth']
      /** @description The property `user_id` is required. Make sure you passed it in your request. */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @example 422 */
            statusCode?: number
            /** @example 1102 */
            errorCode?: number
            /** @example [0401-1102]: Unprocessable Entity. The property publisher_project_id is required */
            errorMessage?: string
          }
        }
      }
    }
  }
  'get-physical-goods-list': {
    parameters: {
      query?: {
        /**
         * @description Limit for the number of elements on the page.
         * @example 50
         */
        limit?: components['parameters']['limit-query-param']
        /**
         * @description Number of the element from which the list is generated (the count starts from 0).
         * @example 0
         */
        offset?: components['parameters']['offset-query-param']
        /** @description Response language. Two-letter lowercase language code per ISO 639-1. */
        locale?: components['parameters']['locale-query-param']
        /** @description The list of additional fields. These fields will be in the response if you send them in your request. */
        'additional_fields[]'?: components['parameters']['additional_fields-query-param']
        /** @description Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Shows regional prices and restrictions for a catalog if those were specified while creating an item. <div class="note"><b>Note</b><br><br>If you do not specify the country explicitly, it will be set based on user's IP address.</div> */
        country?: components['parameters']['country-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The list of physical items was successfully received. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @example [
             *       {
             *         "sku": "helmet_1",
             *         "name": "Xsolla Helmet",
             *         "groups": [
             *           {
             *             "external_id": "all",
             *             "name": "All Items"
             *           },
             *           {
             *             "external_id": "Xsolla",
             *             "name": "Xsolla Gear"
             *           },
             *           {
             *             "external_id": "equipment",
             *             "name": "Nice Equipment"
             *           },
             *           {
             *             "external_id": "slider",
             *             "name": "Slider"
             *           }
             *         ],
             *         "attributes": [
             *           {
             *             "external_id": "is_virtual_currency_package",
             *             "name": "Is virtual currency package",
             *             "values": [
             *               {
             *                 "external_id": "is_virtual_currency_package_value_f0da35685ca1f4892d44f686a7ce11d8defccb49",
             *                 "value": true
             *               }
             *             ]
             *           },
             *           {
             *             "external_id": "advertisement_type",
             *             "name": "Advertisement type",
             *             "values": [
             *               {
             *                 "external_id": "advertisement_type_value_bbc3c9d78240fae185028873fbf4f3a7a5043a7f",
             *                 "value": "promotion"
             *               }
             *             ]
             *           }
             *         ],
             *         "type": "physical_good",
             *         "description": "Protect your noggin' with style",
             *         "image_url": "https://cdn.xsolla.net/img/misc/images/b79342cdf24f0f8557b63c87e8326e62.png",
             *         "is_free": false,
             *         "price": {
             *           "amount": "2.99",
             *           "amount_without_discount": "2.99",
             *           "currency": "USD"
             *         },
             *         "virtual_prices": [],
             *         "can_be_bought": true,
             *         "is_pre_order": false,
             *         "release_date": null,
             *         "promotions": [],
             *         "limits": null
             *       },
             *       {
             *         "sku": "armor_max_1",
             *         "name": "Xsolla Maximum Armor",
             *         "groups": [
             *           {
             *             "external_id": "all",
             *             "name": "All Items"
             *           },
             *           {
             *             "external_id": "featured",
             *             "name": "Featured"
             *           },
             *           {
             *             "external_id": "Xsolla",
             *             "name": "Xsolla Gear"
             *           },
             *           {
             *             "external_id": "equipment",
             *             "name": "Nice Equipment"
             *           }
             *         ],
             *         "attributes": [
             *           {
             *             "external_id": "is_virtual_currency_package",
             *             "name": "Is virtual currency package",
             *             "values": [
             *               {
             *                 "external_id": "is_virtual_currency_package_value_f0da35685ca1f4892d44f686a7ce11d8defccb49",
             *                 "value": true
             *               }
             *             ]
             *           },
             *           {
             *             "external_id": "advertisement_type",
             *             "name": "Advertisement type",
             *             "values": [
             *               {
             *                 "external_id": "advertisement_type_value_bbc3c9d78240fae185028873fbf4f3a7a5043a7f",
             *                 "value": "promotion"
             *               }
             *             ]
             *           }
             *         ],
             *         "type": "physical_good",
             *         "description": "Suit up with flair showcasing your allegiance to Xsolla",
             *         "image_url": "https://cdn.xsolla.net/img/misc/images/5c3b8b45c5be5fe7803e59fbc8041be4.png",
             *         "is_free": false,
             *         "price": {
             *           "amount": "12.99",
             *           "amount_without_discount": "12.99",
             *           "currency": "USD"
             *         },
             *         "virtual_prices": [],
             *         "can_be_bought": true,
             *         "is_pre_order": true,
             *         "release_date": "2020-08-11T10:00:00+03:00",
             *         "promotions": [],
             *         "limits": null
             *       },
             *       {
             *         "sku": "minigun_1",
             *         "name": "Xsolla Minigun",
             *         "groups": [
             *           {
             *             "external_id": "all",
             *             "name": "All Items"
             *           },
             *           {
             *             "external_id": "Xsolla",
             *             "name": "Xsolla Gear"
             *           },
             *           {
             *             "external_id": "weapons",
             *             "name": "Weapons"
             *           }
             *         ],
             *         "attributes": [
             *           {
             *             "external_id": "advertisement_type",
             *             "name": "Advertisement type",
             *             "values": [
             *               {
             *                 "external_id": "advertisement_type_value_bbc3c9d78240fae185028873fbf4f3a7a5043a7f",
             *                 "value": "promotion"
             *               }
             *             ]
             *           },
             *           {
             *             "external_id": "advertisement_type_custom",
             *             "name": "Advertisement type custom",
             *             "values": [
             *               {
             *                 "external_id": "advertisement_type_custom_value_89fd4ea93777b55a1e4a3ea737ea38d85991897c",
             *                 "value": "promotion_custom"
             *               }
             *             ]
             *           }
             *         ],
             *         "type": "physical_good",
             *         "description": "Just hold down the trigger and pray to Xsolla",
             *         "image_url": "https://cdn.xsolla.net/img/misc/images/2fc5c491a47413a8e8000447889093c2.png",
             *         "is_free": false,
             *         "price": {
             *           "amount": "29.99",
             *           "amount_without_discount": "29.99",
             *           "currency": "USD"
             *         },
             *         "virtual_prices": [],
             *         "can_be_bought": true,
             *         "is_pre_order": false,
             *         "release_date": null,
             *         "promotions": [],
             *         "limits": null
             *       },
             *       {
             *         "sku": "armor_min_1",
             *         "name": "Xsolla Minimum Armor",
             *         "groups": [
             *           {
             *             "external_id": "all",
             *             "name": "All Items"
             *           },
             *           {
             *             "external_id": "Xsolla",
             *             "name": "Xsolla Gear"
             *           },
             *           {
             *             "external_id": "equipment",
             *             "name": "Nice Equipment"
             *           }
             *         ],
             *         "attributes": [],
             *         "type": "physical_good",
             *         "description": "Unless you're a Super Saiyan this doesn't protect you from much at all",
             *         "image_url": "https://cdn.xsolla.net/img/misc/images/bb55c047e2a97f629f4e0971da171db0.png",
             *         "is_free": true,
             *         "price": null,
             *         "virtual_prices": [],
             *         "can_be_bought": true,
             *         "is_pre_order": false,
             *         "release_date": null,
             *         "promotions": [],
             *         "limits": null
             *       }
             *     ] */
            items?: {
              /**
               * @description Unique item ID. The SKU may only contain lowercase Latin alphanumeric characters, periods, dashes, and underscores.
               * @example helmet_1
               */
              sku?: string
              /**
               * @description Item name.
               * @example Xsolla Helmet
               */
              name?: string
              /**
               * @description Groups the item belongs to.
               * @example [
               *       {
               *         "external_id": "all",
               *         "name": "All Items"
               *       },
               *       {
               *         "external_id": "Xsolla",
               *         "name": "Xsolla Gear"
               *       },
               *       {
               *         "external_id": "equipment",
               *         "name": "Nice Equipment"
               *       },
               *       {
               *         "external_id": "slider",
               *         "name": "Slider"
               *       }
               *     ]
               */
              groups?: {
                /** @example accessory */
                external_id?: string
                /** @example Accessory */
                name?: string
              }[]
              attributes?: components['schemas']['Physical-Items_client-attributes']
              /**
               * @description Type of item: `virtual_good`/`virtual_currency`/`bundle`/`physical_good`.
               * @example physical_good
               */
              type?: string
              /**
               * @description Item description.
               * @example Protect your noggin' with style
               */
              description?: string
              /**
               * @description Image URL.
               * @example https://cdn.xsolla.net/img/misc/images/b79342cdf24f0f8557b63c87e8326e62.png
               */
              image_url?: string
              is_free?: components['schemas']['value-is_free']
              /** @description Item prices. */
              price?: {
                /**
                 * @description Discounted item price.
                 * @example 2.9900
                 */
                amount?: string
                /**
                 * @description Item price.
                 * @example 2.9900
                 */
                amount_without_discount?: string
                /**
                 * @description Default purchase currency. Three-letter code per [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
                 * @example USD
                 */
                currency?: string
              }
              /** @description Virtual prices. */
              virtual_prices?: {
                /**
                 * @description Discounted item price in virtual currency.
                 * @example 100
                 */
                amount?: number
                /**
                 * @description Item price.
                 * @example 200
                 */
                amount_without_discount?: number
                /**
                 * @description Virtual currency item SKU.
                 * @example vc_test
                 */
                sku?: string
                /**
                 * @description Whether price is default for item.
                 * @example true
                 */
                is_default?: boolean
                /**
                 * @description Image of virtual currency.
                 * @example http://image.png
                 */
                image_url?: string
                /**
                 * @description Virtual currency name.
                 * @example SHOTGUN FOR TRUE RAIDERS
                 */
                name?: string
                /**
                 * @description Virtual currency type.
                 * @example virtual_currency
                 */
                type?: string
                /**
                 * @description Virtual currency description.
                 * @example Big Rocket - description
                 */
                description?: string
              }[]
              can_be_bought?: components['schemas']['Can_be_bought']
              /** @description Weight of the item. */
              weight?: {
                /**
                 * @description Weight of the item in grams.
                 * @example 874.5
                 */
                grams?: string
                /**
                 * @description Weight of the item in ounces.
                 * @example 3
                 */
                ounces?: string
              }
              /**
               * @description If `true`, the item is a pre-order and the release date hasn't been passed.
               * @example true
               */
              is_pre_order?: boolean
              /**
               * @description Item release date in the ISO 8601 format.
               * @example 2020-08-11T10:00:00+03:00
               */
              release_date?: string
              promotions?: components['schemas']['Catalog_item_promotions']
              limits?: components['schemas']['Catalog_item_limits']
            }[]
          }
        }
      }
    }
  }
  'admin-get-physical-item-list': {
    parameters: {
      query?: {
        /**
         * @description Limit for the number of elements on the page.
         * @example 50
         */
        limit?: components['parameters']['limit-query-param']
        /**
         * @description Number of the element from which the list is generated (the count starts from 0).
         * @example 0
         */
        offset?: components['parameters']['offset-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Physical-Items_200-admin-get-physical-item-list']
      401: components['responses']['Physical-Items_401-invalid-basic-auth']
    }
  }
  'admin-create-physical-item': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody: components['requestBodies']['Physical-Items_create-update-physical-good-model']
    responses: {
      /** @description Physical item was successfully created. */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @example 101 */
            item_id?: number
            /** @example physical_good_1 */
            sku?: string
            /** @example 201 */
            statusCode?: number
            /** @example Physical item was successfully created. */
            message?: string
          }
        }
      }
      401: components['responses']['Physical-Items_401-invalid-basic-auth']
      422: components['responses']['Physical-Items_422-invalid-request']
    }
  }
  'admin-get-physical-item-by-sku': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: components['parameters']['item_sku-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Physical-Items_200-admin-get-physical-item']
    }
  }
  'admin-update-physical-item-by-sku': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: components['parameters']['item_sku-path-param']
      }
      cookie?: never
    }
    requestBody: components['requestBodies']['Physical-Items_patch-physical-good-model']
    responses: {
      200: components['responses']['Physical-Items_204-admin-update-physical-item']
      404: components['responses']['Physical-Items_404-admin-physical-item']
      422: components['responses']['Physical-Items_422-invalid-request']
    }
  }
  'delete-physical-item': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: components['parameters']['item_sku-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Physical-Items_204-admin-delete-physical-item']
    }
  }
  'admin-patch-physical-item-by-sku': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: components['parameters']['item_sku-path-param']
      }
      cookie?: never
    }
    requestBody: components['requestBodies']['Physical-Items_patch-physical-good-model']
    responses: {
      200: components['responses']['Physical-Items_204-admin-update-physical-item']
      404: components['responses']['Physical-Items_404-admin-physical-item']
      422: components['responses']['Physical-Items_422-invalid-request']
    }
  }
  'admin-get-physical-item-by-id': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item ID. */
        item_id: components['parameters']['item_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Physical-Items_200-admin-get-physical-item']
    }
  }
  'admin-update-physical-item-by-id': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item ID. */
        item_id: components['parameters']['item_id-path-param']
      }
      cookie?: never
    }
    requestBody: components['requestBodies']['Physical-Items_create-update-physical-good-model']
    responses: {
      200: components['responses']['Physical-Items_204-admin-update-physical-item']
      404: components['responses']['Physical-Items_404-admin-physical-item']
      422: components['responses']['Physical-Items_422-invalid-request']
    }
  }
  'delete-physical-item-by-id': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item ID. */
        item_id: components['parameters']['item_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Physical-Items_204-admin-delete-physical-item']
    }
  }
  'admin-patch-physical-item-by-id': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item ID. */
        item_id: components['parameters']['item_id-path-param']
      }
      cookie?: never
    }
    requestBody: components['requestBodies']['Physical-Items_patch-physical-good-model']
    responses: {
      200: components['responses']['Physical-Items_204-admin-update-physical-item']
      404: components['responses']['Physical-Items_404-admin-physical-item']
      422: components['responses']['Physical-Items_422-invalid-request']
    }
  }
  'admin-get-delivery-method': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful retrieval. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            delivery_methods?: {
              /** @description Delivery method internal ID. */
              id?: number
              /** @description Project ID. */
              project_id?: number
              /** @description Delivery method code. */
              code?: string
              /** @description Name that will be displayed to user for this method. */
              name?: string
              /** @description Delivery method description. */
              description?: string
              /** @description Whether to display or hide this method. */
              is_enabled?: boolean
              /** @description Estimated minimum time for delivery. */
              delivery_days_from?: number
              /** @description Estimated maximum time for delivery. */
              delivery_days_to?: number
            }[]
          }
        }
      }
    }
  }
  'admin-create-delivery-method': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        /** @example {
         *       "code": "express",
         *       "name": "Express Delivery",
         *       "description": null,
         *       "is_enabled": true,
         *       "delivery_days_from": 1,
         *       "delivery_days_to": 7
         *     } */
        'application/json': {
          /** @description Delivery method code. */
          code: string
          /** @description Name that will be displayed to user for this method. */
          name: string
          /** @description Delivery method description. */
          description?: string
          /** @description Whether to display or hide this method. */
          is_enabled?: boolean
          /** @description Estimated minimum time for delivery. */
          delivery_days_from?: number
          /** @description Estimated maximum time for delivery. */
          delivery_days_to?: number
        }[]
      }
    }
    responses: {
      /** @description Successful operation. */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Delivery method code. */
            code?: string
            /** @description Delivery method internal ID. */
            id?: number
          }
        }
      }
      /** @description Incorrect request body or duplicate method (Delivery code in use). */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'admin-get-delivery-method-method-code': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Delivery method code. */
        code: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful retrieval. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Delivery method internal ID. */
            id?: number
            /** @description Project ID. */
            project_id?: number
            /** @description Delivery method code. */
            code?: string
            /** @description Name that will be displayed to user for this method. */
            name?: string
            /** @description Delivery method description. */
            description?: string
            /** @description Whether to display or hide this method. */
            is_enabled?: boolean
            /** @description Estimated minimum time for delivery. */
            delivery_days_from?: number
            /** @description Estimated maximum time for delivery. */
            delivery_days_to?: number
          }
        }
      }
      /** @description Delivery method not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'admin-update-delivery-method-method-code': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Delivery method code. */
        code: string
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        /** @example {
         *       "code": "express",
         *       "name": "Express Delivery",
         *       "description": null,
         *       "is_enabled": true,
         *       "delivery_days_from": 1,
         *       "delivery_days_to": 7
         *     } */
        'application/json': {
          /** @description Delivery method code. */
          code: string
          /** @description Name that will be displayed to user for this method. */
          name: string
          /** @description Delivery method description. */
          description?: string
          /** @description Whether to display or hide this method. */
          is_enabled?: boolean
          /** @description Estimated minimum time for delivery. */
          delivery_days_from?: number
          /** @description Estimated maximum time for delivery. */
          delivery_days_to?: number
        }[]
      }
    }
    responses: {
      /** @description Successful operation. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Delivery method not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Incorrect request body or duplicate method (Delivery code in use). */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'admin-delete-delivery-method-method-code': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Delivery method code. */
        code: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful operation. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'admin-get-delivery-method-price-item-sku': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful retrieval. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            prices?: {
              /** @description Item internal ID. */
              item_id?: number
              /** @description Item SKU. */
              item_sku?: string
              /** @description Delivery price. */
              amount?: string
              /** @description Currency. Three-letter code per [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217). */
              currency?: string
              /** @description Delivery method internal ID. */
              method_id?: number
              /** @description Delivery method code. */
              method_code?: string
            }[]
          }
        }
      }
      /** @description Item not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'admin-replace-delivery-method-price-item-sku': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: string
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        /** @example [
         *       {
         *         "amount": 3999,
         *         "currency": "RUB",
         *         "method_id": 101
         *       },
         *       {
         *         "amount": 1999,
         *         "currency": "RUB",
         *         "method_code": "express"
         *       }
         *     ] */
        'application/json': (
          | {
              /** @description Delivery price. */
              amount: string
              /** @description Currency. Three-letter code per [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217). */
              currency: string
              /** @description Delivery method internal ID. */
              method_id: number
            }
          | {
              /** @description Delivery price. */
              amount: string
              /** @description Currency. Three-letter code per [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217). */
              currency: string
              /** @description Delivery method code. */
              method_code: string
            }
        )[]
      }
    }
    responses: {
      /** @description Successful operation. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Delivery method not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Incorrect request body or duplicate prices (Same `item_id`, `method_id` and `currency`). */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'admin-add-delivery-method-price-item-sku': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: string
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        /** @example [
         *       {
         *         "amount": 3999,
         *         "currency": "RUB",
         *         "method_id": 101
         *       },
         *       {
         *         "amount": 1999,
         *         "currency": "RUB",
         *         "method_code": "express"
         *       }
         *     ] */
        'application/json': (
          | {
              /** @description Delivery price. */
              amount: string
              /** @description Currency. Three-letter code per [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217). */
              currency: string
              /** @description Delivery method internal ID. */
              method_id: number
            }
          | {
              /** @description Delivery price. */
              amount: string
              /** @description Currency. Three-letter code per [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217). */
              currency: string
              /** @description Delivery method code. */
              method_code: string
            }
        )[]
      }
    }
    responses: {
      /** @description Successful operation. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Delivery method not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Incorrect request body or duplicate prices (Same `item_id`, `method_id` and `currency`). */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'admin-delete-delivery-method-price-item-sku': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: string
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        /** @example [
         *       {
         *         "currency": "RUB",
         *         "method_id": 101
         *       },
         *       {
         *         "currency": "RUB",
         *         "method_code": "express"
         *       }
         *     ] */
        'application/json': (
          | {
              /** @description Currency. Three-letter code per [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217). */
              currency: string
              /** @description Delivery method internal ID. */
              method_id: number
            }
          | {
              /** @description Currency. Three-letter code per [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217). */
              currency: string
              /** @description Delivery method code. */
              method_code: string
            }
        )[]
      }
    }
    responses: {
      /** @description Successful removal. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Delivery method not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Incorrect request body. */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'get-promotion-list': {
    parameters: {
      query?: {
        /**
         * @description Limit for the number of elements on the page.
         * @example 50
         */
        limit?: components['parameters']['limit-query-param']
        /**
         * @description Number of the element from which the list is generated (the count starts from 0).
         * @example 0
         */
        offset?: components['parameters']['offset-query-param']
        /** @description Filter elements by `is_enabled` flag. */
        enabled?: components['parameters']['enabled-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Promotions_200-get-promotions']
      401: components['responses']['Promotions_401-invalid-basic-auth']
    }
  }
  'activate-promotion': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Promotion ID. Unique promotion identifier within the project. */
        promotion_id: components['parameters']['promotion_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Promotion was successfully activated. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['Promotions_401-invalid-basic-auth']
      422: components['responses']['Promotions_422-activate-deactivate-promotion']
    }
  }
  'deactivate-promotion': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Promotion ID. Unique promotion identifier within the project. */
        promotion_id: components['parameters']['promotion_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Promotion was successfully deactivated. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['Promotions_401-invalid-basic-auth']
      422: components['responses']['Promotions_422-activate-deactivate-promotion']
    }
  }
  'get-redeemable-promotion-by-code': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Unique case-sensitive code. Contains letters and numbers. */
        code: components['parameters']['code-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['200-admin-get-redeemable-by-code']
      401: components['responses']['401-invalid-basic-auth']
      404: components['responses']['404-code-not-found']
      405: components['responses']['405-method-not-found']
    }
  }
  'redeem-coupon': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['Promotions_redeem-coupon-model']
    responses: {
      200: components['responses']['Promotions_200-coupon-redeemed']
      401: components['responses']['Promotions_401-invalid-client-auth']
      403: components['responses']['Promotions_403-auth-header']
      404: components['responses']['Promotions_404-coupon']
      422: components['responses']['Promotions_422-redeem-coupon']
    }
  }
  'get-coupon-rewards-by-code': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Unique case sensitive code. Contains letters and numbers. */
        coupon_code: components['parameters']['coupon_code-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Promotions_200-coupon-rewards']
      401: components['responses']['Promotions_401-invalid-client-auth']
      403: components['responses']['Promotions_403-auth-header']
      404: components['responses']['Promotions_404-coupon']
      422: components['responses']['Promotions_422-rewards']
    }
  }
  'get-coupons': {
    parameters: {
      query?: {
        /**
         * @description Limit for the number of elements on the page.
         * @example 50
         */
        limit?: components['parameters']['limit-query-param']
        /**
         * @description Number of the element from which the list is generated (the count starts from 0).
         * @example 0
         */
        offset?: components['parameters']['offset-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Promotions_200-get-coupons']
      401: components['responses']['Promotions_401-invalid-basic-auth']
    }
  }
  'admin-create-coupon': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['Promotions_coupon-create']
    responses: {
      /** @description Coupon was successfully created. */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            external_id?: components['schemas']['Promotions_coupon-external_id']
          }
        }
      }
      401: components['responses']['Promotions_401-invalid-basic-auth']
      422: components['responses']['Promotions_422-invalid-coupon']
    }
  }
  'get-coupon': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Promotion external ID. Unique promotion identifier within the project. */
        external_id: components['parameters']['external_id-promotion-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Coupon was successfully received. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Promotions_200-get-coupon-promotion-model-2']
        }
      }
      401: components['responses']['Promotions_401-invalid-basic-auth']
      404: components['responses']['Promotions_404-admin-coupon']
    }
  }
  'update-coupon-promotion': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Promotion external ID. Unique promotion identifier within the project. */
        external_id: components['parameters']['external_id-promotion-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['Promotions_coupon-update']
    responses: {
      /** @description Coupon was successfully updated. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['Promotions_401-invalid-basic-auth']
      404: components['responses']['Promotions_404-admin-coupon']
      422: components['responses']['Promotions_422-invalid-coupon']
    }
  }
  'activate-coupon': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Promotion external ID. Unique promotion identifier within the project. */
        external_id: components['parameters']['external_id-promotion-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Coupon was successfully activated. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['Promotions_401-invalid-basic-auth']
      404: components['responses']['Promotions_404-admin-coupon']
      422: components['responses']['Promotions_422-admin-promotion-error']
    }
  }
  'deactivate-coupon': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Promotion external ID. Unique promotion identifier within the project. */
        external_id: components['parameters']['external_id-promotion-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Coupon was successfully deactivated. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['Promotions_401-invalid-basic-auth']
      404: components['responses']['Promotions_404-admin-coupon']
      422: components['responses']['Promotions_422-admin-promotion-error']
    }
  }
  'get-coupon-codes': {
    parameters: {
      query?: {
        /**
         * @description Limit for the number of elements on the page.
         * @example 50
         */
        limit?: components['parameters']['limit-query-param']
        /**
         * @description Number of the element from which the list is generated (the count starts from 0).
         * @example 0
         */
        offset?: components['parameters']['offset-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Promotion external ID. Unique promotion identifier within the project. */
        external_id: components['parameters']['external_id-promotion-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Promotions_200-coupon-code-list']
      401: components['responses']['Promotions_401-invalid-basic-auth']
      404: components['responses']['Promotions_404-admin-coupon']
    }
  }
  'create-coupon-code': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Promotion external ID. Unique promotion identifier within the project. */
        external_id: components['parameters']['external_id-promotion-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['Promotions_create-coupon-promocode-code']
    responses: {
      201: components['responses']['Promotions_201-coupon-promocode-code-created']
      401: components['responses']['Promotions_401-invalid-basic-auth']
      404: components['responses']['Promotions_404-admin-coupon']
      422: components['responses']['Promotions_422-coupon-promocode-same-code-exists']
    }
  }
  'generate-coupon-codes': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Promotion external ID. Unique promotion identifier within the project. */
        external_id: components['parameters']['external_id-promotion-path-param']
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': {
          count: components['schemas']['Promotions_coupon-generate-count']
        }
      }
    }
    responses: {
      /** @description Codes were successfully generated. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            count?: components['schemas']['Promotions_coupon-generate-count']
          }
        }
      }
      401: components['responses']['Promotions_401-invalid-basic-auth']
      404: components['responses']['Promotions_404-admin-promocode']
    }
  }
  'redeem-promo-code': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['Promotions_redeem-promo-code-model']
    responses: {
      200: components['responses']['Promotions_200-promo-code-redeemed']
      401: components['responses']['Promotions_401-invalid-client-auth']
      403: components['responses']['Promotions_403-auth-header']
      404: components['responses']['Promotions_404-promo-code']
      422: components['responses']['Promotions_422-redeem-coupon']
    }
  }
  'remove-cart-promo-code': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['Promotions_cancel-promo-code-model']
    responses: {
      200: components['responses']['Promotions_200-promo-code-canceled']
      401: components['responses']['Promotions_401-invalid-client-auth']
      403: components['responses']['Promotions_403-auth-header']
      422: components['responses']['Promotions_422-cancel-promo-code']
    }
  }
  'get-promo-code-rewards-by-code': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Unique case sensitive code. Contains letters and numbers. */
        promocode_code: components['parameters']['promocode_code-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Promotions_200-promocode-rewards']
      401: components['responses']['Promotions_401-invalid-client-auth']
      403: components['responses']['Promotions_403-auth-header']
      404: components['responses']['Promotions_404-promo-code']
      422: components['responses']['Promotions_422-rewards']
    }
  }
  'get-promo-codes': {
    parameters: {
      query?: {
        /**
         * @description Limit for the number of elements on the page.
         * @example 50
         */
        limit?: components['parameters']['limit-query-param']
        /**
         * @description Number of the element from which the list is generated (the count starts from 0).
         * @example 0
         */
        offset?: components['parameters']['offset-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Promotions_200-get-promocodes']
      401: components['responses']['Promotions_401-invalid-basic-auth']
    }
  }
  'create-promo-code': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['Promotions_promocode-create']
    responses: {
      /** @description Promo code was successfully created. */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            external_id?: components['schemas']['Promotions_coupon-external_id']
          }
        }
      }
      401: components['responses']['Promotions_401-invalid-basic-auth']
      422: components['responses']['Promotions_422-invalid-coupon']
    }
  }
  'get-promo-code': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Promotion external ID. Unique promotion identifier within the project. */
        external_id: components['parameters']['external_id-promotion-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Promo code was successfully received. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Promotions_200-get-promocode-promotion-model']
        }
      }
      401: components['responses']['Promotions_401-invalid-basic-auth']
      404: components['responses']['Promotions_404-admin-promocode']
    }
  }
  'update-promo-code': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Promotion external ID. Unique promotion identifier within the project. */
        external_id: components['parameters']['external_id-promotion-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['Promotions_promocode-update']
    responses: {
      /** @description Promo code was successfully updated. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['Promotions_401-invalid-basic-auth']
      404: components['responses']['Promotions_404-admin-promocode']
      422: components['responses']['Promotions_422-invalid-coupon']
    }
  }
  'activate-promo-code': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Promotion external ID. Unique promotion identifier within the project. */
        external_id: components['parameters']['external_id-promotion-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Promo code was successfully activated. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['Promotions_401-invalid-basic-auth']
      404: components['responses']['Promotions_404-admin-promocode']
      422: components['responses']['Promotions_422-admin-promotion-error']
    }
  }
  'deactivate-promo-code': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Promotion external ID. Unique promotion identifier within the project. */
        external_id: components['parameters']['external_id-promotion-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Coupon was successfully deactivated. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['Promotions_401-invalid-basic-auth']
      404: components['responses']['Promotions_404-admin-promocode']
      422: components['responses']['Promotions_422-admin-promotion-error']
    }
  }
  'get-promocode-codes': {
    parameters: {
      query?: {
        /**
         * @description Limit for the number of elements on the page.
         * @example 50
         */
        limit?: components['parameters']['limit-query-param']
        /**
         * @description Number of the element from which the list is generated (the count starts from 0).
         * @example 0
         */
        offset?: components['parameters']['offset-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Promotion external ID. Unique promotion identifier within the project. */
        external_id: components['parameters']['external_id-promotion-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Promotions_200-promocode-code-list']
      401: components['responses']['Promotions_401-invalid-basic-auth']
      404: components['responses']['Promotions_404-admin-promocode']
    }
  }
  'create-promo-code-code': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Promotion external ID. Unique promotion identifier within the project. */
        external_id: components['parameters']['external_id-promotion-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['Promotions_create-coupon-promocode-code']
    responses: {
      201: components['responses']['Promotions_201-coupon-promocode-code-created']
      401: components['responses']['Promotions_401-invalid-basic-auth']
      404: components['responses']['Promotions_404-admin-promocode']
      422: components['responses']['Promotions_422-coupon-promocode-same-code-exists']
    }
  }
  'generate-promo-code-codes': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Promotion external ID. Unique promotion identifier within the project. */
        external_id: components['parameters']['external_id-promotion-path-param']
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': {
          count: components['schemas']['Promotions_coupon-generate-count']
        }
      }
    }
    responses: {
      /** @description Codes were successfully generated. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            count?: components['schemas']['Promotions_coupon-generate-count']
          }
        }
      }
      401: components['responses']['Promotions_401-invalid-basic-auth']
      404: components['responses']['Promotions_404-admin-promocode']
    }
  }
  'get-item-promotion-list': {
    parameters: {
      query?: {
        /** @description Limit for the number of elements on the page. */
        limit?: number
        /** @description Number of the element from which the list is generated (the count starts from 0). */
        offset?: number
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description List of item promotions was successfully received. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            promotions?: {
              /** @description Promotion ID. Unique promotion identifier within the project. */
              id?: number
              /**
               * Format: date-time
               * @description Date when your promotion will be started.
               * @default 2020-04-15T18:16:00+05:00
               */
              date_start: string | null
              /**
               * Format: date-time
               * @description Date when your promotion will be finished. Can be `null`.
               * @default 2020-04-15T18:16:00+05:00
               */
              date_end: string | null
              /** @default true */
              is_enabled: boolean
              /**
               * @description Name of promotion. Should contain key/value pairs,
               *     where key is locale with format "^[a-z]{2}-[A-Z]{2}$", value is string.
               *
               * @example {
               *       "en-US": "Promotion",
               *       "ru-RU": "Акция"
               *     }
               */
              name?: {
                [key: string]: string | undefined
              }
              discount?: {
                /**
                 * @description Percent discount.
                 *     The price of item will be decreased using a value which was calculated using this percent.
                 * @default 10.00
                 */
                percent: string | null
              }
              items?:
                | {
                    /**
                     * @description Item SKU.
                     * @default elven_sword
                     */
                    sku: string | null
                  }[]
                | null
              attribute_conditions?:
                | components['schemas']['user-attribute_conditions-string']
                | components['schemas']['user-attribute_conditions-date']
                | components['schemas']['user-attribute_conditions-number']
              limits?: components['schemas']['Promotions_promotion_limits_response']
            }[]
          }
        }
      }
      401: components['responses']['Promotions_401-invalid-basic-auth']
    }
  }
  'create-item-promotion': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody: components['requestBodies']['Promotions_create-update-item-promotion']
    responses: {
      201: components['responses']['Promotions_201-create-promotion']
      401: components['responses']['Promotions_401-invalid-basic-auth']
      422: components['responses']['Promotions_422-admin-promotion-missed-items-property']
    }
  }
  'get-item-promotion': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Promotion ID. Unique promotion identifier within the project. */
        promotion_id: components['parameters']['promotion_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Item promotion was successfully received. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Promotion ID. Unique promotion identifier within the project. */
            id?: number
            /**
             * Format: date-time
             * @description Date when your promotion will be started.
             * @default 2020-04-15T18:16:00+05:00
             */
            date_start: string | null
            /**
             * Format: date-time
             * @description Date when your promotion will be finished. Can be `null`.
             * @default 2020-04-15T18:16:00+05:00
             */
            date_end: string | null
            /** @default true */
            is_enabled: boolean
            /** @description Name of promotion. Should contain key/value pairs,
             *     where key is locale with format "^[a-z]{2}-[A-Z]{2}$", value is string.
             *      */
            name?: {
              [key: string]: string | undefined
            }
            discount?: {
              /**
               * @description Percent discount.
               *     The price of item will be decreased using a value which was calculated using this percent.
               * @default 10.00
               */
              percent: string | null
            }
            items?:
              | {
                  /**
                   * @description Item SKU.
                   * @default elven_sword
                   */
                  sku: string
                }[]
              | null
            attribute_conditions?:
              | components['schemas']['user-attribute_conditions-string']
              | components['schemas']['user-attribute_conditions-date']
              | components['schemas']['user-attribute_conditions-number']
            limits?: components['schemas']['Promotions_promotion_limits_response']
          }
        }
      }
      401: components['responses']['Promotions_401-invalid-basic-auth']
      /** @description Promotion not found. Make sure `promotion_id` is correct. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @example 404 */
            statusCode?: number
            /** @example 9502 */
            errorCode?: number
            /** @example [0401-9502]: Can not find promotion with ID = 111425 in project 59080 */
            errorMessage?: string
          }
        }
      }
    }
  }
  'update-item-promotion': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Promotion ID. Unique promotion identifier within the project. */
        promotion_id: components['parameters']['promotion_id-path-param']
      }
      cookie?: never
    }
    requestBody: components['requestBodies']['Promotions_create-update-item-promotion']
    responses: {
      /** @description Promotion was successfully updated. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['Promotions_401-invalid-basic-auth']
      404: components['responses']['Promotions_404-admin-promotion']
      422: components['responses']['Promotions_422-admin-promotion-missed-items-property']
    }
  }
  'get-bonus-promotion-list': {
    parameters: {
      query?: {
        /**
         * @description Limit for the number of elements on the page.
         * @example 50
         */
        limit?: components['parameters']['limit-query-param']
        /**
         * @description Number of the element from which the list is generated (the count starts from 0).
         * @example 0
         */
        offset?: components['parameters']['offset-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description List of bonus promotions was successfully received. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            promotions?: components['schemas']['Promotions_200-get-bonus-promotion-model'][]
          }
        }
      }
      401: components['responses']['Promotions_401-invalid-basic-auth']
    }
  }
  'create-bonus-promotion': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['Promotions_create-update-bonus-promotion']
    responses: {
      201: components['responses']['Promotions_201-create-promotion']
      401: components['responses']['Promotions_401-invalid-basic-auth']
      422: components['responses']['Promotions_422-admin-promotion-missed-bonus-property']
    }
  }
  'get-bonus-promotion': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Promotion ID. Unique promotion identifier within the project. */
        promotion_id: components['parameters']['promotion_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Promotions_200-admin-get-bonus-promotion']
      401: components['responses']['Promotions_401-invalid-basic-auth']
      404: components['responses']['Promotions_404-admin-promotion']
    }
  }
  'update-bonus-promotion': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Promotion ID. Unique promotion identifier within the project. */
        promotion_id: components['parameters']['promotion_id-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['Promotions_create-update-bonus-promotion']
    responses: {
      /** @description Promotion was successfully updated. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['Promotions_401-invalid-basic-auth']
      422: components['responses']['Promotions_422-admin-promotion-missed-bonus-property']
    }
  }
  'verify-promotion-code': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Unique case-sensitive code. Contains letters and numbers. */
        code: components['parameters']['code-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Promotions_200-verify-promo-code']
      401: components['responses']['Promotions_401-invalid-client-auth']
      403: components['responses']['Promotions_403-auth-header']
      404: components['responses']['Promotions_404-verify-promo-code']
      422: components['responses']['Promotions_422-verify-promo-code']
    }
  }
  'admin-get-virtual-items-list': {
    parameters: {
      query?: {
        /**
         * @description Limit for the number of elements on the page.
         * @example 50
         */
        limit?: components['parameters']['limit-query-param']
        /**
         * @description Number of the element from which the list is generated (the count starts from 0).
         * @example 0
         */
        offset?: components['parameters']['offset-query-param']
        /** @description Unique case sensitive code. Contains letters and numbers. */
        promo_code?: components['parameters']['promo_code-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Virtual-Items-Currency_200-admin-get-virtual-items']
      401: components['responses']['Virtual-Items-Currency_401-invalid-basic-auth']
    }
  }
  'admin-create-virtual-item': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['Virtual-Items-Currency_admin-create-virtual-item']
    responses: {
      201: components['responses']['Virtual-Items-Currency_201-created']
      422: components['responses']['Virtual-Items-Currency_422-invalid-request']
    }
  }
  'admin-get-virtual-items-list-by-group-external-id': {
    parameters: {
      query?: {
        /**
         * @description Limit for the number of elements on the page.
         * @example 50
         */
        limit?: components['parameters']['limit-query-param']
        /**
         * @description Number of the element from which the list is generated (the count starts from 0).
         * @example 0
         */
        offset?: components['parameters']['offset-query-param']
        /** @description Unique case sensitive code. Contains letters and numbers. */
        promo_code?: components['parameters']['promo_code-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Group external ID. */
        external_id: components['parameters']['external_id-group-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Virtual-Items-Currency_200-admin-get-virtual-items-by-group']
      401: components['responses']['Virtual-Items-Currency_401-invalid-basic-auth']
    }
  }
  'admin-get-virtual-items-list-by-group-id': {
    parameters: {
      query?: {
        /**
         * @description Limit for the number of elements on the page.
         * @example 50
         */
        limit?: components['parameters']['limit-query-param']
        /**
         * @description Number of the element from which the list is generated (the count starts from 0).
         * @example 0
         */
        offset?: components['parameters']['offset-query-param']
        /** @description Unique case sensitive code. Contains letters and numbers. */
        promo_code?: components['parameters']['promo_code-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Group ID. */
        group_id: components['parameters']['group_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Virtual-Items-Currency_200-admin-get-virtual-items-by-group']
      401: components['responses']['Virtual-Items-Currency_401-invalid-basic-auth']
    }
  }
  'admin-get-virtual-item': {
    parameters: {
      query?: {
        /** @description Unique case sensitive code. Contains letters and numbers. */
        promo_code?: components['parameters']['promo_code-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: components['parameters']['item_sku-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Virtual-Items-Currency_200-admin-get-item']
      401: components['responses']['Virtual-Items-Currency_401-invalid-basic-auth']
    }
  }
  'admin-update-virtual-item': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: components['parameters']['item_sku-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['Virtual-Items-Currency_admin-create-virtual-item']
    responses: {
      /** @description Virtual item was successfully updated. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['Virtual-Items-Currency_401-invalid-basic-auth']
      422: components['responses']['Virtual-Items-Currency_422-invalid-request']
    }
  }
  'admin-delete-virtual-item': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: components['parameters']['item_sku-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Virtual item was successfully deleted. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['Virtual-Items-Currency_401-invalid-basic-auth']
    }
  }
  'admin-get-virtual-currencies-list': {
    parameters: {
      query?: {
        /**
         * @description Limit for the number of elements on the page.
         * @example 50
         */
        limit?: components['parameters']['limit-query-param']
        /**
         * @description Number of the element from which the list is generated (the count starts from 0).
         * @example 0
         */
        offset?: components['parameters']['offset-query-param']
        /** @description Unique case sensitive code. Contains letters and numbers. */
        promo_code?: components['parameters']['promo_code-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Virtual-Items-Currency_200-admin-get-virtual-currencies']
      401: components['responses']['Virtual-Items-Currency_401-invalid-basic-auth']
    }
  }
  'admin-create-virtual-currency': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['Virtual-Items-Currency_admin-create-virtual-currency']
    responses: {
      201: components['responses']['Virtual-Items-Currency_201-created']
      422: components['responses']['Virtual-Items-Currency_422-invalid-request']
    }
  }
  'admin-get-virtual-currency': {
    parameters: {
      query?: {
        /** @description Unique case sensitive code. Contains letters and numbers. */
        promo_code?: components['parameters']['promo_code-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Virtual currency SKU. */
        virtual_currency_sku: components['parameters']['virtual_currency_sku-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Virtual-Items-Currency_200-admin-get-virtual-currency']
      401: components['responses']['Virtual-Items-Currency_401-invalid-basic-auth']
      404: components['responses']['Virtual-Items-Currency_404-item']
    }
  }
  'admin-update-virtual-currency': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Virtual currency SKU. */
        virtual_currency_sku: components['parameters']['virtual_currency_sku-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['Virtual-Items-Currency_admin-create-virtual-currency']
    responses: {
      /** @description Virtual currency was successfully updated. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['Virtual-Items-Currency_401-invalid-basic-auth']
      422: components['responses']['Virtual-Items-Currency_422-invalid-request']
    }
  }
  'admin-delete-virtual-currency': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Virtual currency SKU. */
        virtual_currency_sku: components['parameters']['virtual_currency_sku-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Virtual currency was successfully deleted. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['Virtual-Items-Currency_401-invalid-basic-auth']
    }
  }
  'admin-get-virtual-currency-packages-list': {
    parameters: {
      query?: {
        /**
         * @description Limit for the number of elements on the page.
         * @example 50
         */
        limit?: components['parameters']['limit-query-param']
        /**
         * @description Number of the element from which the list is generated (the count starts from 0).
         * @example 0
         */
        offset?: components['parameters']['offset-query-param']
        /** @description Unique case sensitive code. Contains letters and numbers. */
        promo_code?: components['parameters']['promo_code-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Virtual-Items-Currency_200-admin-get-virtual-currency-packages']
      401: components['responses']['Virtual-Items-Currency_401-invalid-basic-auth']
    }
  }
  'admin-create-virtual-currency-package': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['Virtual-Items-Currency_admin-create-virtual-currency-package']
    responses: {
      201: components['responses']['Virtual-Items-Currency_201-created']
      401: components['responses']['Virtual-Items-Currency_401-invalid-basic-auth']
      422: components['responses']['Virtual-Items-Currency_422-invalid-request']
    }
  }
  'admin-get-virtual-currency-package': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: components['parameters']['item_sku-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Virtual-Items-Currency_200-admin-get-virtual-currency-package']
      401: components['responses']['Virtual-Items-Currency_401-invalid-basic-auth']
    }
  }
  'admin-update-virtual-currency-package': {
    parameters: {
      query?: {
        /** @description Unique case sensitive code. Contains letters and numbers. */
        promo_code?: components['parameters']['promo_code-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: components['parameters']['item_sku-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['Virtual-Items-Currency_admin-create-virtual-currency-package']
    responses: {
      /** @description Virtual item was successfully updated. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['Virtual-Items-Currency_401-invalid-basic-auth']
      422: components['responses']['Virtual-Items-Currency_422-invalid-request']
    }
  }
  'admin-delete-virtual-currency-package': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: components['parameters']['item_sku-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Virtual currency package was successfully updated. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['Virtual-Items-Currency_401-invalid-basic-auth']
    }
  }
  'get-virtual-items': {
    parameters: {
      query?: {
        /**
         * @description Limit for the number of elements on the page.
         * @example 50
         */
        limit?: components['parameters']['limit-query-param']
        /**
         * @description Number of the element from which the list is generated (the count starts from 0).
         * @example 0
         */
        offset?: components['parameters']['offset-query-param']
        /** @description Response language. Two-letter lowercase language code per ISO 639-1. */
        locale?: components['parameters']['locale-query-param']
        /** @description The list of additional fields. These fields will be in the response if you send them in your request. */
        'additional_fields[]'?: components['parameters']['additional_fields-query-param']
        /** @description Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Shows regional prices and restrictions for a catalog if those were specified while creating an item. <div class="note"><b>Note</b><br><br>If you do not specify the country explicitly, it will be set based on user's IP address.</div> */
        country?: components['parameters']['country-query-param']
        /** @description Unique case sensitive code. Contains letters and numbers. */
        promo_code?: components['parameters']['promo_code-query-param']
        /** @description Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. */
        show_inactive_time_limited_items?: components['parameters']['show_inactive_time_limited_items-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Virtual-Items-Currency_200-get-items-list']
    }
  }
  'get-virtual-items-sku': {
    parameters: {
      query?: {
        /** @description Response language. Two-letter lowercase language code per ISO 639-1. */
        locale?: components['parameters']['locale-query-param']
        /** @description Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Shows regional prices and restrictions for a catalog if those were specified while creating an item. <div class="note"><b>Note</b><br><br>If you do not specify the country explicitly, it will be set based on user's IP address.</div> */
        country?: components['parameters']['country-query-param']
        /** @description Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. */
        show_inactive_time_limited_items?: components['parameters']['show_inactive_time_limited_items-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: components['parameters']['item_sku-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Virtual-Items-Currency_200-get-item-by-sku']
      404: components['responses']['Virtual-Items-Currency_404-item']
    }
  }
  'get-all-virtual-items': {
    parameters: {
      query?: {
        /** @description Response language. Two-letter lowercase language code per ISO 639-1. */
        locale?: components['parameters']['locale-query-param']
        /** @description Unique case sensitive code. Contains letters and numbers. */
        promo_code?: components['parameters']['promo_code-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Virtual-Items-Currency_200-get-all-items-list']
    }
  }
  'get-virtual-currency': {
    parameters: {
      query?: {
        /**
         * @description Limit for the number of elements on the page.
         * @example 50
         */
        limit?: components['parameters']['limit-query-param']
        /**
         * @description Number of the element from which the list is generated (the count starts from 0).
         * @example 0
         */
        offset?: components['parameters']['offset-query-param']
        /** @description Response language. Two-letter lowercase language code per ISO 639-1. */
        locale?: components['parameters']['locale-query-param']
        /** @description The list of additional fields. These fields will be in the response if you send them in your request. */
        'additional_fields[]'?: components['parameters']['additional_fields-query-param']
        /** @description Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Shows regional prices and restrictions for a catalog if those were specified while creating an item. <div class="note"><b>Note</b><br><br>If you do not specify the country explicitly, it will be set based on user's IP address.</div> */
        country?: components['parameters']['country-query-param']
        /** @description Unique case sensitive code. Contains letters and numbers. */
        promo_code?: components['parameters']['promo_code-query-param']
        /** @description Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. */
        show_inactive_time_limited_items?: components['parameters']['show_inactive_time_limited_items-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Virtual-Items-Currency_200-get-virtual-currency-list']
    }
  }
  'get-virtual-currency-sku': {
    parameters: {
      query?: {
        /** @description Response language. Two-letter lowercase language code per ISO 639-1. */
        locale?: components['parameters']['locale-query-param']
        /** @description Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Shows regional prices and restrictions for a catalog if those were specified while creating an item. <div class="note"><b>Note</b><br><br>If you do not specify the country explicitly, it will be set based on user's IP address.</div> */
        country?: components['parameters']['country-query-param']
        /** @description Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. */
        show_inactive_time_limited_items?: components['parameters']['show_inactive_time_limited_items-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Virtual currency SKU. */
        virtual_currency_sku: components['parameters']['virtual_currency_sku-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Virtual-Items-Currency_200-get-virtual-currency']
    }
  }
  'get-virtual-currency-package': {
    parameters: {
      query?: {
        /**
         * @description Limit for the number of elements on the page.
         * @example 50
         */
        limit?: components['parameters']['limit-query-param']
        /**
         * @description Number of the element from which the list is generated (the count starts from 0).
         * @example 0
         */
        offset?: components['parameters']['offset-query-param']
        /** @description Response language. Two-letter lowercase language code per ISO 639-1. */
        locale?: components['parameters']['locale-query-param']
        /** @description The list of additional fields. These fields will be in the response if you send them in your request. */
        'additional_fields[]'?: components['parameters']['additional_fields-query-param']
        /** @description Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Shows regional prices and restrictions for a catalog if those were specified while creating an item. <div class="note"><b>Note</b><br><br>If you do not specify the country explicitly, it will be set based on user's IP address.</div> */
        country?: components['parameters']['country-query-param']
        /** @description Unique case sensitive code. Contains letters and numbers. */
        promo_code?: components['parameters']['promo_code-query-param']
        /** @description Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. */
        show_inactive_time_limited_items?: components['parameters']['show_inactive_time_limited_items-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Virtual-Items-Currency_200-get-virtual-currency-packages-list']
    }
  }
  'get-virtual-currency-package-sku': {
    parameters: {
      query?: {
        /** @description Response language. Two-letter lowercase language code per ISO 639-1. */
        locale?: components['parameters']['locale-query-param']
        /** @description Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Shows regional prices and restrictions for a catalog if those were specified while creating an item. <div class="note"><b>Note</b><br><br>If you do not specify the country explicitly, it will be set based on user's IP address.</div> */
        country?: components['parameters']['country-query-param']
        /** @description Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. */
        show_inactive_time_limited_items?: components['parameters']['show_inactive_time_limited_items-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Virtual currency package SKU. */
        virtual_currency_package_sku: components['parameters']['virtual_currency_package_sku-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Virtual-Items-Currency_200-get-virtual-currency-package']
    }
  }
  'get-virtual-items-group': {
    parameters: {
      query?: {
        /**
         * @description Limit for the number of elements on the page.
         * @example 50
         */
        limit?: components['parameters']['limit-query-param']
        /**
         * @description Number of the element from which the list is generated (the count starts from 0).
         * @example 0
         */
        offset?: components['parameters']['offset-query-param']
        /** @description Response language. Two-letter lowercase language code per ISO 639-1. */
        locale?: components['parameters']['locale-query-param']
        /** @description The list of additional fields. These fields will be in the response if you send them in your request. */
        'additional_fields[]'?: components['parameters']['additional_fields-query-param']
        /** @description Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Shows regional prices and restrictions for a catalog if those were specified while creating an item. <div class="note"><b>Note</b><br><br>If you do not specify the country explicitly, it will be set based on user's IP address.</div> */
        country?: components['parameters']['country-query-param']
        /** @description Unique case sensitive code. Contains letters and numbers. */
        promo_code?: components['parameters']['promo_code-query-param']
        /** @description Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. */
        show_inactive_time_limited_items?: components['parameters']['show_inactive_time_limited_items-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Group external ID. */
        external_id: components['parameters']['external_id-group-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Virtual-Items-Currency_200-get-items-by-group-id']
      404: components['responses']['Virtual-Items-Currency_404-item-group']
    }
  }
  'get-item-groups': {
    parameters: {
      query?: {
        /** @description Unique case sensitive code. Contains letters and numbers. */
        promo_code?: components['parameters']['promo_code-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Virtual-Items-Currency_200-get-items-groups']
    }
  }
  'create-order-with-item-for-virtual-currency': {
    parameters: {
      query?: {
        /** @description Publishing platform the user plays on: `xsolla` (default), `playstation_network`, `xbox_live`, `pc_standalone`, `nintendo_shop`, `google_play`, `app_store_ios`, `android_standalone`, `ios_standalone`, `android_other`, `ios_other`, `pc_other`. */
        platform?: components['parameters']['platform-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: components['parameters']['item_sku-path-param']
        /** @description Virtual currency SKU. */
        virtual_currency_sku: components['parameters']['virtual_currency_sku-path-param']
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        /** @example {
         *       "custom_parameters": {
         *         "array_param": [
         *           {
         *             "object1": {
         *               "param": "https://xsolla.com"
         *             },
         *             "property": {
         *               "int-property": 112,
         *               "string-property": "xsolla"
         *             }
         *           },
         *           {
         *             "object2": {
         *               "param": "https://developers.xsolla.com"
         *             },
         *             "property": {
         *               "int-property": 112,
         *               "string-property": "email@example.com"
         *             }
         *           }
         *         ],
         *         "object_param": {
         *           "key": "value"
         *         },
         *         "bool_param": true,
         *         "int_param": 100,
         *         "null_param": null
         *       }
         *     } */
        'application/json': {
          custom_parameters?: components['schemas']['Cart-Payment_custom_parameters']
        }
      }
    }
    responses: {
      200: components['responses']['Virtual-Items-Currency_200-quick-purchase']
      404: components['responses']['Virtual-Items-Currency_404-item']
      422: components['responses']['Virtual-Items-Currency_422-not-enough-virtual-currency']
    }
  }
  'get-sellable-items': {
    parameters: {
      query?: {
        /**
         * @description Limit for the number of elements on the page.
         * @example 50
         */
        limit?: components['parameters']['limit-query-param']
        /**
         * @description Number of the element from which the list is generated (the count starts from 0).
         * @example 0
         */
        offset?: components['parameters']['offset-query-param']
        /** @description Response language. Two-letter lowercase language code per ISO 639-1. */
        locale?: components['parameters']['locale-query-param']
        /** @description The list of additional fields. These fields will be in the response if you send them in your request. */
        'additional_fields[]'?: components['parameters']['additional_fields-query-param']
        /** @description Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Shows regional prices and restrictions for a catalog if those were specified while creating an item. <div class="note"><b>Note</b><br><br>If you do not specify the country explicitly, it will be set based on user's IP address.</div> */
        country?: components['parameters']['country-query-param']
        /** @description Unique case sensitive code. Contains letters and numbers. */
        promo_code?: components['parameters']['promo_code-query-param']
        /** @description Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. */
        show_inactive_time_limited_items?: components['parameters']['show_inactive_time_limited_items-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id_59080-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['sellable_items_200-get-items-list']
    }
  }
  'get-sellable-item-by-id': {
    parameters: {
      query?: {
        /** @description Unique case sensitive code. Contains letters and numbers. */
        promo_code?: components['parameters']['promo_code-query-param']
        /** @description Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. */
        show_inactive_time_limited_items?: components['parameters']['show_inactive_time_limited_items-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id_59080-path-param']
        /** @description Item ID. */
        item_id: components['parameters']['item_id_59080-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['sellable_items_200-get-item-by-id']
      404: components['responses']['sellable-item-by-id_404']
    }
  }
  'get-sellable-item-by-sku': {
    parameters: {
      query?: {
        /** @description Unique case sensitive code. Contains letters and numbers. */
        promo_code?: components['parameters']['promo_code-query-param']
        /** @description Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. */
        show_inactive_time_limited_items?: components['parameters']['show_inactive_time_limited_items-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id_59080-path-param']
        /** @description Item SKU. */
        sku: components['parameters']['item_sku_59080-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['sellable_items_200-get-item-by-id']
      404: components['responses']['sellable-item-by-sku_404']
    }
  }
  'get-sellable-items-group': {
    parameters: {
      query?: {
        /**
         * @description Limit for the number of elements on the page.
         * @example 50
         */
        limit?: components['parameters']['limit-query-param']
        /**
         * @description Number of the element from which the list is generated (the count starts from 0).
         * @example 0
         */
        offset?: components['parameters']['offset-query-param']
        /** @description Response language. Two-letter lowercase language code per ISO 639-1. */
        locale?: components['parameters']['locale-query-param']
        /** @description The list of additional fields. These fields will be in the response if you send them in your request. */
        'additional_fields[]'?: components['parameters']['additional_fields-query-param']
        /** @description Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Shows regional prices and restrictions for a catalog if those were specified while creating an item. <div class="note"><b>Note</b><br><br>If you do not specify the country explicitly, it will be set based on user's IP address.</div> */
        country?: components['parameters']['country-query-param']
        /** @description Unique case sensitive code. Contains letters and numbers. */
        promo_code?: components['parameters']['promo_code-query-param']
        /** @description Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. */
        show_inactive_time_limited_items?: components['parameters']['show_inactive_time_limited_items-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id_59080-path-param']
        /** @description Group external ID. */
        external_id: components['parameters']['external_id_59080-group-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['sellable_items_200-get-items-by-group-id']
      404: components['responses']['Virtual-Items-Currency_404-item-group']
    }
  }
  'admin-get-regions': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['200-admin-get-regions-list']
      401: components['responses']['401-invalid-basic-auth']
    }
  }
  'admin-create-region': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['create-update-region']
    responses: {
      201: components['responses']['201-admin-create-region']
      401: components['responses']['401-invalid-basic-auth']
    }
  }
  'admin-get-region': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Region ID. Unique region identifier within the project. */
        region_id: components['parameters']['region_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['200-admin-get-region']
      401: components['responses']['401-invalid-basic-auth']
      404: components['responses']['404-region-not-found']
    }
  }
  'admin-update-region': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Region ID. Unique region identifier within the project. */
        region_id: components['parameters']['region_id-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['create-update-region']
    responses: {
      204: components['responses']['204-admin-update-region']
      401: components['responses']['401-invalid-basic-auth']
      404: components['responses']['404-region-not-found']
    }
  }
  'admin-delete-region': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Region ID. Unique region identifier within the project. */
        region_id: components['parameters']['region_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      204: components['responses']['204-admin-delete-region']
      401: components['responses']['401-invalid-basic-auth']
      404: components['responses']['404-region-not-found']
    }
  }
  'admin-get-nft-items-list': {
    parameters: {
      query?: {
        /**
         * @description Limit for the number of elements on the page.
         * @example 50
         */
        limit?: components['parameters']['limit-query-param']
        /**
         * @description Number of the element from which the list is generated (the count starts from 0).
         * @example 0
         */
        offset?: components['parameters']['offset-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Nft-Items_200-admin-get-nft-items']
      401: components['responses']['Nft-Items_401-invalid-basic-auth']
    }
  }
  'admin-create-nft-item': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['Nft-Items_admin-create-nft-item']
    responses: {
      201: components['responses']['Nft-Items_201-created']
      422: components['responses']['Nft-Items_422-invalid-request']
    }
  }
  'admin-get-nft-item': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: components['parameters']['item_sku-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Nft-Items_200-admin-get-item']
      401: components['responses']['Nft-Items_401-invalid-basic-auth']
    }
  }
  'admin-update-nft-item': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: components['parameters']['item_sku-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['Nft-Items_admin-create-nft-item']
    responses: {
      /** @description NFT item was successfully updated. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['Nft-Items_401-invalid-basic-auth']
      422: components['responses']['Nft-Items_422-invalid-request']
    }
  }
  'admin-delete-nft-item': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: components['parameters']['item_sku-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description NFT item was successfully deleted. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['Nft-Items_401-invalid-basic-auth']
    }
  }
  'get-nft-items': {
    parameters: {
      query?: {
        /**
         * @description Limit for the number of elements on the page.
         * @example 50
         */
        limit?: components['parameters']['limit-query-param']
        /**
         * @description Number of the element from which the list is generated (the count starts from 0).
         * @example 0
         */
        offset?: components['parameters']['offset-query-param']
        /** @description Response language. Two-letter lowercase language code per ISO 639-1. */
        locale?: components['parameters']['locale-query-param']
        /** @description The list of additional fields. These fields will be in the response if you send them in your request. */
        'additional_fields[]'?: components['parameters']['additional_fields-query-param']
        /** @description Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Shows regional prices and restrictions for a catalog if those were specified while creating an item. <div class="note"><b>Note</b><br><br>If you do not specify the country explicitly, it will be set based on user's IP address.</div> */
        country?: components['parameters']['country-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Nft-Items_200-get-items-list']
    }
  }
  'reset-all-user-items-limit': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['reset-user-limits']
    responses: {
      /** @description The limit was successfully refreshed. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['Common_401-invalid-basic-auth']
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
    }
  }
  'reset-user-item-limit': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: components['parameters']['item_sku-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['reset-user-limits-flexible']
    responses: {
      /** @description The limit was successfully refreshed. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['Common_401-invalid-basic-auth']
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
    }
  }
  'get-user-item-limit': {
    parameters: {
      query: {
        /** @description User external ID */
        user_external_id: components['parameters']['user_external_id-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: components['parameters']['item_sku-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['200-admin-get-user-item-limits']
      401: components['responses']['Common_401-invalid-basic-auth']
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
    }
  }
  'set-user-item-limit': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: components['parameters']['item_sku-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['update-user-limits-flexible']
    responses: {
      200: components['responses']['200-admin-get-user-item-limits']
      401: components['responses']['Common_401-invalid-basic-auth']
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
    }
  }
  'add-user-item-limit': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: components['parameters']['item_sku-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['update-user-limits-strict']
    responses: {
      200: components['responses']['200-admin-get-user-item-limits']
      401: components['responses']['Common_401-invalid-basic-auth']
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
    }
  }
  'remove-user-item-limit': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: components['parameters']['item_sku-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['update-user-limits-strict']
    responses: {
      200: components['responses']['200-admin-get-user-item-limits']
      401: components['responses']['Common_401-invalid-basic-auth']
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
    }
  }
  'reset-all-user-promotions-limit': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['reset-user-limits']
    responses: {
      /** @description The promotion limit was successfully refreshed. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['Common_401-invalid-basic-auth']
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
    }
  }
  'reset-user-promotion-limit': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Promotion ID. Unique promotion identifier within the project. */
        promotion_id: components['parameters']['promotion_id-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['reset-user-limits-flexible']
    responses: {
      /** @description The promotion limit was successfully refreshed. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['Common_401-invalid-basic-auth']
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
    }
  }
  'get-user-promotion-limit': {
    parameters: {
      query: {
        /** @description User external ID */
        user_external_id: components['parameters']['user_external_id-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Promotion ID. Unique promotion identifier within the project. */
        promotion_id: components['parameters']['promotion_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['200-admin-get-user-promotion-limits']
      401: components['responses']['Common_401-invalid-basic-auth']
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
    }
  }
  'set-user-promotion-limit': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Promotion ID. Unique promotion identifier within the project. */
        promotion_id: components['parameters']['promotion_id-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['update-user-limits-flexible']
    responses: {
      200: components['responses']['200-admin-get-user-promotion-limits']
      401: components['responses']['Common_401-invalid-basic-auth']
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
    }
  }
  'add-user-promotion-limit': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Promotion ID. Unique promotion identifier within the project. */
        promotion_id: components['parameters']['promotion_id-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['update-user-limits-strict']
    responses: {
      200: components['responses']['200-admin-get-user-promotion-limits']
      401: components['responses']['Common_401-invalid-basic-auth']
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
    }
  }
  'remove-user-promotion-limit': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Promotion ID. Unique promotion identifier within the project. */
        promotion_id: components['parameters']['promotion_id-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['update-user-limits-strict']
    responses: {
      200: components['responses']['200-admin-get-user-promotion-limits']
      401: components['responses']['Common_401-invalid-basic-auth']
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
    }
  }
  'get-promo-code-user-limit': {
    parameters: {
      query: {
        /** @description User external ID */
        user_external_id: components['parameters']['user_external_id-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Promotion external ID. Unique promotion identifier within the project. */
        external_id: components['parameters']['external_id-promotion-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['200-admin-get-user-promo-code-limits']
      401: components['responses']['Common_401-invalid-basic-auth']
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
    }
  }
  'set-promo-code-user-promotion-limit': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Promotion external ID. Unique promotion identifier within the project. */
        external_id: components['parameters']['external_id-promotion-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['update-promo-code-user-limits-flexible']
    responses: {
      200: components['responses']['200-admin-get-user-promo-code-limits']
      401: components['responses']['Common_401-invalid-basic-auth']
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
    }
  }
  'add-promo-code-user-promotion-limit': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Promotion external ID. Unique promotion identifier within the project. */
        external_id: components['parameters']['external_id-promotion-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['update-promo-code-user-limits-strict']
    responses: {
      200: components['responses']['200-admin-get-user-promo-code-limits']
      401: components['responses']['Common_401-invalid-basic-auth']
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
    }
  }
  'remove-promo-code-user-promotion-limit': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Promotion external ID. Unique promotion identifier within the project. */
        external_id: components['parameters']['external_id-promotion-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['update-promo-code-user-limits-strict']
    responses: {
      200: components['responses']['200-admin-get-user-promo-code-limits']
      401: components['responses']['Common_401-invalid-basic-auth']
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
    }
  }
  'get-coupon-user-limit': {
    parameters: {
      query: {
        /** @description User external ID */
        user_external_id: components['parameters']['user_external_id-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Promotion external ID. Unique promotion identifier within the project. */
        external_id: components['parameters']['external_id-promotion-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['200-admin-get-user-coupon-limits']
      401: components['responses']['Common_401-invalid-basic-auth']
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
    }
  }
  'set-coupon-user-promotion-limit': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Promotion external ID. Unique promotion identifier within the project. */
        external_id: components['parameters']['external_id-promotion-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['update-coupon-user-limits-flexible']
    responses: {
      200: components['responses']['200-admin-get-user-coupon-limits']
      401: components['responses']['Common_401-invalid-basic-auth']
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
    }
  }
  'add-coupon-user-promotion-limit': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Promotion external ID. Unique promotion identifier within the project. */
        external_id: components['parameters']['external_id-promotion-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['update-coupon-user-limits-strict']
    responses: {
      200: components['responses']['200-admin-get-user-coupon-limits']
      401: components['responses']['Common_401-invalid-basic-auth']
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
    }
  }
  'remove-coupon-user-promotion-limit': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Promotion external ID. Unique promotion identifier within the project. */
        external_id: components['parameters']['external_id-promotion-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['update-coupon-user-limits-strict']
    responses: {
      200: components['responses']['200-admin-get-user-coupon-limits']
      401: components['responses']['Common_401-invalid-basic-auth']
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
    }
  }
  'get-promo-code-code-limit': {
    parameters: {
      query?: {
        /** @description Unique case-sensitive codes. Contain only letters and numbers. */
        'codes[]'?: components['parameters']['codes-query-param']
        /**
         * @description Limit for the number of elements on the page.
         * @example 50
         */
        limit?: components['parameters']['limit-query-param']
        /**
         * @description Number of the element from which the list is generated (the count starts from 0).
         * @example 0
         */
        offset?: components['parameters']['offset-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Promotion external ID. Unique promotion identifier within the project. */
        external_id: components['parameters']['external_id-promotion-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['200-admin-get-code-promo-code-limits']
      401: components['responses']['Common_401-invalid-basic-auth']
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
    }
  }
  'get-coupon-code-limit': {
    parameters: {
      query?: {
        /** @description Unique case-sensitive codes. Contain only letters and numbers. */
        'codes[]'?: components['parameters']['codes-query-param']
        /**
         * @description Limit for the number of elements on the page.
         * @example 50
         */
        limit?: components['parameters']['limit-query-param']
        /**
         * @description Number of the element from which the list is generated (the count starts from 0).
         * @example 0
         */
        offset?: components['parameters']['offset-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Promotion external ID. Unique promotion identifier within the project. */
        external_id: components['parameters']['external_id-promotion-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['200-admin-get-code-coupon-limits']
      401: components['responses']['Common_401-invalid-basic-auth']
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
    }
  }
  'admin-get-value-points-list': {
    parameters: {
      query?: {
        /**
         * @description Limit for the number of elements on the page.
         * @example 50
         */
        limit?: components['parameters']['limit-query-param']
        /**
         * @description Number of the element from which the list is generated (the count starts from 0).
         * @example 0
         */
        offset?: components['parameters']['offset-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['200-admin-get-value-points']
      401: components['responses']['401-invalid-basic-auth']
    }
  }
  'admin-create-value-points': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['create-value-point']
    responses: {
      201: components['responses']['201-admin-create-value-point']
      401: components['responses']['401-invalid-basic-auth']
      422: components['responses']['422-admin-create-invalid-request']
    }
  }
  'admin-get-value-point': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: components['parameters']['item_sku-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['200-admin-get-value-point']
      401: components['responses']['401-invalid-basic-auth']
    }
  }
  'admin-update-value-point': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: components['parameters']['item_sku-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['create-value-point']
    responses: {
      /** @description Value point was successfully updated. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['401-invalid-basic-auth']
      422: components['responses']['422-admin-create-invalid-request']
    }
  }
  'admin-delete-value-point': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: components['parameters']['item_sku-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Value point was successfully deleted. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['401-invalid-basic-auth']
    }
  }
  'admin-get-items-value-point-reward': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: components['parameters']['item_sku-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['200-admin-get-list-value-point-rewards']
      401: components['responses']['401-invalid-basic-auth']
    }
  }
  'admin-set-items-value-point-reward': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: components['parameters']['item_sku-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['set-item-value-point-reward']
    responses: {
      /** @description Value point rewards for items were successfully updated. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['401-invalid-basic-auth']
      404: components['responses']['sellable-item-by-sku_404']
    }
  }
  'admin-delete-items-value-point-reward': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Item SKU. */
        item_sku: components['parameters']['item_sku-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Value point rewards for items were successfully deleted. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['401-invalid-basic-auth']
    }
  }
  'get-reward-chains-list': {
    parameters: {
      query?: {
        /**
         * @description Limit for the number of elements on the page.
         * @example 50
         */
        limit?: components['parameters']['limit-query-param']
        /**
         * @description Number of the element from which the list is generated (the count starts from 0).
         * @example 0
         */
        offset?: components['parameters']['offset-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['200-client-get-reward-chains-list']
    }
  }
  'get-user-reward-chain-balance': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Reward chain ID. */
        reward_chain_id: components['parameters']['reward_chain_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['200-client-get-user-reward-chain-balance']
      401: components['responses']['Promotions_401-invalid-client-auth']
    }
  }
  'claim-user-reward-chain-step-reward': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Reward chain ID. */
        reward_chain_id: components['parameters']['reward_chain_id-path-param']
        /** @description Reward chain step ID. */
        step_id: components['parameters']['reward_chain_step_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successfully claimed the current user's step reward from a reward chain. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['Promotions_401-invalid-client-auth']
      404: components['responses']['404-reward-chain-step-not-found']
      422: components['responses']['422-reward-chain-step-reward-can-not-claimed']
    }
  }
  'admin-get-reward-chains': {
    parameters: {
      query?: {
        /**
         * @description Limit for the number of elements on the page.
         * @example 50
         */
        limit?: components['parameters']['limit-query-param']
        /**
         * @description Number of the element from which the list is generated (the count starts from 0).
         * @example 0
         */
        offset?: components['parameters']['offset-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['200-admin-get-list-reward-chains']
      401: components['responses']['401-invalid-basic-auth']
    }
  }
  'admin-create-reward-chain': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['create-reward-chain']
    responses: {
      201: components['responses']['201-admin-create-reward-chain']
      401: components['responses']['401-invalid-basic-auth']
      422: components['responses']['422-admin-create-invalid-request']
    }
  }
  'admin-get-reward-chain': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Reward chain ID. */
        reward_chain_id: components['parameters']['reward_chain_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['200-admin-get-reward-chain']
      401: components['responses']['401-invalid-basic-auth']
      404: components['responses']['404-admin-reward-chain-not-found']
    }
  }
  'admin-update-reward-chain': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Reward chain ID. */
        reward_chain_id: components['parameters']['reward_chain_id-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['update-reward-chain']
    responses: {
      204: components['responses']['204-admin-update-reward-chain']
      401: components['responses']['401-invalid-basic-auth']
      404: components['responses']['404-admin-reward-chain-not-found']
      422: components['responses']['422-admin-create-invalid-request']
    }
  }
  'admin-delete-reward-chain': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Reward chain ID. */
        reward_chain_id: components['parameters']['reward_chain_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      204: components['responses']['204-admin-delete-reward-chain']
      401: components['responses']['401-invalid-basic-auth']
    }
  }
  'admin-toggle-reward-chain': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Reward chain ID. */
        reward_chain_id: components['parameters']['reward_chain_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      204: components['responses']['204-admin-toggle-reward-chain']
      401: components['responses']['401-invalid-basic-auth']
    }
  }
  'get-unique-catalog-offers': {
    parameters: {
      query?: {
        /**
         * @description Limit for the number of elements on the page.
         * @example 50
         */
        limit?: components['parameters']['limit-query-param']
        /**
         * @description Number of the element from which the list is generated (the count starts from 0).
         * @example 0
         */
        offset?: components['parameters']['offset-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Promotions_200-get-unique-catalog-offers']
      401: components['responses']['Promotions_401-invalid-basic-auth']
    }
  }
  'admin-create-unique-catalog-offer': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['Promotions_unique_catalog_offer-create']
    responses: {
      /** @description Unique catalog offer was successfully created. */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            external_id?: components['schemas']['Promotions_coupon-external_id']
          }
        }
      }
      401: components['responses']['Promotions_401-invalid-basic-auth']
      422: components['responses']['Promotions_422-invalid-coupon']
    }
  }
  'get-unique-catalog-offer': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Promotion external ID. Unique promotion identifier within the project. */
        external_id: components['parameters']['external_id-promotion-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Unique catalog offer was successfully received. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Promotions_200-get-unique-catalog-offer-promotion-model']
        }
      }
      401: components['responses']['Promotions_401-invalid-basic-auth']
      404: components['responses']['Promotions_404-admin-coupon']
    }
  }
  'update-unique-catalog-offer-promotion': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Promotion external ID. Unique promotion identifier within the project. */
        external_id: components['parameters']['external_id-promotion-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['Promotions_unique_catalog_offer-update']
    responses: {
      /** @description Unique catalog offer was successfully updated. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['Promotions_401-invalid-basic-auth']
      404: components['responses']['Promotions_404-admin-coupon']
      422: components['responses']['Promotions_422-invalid-coupon']
    }
  }
  'activate-unique-catalog-offer': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Promotion external ID. Unique promotion identifier within the project. */
        external_id: components['parameters']['external_id-promotion-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Unique catalog offer was successfully activated. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['Promotions_401-invalid-basic-auth']
      404: components['responses']['Promotions_404-admin-coupon']
      422: components['responses']['Promotions_422-admin-promotion-error']
    }
  }
  'deactivate-unique-catalog-offer': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Promotion external ID. Unique promotion identifier within the project. */
        external_id: components['parameters']['external_id-promotion-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Unique catalog offer was successfully deactivated. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: components['responses']['Promotions_401-invalid-basic-auth']
      404: components['responses']['Promotions_404-admin-coupon']
      422: components['responses']['Promotions_422-admin-promotion-error']
    }
  }
  'get-unique-catalog-offer-codes': {
    parameters: {
      query?: {
        /**
         * @description Limit for the number of elements on the page.
         * @example 50
         */
        limit?: components['parameters']['limit-query-param']
        /**
         * @description Number of the element from which the list is generated (the count starts from 0).
         * @example 0
         */
        offset?: components['parameters']['offset-query-param']
      }
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Promotion external ID. Unique promotion identifier within the project. */
        external_id: components['parameters']['external_id-promotion-path-param']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['Promotions_200-unique-catalog-offer-code-list']
      401: components['responses']['Promotions_401-invalid-basic-auth']
      404: components['responses']['Promotions_404-admin-coupon']
    }
  }
  'create-unique-catalog-offer-code': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Promotion external ID. Unique promotion identifier within the project. */
        external_id: components['parameters']['external_id-promotion-path-param']
      }
      cookie?: never
    }
    requestBody?: components['requestBodies']['Promotions_create-coupon-promocode-code']
    responses: {
      201: components['responses']['Promotions_201-coupon-promocode-code-created']
      401: components['responses']['Promotions_401-invalid-basic-auth']
      404: components['responses']['Promotions_404-admin-coupon']
      422: components['responses']['Promotions_422-coupon-promocode-same-code-exists']
    }
  }
  'generate-unique-catalog-offer-codes': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ID. */
        project_id: components['parameters']['project_id-path-param']
        /** @description Promotion external ID. Unique promotion identifier within the project. */
        external_id: components['parameters']['external_id-promotion-path-param']
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': {
          count: components['schemas']['Promotions_coupon-generate-count']
        }
      }
    }
    responses: {
      /** @description The codes were successfully generated. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            count?: components['schemas']['Promotions_coupon-generate-count']
          }
        }
      }
      401: components['responses']['Promotions_401-invalid-basic-auth']
      404: components['responses']['Promotions_404-admin-promocode']
    }
  }
}
